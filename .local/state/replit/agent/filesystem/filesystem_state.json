{"file_contents":{"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"bcrypt>=4.3.0\",\n    \"certifi>=2025.1.31\",\n    \"django>=5.2.5\",\n    \"django-cors-headers>=4.7.0\",\n    \"djangorestframework>=3.16.1\",\n    \"mysql-connector-python>=9.4.0\",\n    \"pandas>=2.2.3\",\n    \"python-dotenv>=1.1.1\",\n    \"pytz>=2025.2\",\n    \"requests>=2.32.3\",\n    \"schedule>=1.2.2\",\n    \"streamlit>=1.44.1\",\n    \"streamlit-lottie>=0.0.5\",\n]\n","size_bytes":490},"replit.md":{"content":"# School Management System Migration Project\n\n## Overview\n\nSuccessfully migrated existing School Management System from Streamlit to Django (Backend) + React (Frontend). The system manages automatic teacher arrangements, absence tracking, and replacements with a professional, mobile-friendly design.\n\n**MIGRATION STATUS: COMPLETED ✓**\n- Django backend with 5 apps (authentication, teachers, arrangements, attendance, schedules)\n- React frontend with Ant Design components and professional UI\n- Railway MySQL database connection established\n- All existing Python business logic preserved in backend/existing_modules/\n- Professional login page with school selection dropdown\n- Multi-school support implemented with school_id based access control\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with component-based architecture\n- **UI Framework**: Ant Design with professional components and theming\n- **UI Components**: Modern components including dashboard, teacher management, arrangements, attendance, and reports\n- **Styling**: Professional CSS with Poppins font family, responsive mobile-friendly design with gradients\n- **State Management**: React hooks and localStorage for user authentication and data persistence\n- **Routing**: React Router for navigation between pages\n- **API Integration**: Axios for Django backend communication\n\n### Backend Architecture\n- **Framework**: Django with Django REST Framework\n- **Apps Structure**: 5 Django apps (authentication, teachers, arrangements, attendance, schedules)\n- **Core Logic**: ALL existing Python business logic preserved in `backend/existing_modules/`\n- **Data Manager**: Original `data_manager.py` preserved for database operations\n- **Authentication**: Django REST API with preserved bcrypt authentication logic\n- **Arrangement Logic**: Original `arrangement_logic.py` preserved for teacher replacement algorithms\n- **Auto Marking**: Original `auto_marker.py` preserved for automated attendance\n- **API Endpoints**: RESTful APIs for all frontend interactions\n\n### Data Storage\n- **Database**: MySQL database with Railway hosting\n- **Connection**: Environment variable-based configuration with connection pooling\n- **Schema**: Comprehensive schema including schools, admins, users, arrangements, attendance, schedules, and coverage tracking tables\n- **Data Import**: CSV import functionality for bulk data operations\n\n### Authentication & Authorization\n- **User Management**: Multi-role system (admin, teachers) with school-based isolation\n- **Security**: Password hashing with bcrypt, API key authentication for external integrations\n- **Domain Validation**: Domain-based access control ensuring users can only access from authorized domains\n- **Session Management**: Streamlit session-based user state management\n\n### Business Logic Components\n- **Arrangement Engine**: Advanced algorithm for teacher replacement with subject expertise matching and workload distribution\n- **Attendance System**: Biometric integration with bulk processing capabilities\n- **Scheduling**: Daily and weekly schedule management with period-based organization\n- **Reporting**: Comprehensive analytics and reporting with date range filtering\n\n## External Dependencies\n\n### Third-Party Services\n- **MSG91**: WhatsApp messaging service for notifications and communication\n- **Tawk.to**: Customer support chat widget integration\n\n### Database & Hosting\n- **Railway**: Cloud hosting platform with MySQL database\n- **MySQL Connector**: Database connectivity with connection pooling and error handling\n\n### Python Libraries\n- **Streamlit**: Web application framework for UI components\n- **Pandas**: Data manipulation and analysis\n- **Plotly**: Interactive data visualization and charts\n- **PyTZ**: Timezone handling for IST (Asia/Kolkata)\n- **BCrypt**: Password hashing and security\n- **Flask**: API server for external integrations\n- **Schedule**: Task scheduling for automated operations\n\n### Frontend Dependencies\n- **Google Fonts**: Poppins font family for consistent typography\n- **Streamlit Lottie**: Animation components for enhanced UI\n- **Custom CSS**: Professional styling with gradients and responsive design\n\n### Development Tools\n- **dotenv**: Environment variable management for development\n- **Certifi**: SSL certificate verification\n- **Watchdog**: File system monitoring for development","size_bytes":4445},"backend/generated_models.py":{"content":"# This is an auto-generated Django model module.\n# You'll have to do the following manually to clean this up:\n#   * Rearrange models' order\n#   * Make sure each model has one field with primary_key=True\n#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior\n#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table\n# Feel free to rename the models, but don't rename db_table values or field names.\nfrom django.db import models\n\n\nclass Admins(models.Model):\n    school_id = models.CharField(max_length=50, blank=True, null=True)\n    username = models.CharField(max_length=255, blank=True, null=True)\n    password = models.CharField(max_length=255, blank=True, null=True)\n    name = models.CharField(max_length=255, blank=True, null=True)\n    phone = models.CharField(max_length=20, blank=True, null=True)\n    teacher_id = models.CharField(max_length=50, blank=True, null=True)\n    email = models.CharField(max_length=255, blank=True, null=True)\n\n    class Meta:\n        managed = False\n        db_table = 'admins'\n        unique_together = (('school_id', 'username'),)\n\n\nclass Arrangements(models.Model):\n    school_id = models.CharField(max_length=50, blank=True, null=True)\n    date = models.DateField(blank=True, null=True)\n    absent_teacher = models.CharField(max_length=50, blank=True, null=True)\n    absent_name = models.CharField(max_length=255, blank=True, null=True)\n    absent_category = models.CharField(max_length=50, blank=True, null=True)\n    replacement_teacher = models.CharField(max_length=50, blank=True, null=True)\n    replacement_name = models.CharField(max_length=255, blank=True, null=True)\n    replacement_category = models.CharField(max_length=50, blank=True, null=True)\n    class_field = models.CharField(db_column='class', max_length=50, blank=True, null=True)  # Field renamed because it was a Python reserved word.\n    period = models.IntegerField(blank=True, null=True)\n    status = models.CharField(max_length=50, blank=True, null=True)\n    match_quality = models.CharField(max_length=50, blank=True, null=True)\n\n    class Meta:\n        managed = False\n        db_table = 'arrangements'\n\n\nclass Attendance(models.Model):\n    school_id = models.CharField(max_length=50, blank=True, null=True)\n    date = models.DateField(blank=True, null=True)\n    teacher_id = models.CharField(max_length=50, blank=True, null=True)\n    status = models.CharField(max_length=20, blank=True, null=True)\n    timestamp = models.DateTimeField(blank=True, null=True)\n    is_auto = models.IntegerField(blank=True, null=True)\n    biometric_code = models.CharField(unique=True, max_length=25, blank=True, null=True)\n    marked_by = models.CharField(max_length=50, blank=True, null=True)\n    remarks = models.TextField(blank=True, null=True)\n\n    class Meta:\n        managed = False\n        db_table = 'attendance'\n        unique_together = (('school_id', 'teacher_id', 'date'),)\n\n\nclass AuthGroup(models.Model):\n    name = models.CharField(unique=True, max_length=80)\n\n    class Meta:\n        managed = False\n        db_table = 'auth_group'\n\n\nclass AuthGroupPermissions(models.Model):\n    id = models.BigAutoField(primary_key=True)\n    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)\n    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)\n\n    class Meta:\n        managed = False\n        db_table = 'auth_group_permissions'\n        unique_together = (('group', 'permission'),)\n\n\nclass AuthPermission(models.Model):\n    name = models.CharField(max_length=50)\n    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)\n    codename = models.CharField(max_length=100)\n\n    class Meta:\n        managed = False\n        db_table = 'auth_permission'\n        unique_together = (('content_type', 'codename'),)\n\n\nclass AuthUser(models.Model):\n    password = models.CharField(max_length=128)\n    last_login = models.DateTimeField()\n    is_superuser = models.IntegerField()\n    username = models.CharField(unique=True, max_length=30)\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n    email = models.CharField(max_length=75)\n    is_staff = models.IntegerField()\n    is_active = models.IntegerField()\n    date_joined = models.DateTimeField()\n\n    class Meta:\n        managed = False\n        db_table = 'auth_user'\n\n\nclass AuthUserGroups(models.Model):\n    id = models.BigAutoField(primary_key=True)\n    user = models.ForeignKey(AuthUser, models.DO_NOTHING)\n    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)\n\n    class Meta:\n        managed = False\n        db_table = 'auth_user_groups'\n        unique_together = (('user', 'group'),)\n\n\nclass AuthUserUserPermissions(models.Model):\n    id = models.BigAutoField(primary_key=True)\n    user = models.ForeignKey(AuthUser, models.DO_NOTHING)\n    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)\n\n    class Meta:\n        managed = False\n        db_table = 'auth_user_user_permissions'\n        unique_together = (('user', 'permission'),)\n\n\nclass BillingPlans(models.Model):\n    plan_name = models.CharField(max_length=50)\n    monthly_price = models.DecimalField(max_digits=10, decimal_places=2)\n    yearly_price = models.DecimalField(max_digits=10, decimal_places=2)\n    features = models.JSONField(blank=True, null=True)\n    is_premium = models.IntegerField(blank=True, null=True)\n    created_at = models.DateTimeField(blank=True, null=True)\n\n    class Meta:\n        managed = False\n        db_table = 'billing_plans'\n\n\nclass DailySchedules(models.Model):\n    school_id = models.CharField(max_length=50, blank=True, null=True)\n    day_of_week = models.CharField(max_length=20, blank=True, null=True)\n    teacher_id = models.CharField(max_length=50, blank=True, null=True)\n    name = models.CharField(max_length=255, blank=True, null=True)\n    category = models.CharField(max_length=50, blank=True, null=True)\n    subject = models.CharField(max_length=255, blank=True, null=True)\n    period_number = models.IntegerField(blank=True, null=True)\n    class_info = models.CharField(max_length=255, blank=True, null=True)\n    classes = models.CharField(max_length=255, blank=True, null=True)\n\n    class Meta:\n        managed = False\n        db_table = 'daily_schedules'\n\n\nclass DjangoAdminLog(models.Model):\n    action_time = models.DateTimeField()\n    object_id = models.TextField(blank=True, null=True)\n    object_repr = models.CharField(max_length=200)\n    action_flag = models.PositiveSmallIntegerField()\n    change_message = models.TextField()\n    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)\n    user = models.ForeignKey(AuthUser, models.DO_NOTHING)\n\n    class Meta:\n        managed = False\n        db_table = 'django_admin_log'\n\n\nclass DjangoContentType(models.Model):\n    name = models.CharField(max_length=100)\n    app_label = models.CharField(max_length=100)\n    model = models.CharField(max_length=100)\n\n    class Meta:\n        managed = False\n        db_table = 'django_content_type'\n        unique_together = (('app_label', 'model'),)\n\n\nclass DjangoMigrations(models.Model):\n    id = models.BigAutoField(primary_key=True)\n    app = models.CharField(max_length=255)\n    name = models.CharField(max_length=255)\n    applied = models.DateTimeField()\n\n    class Meta:\n        managed = False\n        db_table = 'django_migrations'\n\n\nclass PaymentMethods(models.Model):\n    method_id = models.AutoField(primary_key=True)\n    method_type = models.CharField(max_length=50)\n    method_name = models.CharField(max_length=100)\n    method_value = models.CharField(max_length=200)\n    additional_info = models.JSONField(blank=True, null=True)\n    is_active = models.IntegerField(blank=True, null=True)\n\n    class Meta:\n        managed = False\n        db_table = 'payment_methods'\n\n\nclass SchoolLogic(models.Model):\n    school_id = models.CharField(unique=True, max_length=50)\n    logic_name = models.CharField(max_length=255, blank=True, null=True)\n    logic_code = models.TextField()\n    is_active = models.IntegerField(blank=True, null=True)\n    updated_at = models.DateTimeField(blank=True, null=True)\n\n    class Meta:\n        managed = False\n        db_table = 'school_logic'\n\n\nclass Schools(models.Model):\n    school_id = models.CharField(primary_key=True, max_length=50)\n    school_name = models.CharField(max_length=255, blank=True, null=True)\n    address = models.CharField(max_length=255, blank=True, null=True)\n    email = models.CharField(max_length=255, blank=True, null=True)\n    api_key = models.CharField(unique=True, max_length=100, blank=True, null=True)\n    logourl = models.CharField(max_length=255, blank=True, null=True)\n\n    class Meta:\n        managed = False\n        db_table = 'schools'\n\n\nclass SuspendedDates(models.Model):\n    school_id = models.CharField(max_length=50, blank=True, null=True)\n    date = models.DateField(blank=True, null=True)\n\n    class Meta:\n        managed = False\n        db_table = 'suspended_dates'\n\n\nclass Timing(models.Model):\n    timing_id = models.AutoField(primary_key=True)\n    school_id = models.CharField(unique=True, max_length=50)\n    hour = models.IntegerField()\n    minute = models.IntegerField()\n    enabled = models.IntegerField(blank=True, null=True)\n\n    class Meta:\n        managed = False\n        db_table = 'timing'\n\n\nclass Users(models.Model):\n    school_id = models.CharField(max_length=50, blank=True, null=True)\n    teacher_id = models.CharField(max_length=50, blank=True, null=True)\n    name = models.CharField(max_length=255, blank=True, null=True)\n    phone = models.CharField(max_length=20, blank=True, null=True)\n    category = models.CharField(max_length=50, blank=True, null=True)\n    biometric_code = models.CharField(unique=True, max_length=25, blank=True, null=True)\n\n    class Meta:\n        managed = False\n        db_table = 'users'\n\n\nclass WorkloadCounter(models.Model):\n    school_id = models.CharField(max_length=50, blank=True, null=True)\n    teacher_id = models.CharField(max_length=50, blank=True, null=True)\n    workload_count = models.IntegerField(blank=True, null=True)\n\n    class Meta:\n        managed = False\n        db_table = 'workload_counter'\n","size_bytes":10227},"backend/manage.py":{"content":"#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_management_system.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n","size_bytes":680},"backend/arrangements/__init__.py":{"content":"","size_bytes":0},"backend/arrangements/admin.py":{"content":"from django.contrib import admin\n\n# Register your models here.\n","size_bytes":63},"backend/arrangements/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass ArrangementsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'arrangements'\n","size_bytes":156},"backend/arrangements/models.py":{"content":"from django.db import models\nfrom authentication.models import School\n\nclass Arrangement(models.Model):\n    id = models.AutoField(primary_key=True)\n    school = models.ForeignKey(School, on_delete=models.CASCADE, db_column='school_id')\n    date = models.DateField()\n    absent_teacher = models.CharField(max_length=255)\n    replacement_teacher = models.CharField(max_length=255, blank=True, null=True)\n    class_name = models.CharField(max_length=255, db_column='class')\n    period = models.IntegerField()\n    status = models.CharField(max_length=50, default='Pending')\n    \n    class Meta:\n        db_table = 'arrangements'\n    \n    def __str__(self):\n        return f\"{self.absent_teacher} -> {self.replacement_teacher} ({self.date})\"\n\nclass CoverageTracking(models.Model):\n    id = models.AutoField(primary_key=True)\n    school = models.ForeignKey(School, on_delete=models.CASCADE, db_column='school_id')\n    date = models.DateField()\n    period = models.IntegerField()\n    class_name = models.CharField(max_length=255)\n    section = models.CharField(max_length=50, blank=True, null=True)\n    subject = models.CharField(max_length=255, blank=True, null=True)\n    original_teacher_id = models.CharField(max_length=255)\n    replacement_teacher_id = models.CharField(max_length=255, blank=True, null=True)\n    \n    class Meta:\n        db_table = 'coverage_tracking'\n    \n    def __str__(self):\n        return f\"Coverage {self.date} P{self.period} - {self.class_name}\"\n\nclass SuspendedDate(models.Model):\n    id = models.AutoField(primary_key=True)\n    school = models.ForeignKey(School, on_delete=models.CASCADE, db_column='school_id')\n    date = models.DateField()\n    \n    class Meta:\n        db_table = 'suspended_dates'\n        unique_together = ('school', 'date')\n    \n    def __str__(self):\n        return f\"Suspended: {self.date}\"\n\nclass SchoolLogic(models.Model):\n    id = models.AutoField(primary_key=True)\n    school = models.ForeignKey(School, on_delete=models.CASCADE, db_column='school_id')\n    logic_name = models.CharField(max_length=255)\n    logic_code = models.TextField()\n    is_active = models.BooleanField(default=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        db_table = 'school_logic'\n        unique_together = ('school', 'logic_name')\n    \n    def __str__(self):\n        return f\"{self.logic_name} - {self.school.school_name}\"\n","size_bytes":2391},"backend/arrangements/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"backend/arrangements/urls.py":{"content":"from django.urls import path\n\nurlpatterns = [\n    # Arrangements URLs - to be implemented\n]","size_bytes":91},"backend/arrangements/views.py":{"content":"from django.shortcuts import render\n\n# Create your views here.\n","size_bytes":63},"backend/attendance/__init__.py":{"content":"","size_bytes":0},"backend/attendance/admin.py":{"content":"from django.contrib import admin\n\n# Register your models here.\n","size_bytes":63},"backend/attendance/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass AttendanceConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'attendance'\n","size_bytes":152},"backend/attendance/models.py":{"content":"from django.db import models\nfrom authentication.models import School\n\nclass Attendance(models.Model):\n    id = models.AutoField(primary_key=True)\n    school = models.ForeignKey(School, on_delete=models.CASCADE, db_column='school_id')\n    date = models.DateField()\n    teacher_id = models.CharField(max_length=255)\n    status = models.CharField(max_length=50)  # Present, Absent, Late, etc.\n    timestamp = models.DateTimeField()\n    is_auto = models.BooleanField(default=False)  # Whether marked automatically\n    biometric_code = models.CharField(max_length=255, blank=True, null=True)\n    \n    class Meta:\n        db_table = 'attendance'\n        unique_together = ('school', 'date', 'teacher_id')\n    \n    def __str__(self):\n        return f\"{self.teacher_id} - {self.date} ({self.status})\"\n\nclass Timing(models.Model):\n    timing_id = models.AutoField(primary_key=True)\n    school = models.ForeignKey(School, on_delete=models.CASCADE, db_column='school_id')\n    hour = models.IntegerField()\n    minute = models.IntegerField()\n    enabled = models.BooleanField(default=True)\n    \n    class Meta:\n        db_table = 'timing'\n    \n    def __str__(self):\n        return f\"{self.hour:02d}:{self.minute:02d} - {self.school.school_name}\"\n","size_bytes":1235},"backend/attendance/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"backend/attendance/urls.py":{"content":"\nfrom django.urls import path\n\nurlpatterns = [\n    # Attendance URLs - to be implemented\n]\n","size_bytes":91},"backend/attendance/views.py":{"content":"from django.shortcuts import render\n\n# Create your views here.\n","size_bytes":63},"backend/authentication/__init__.py":{"content":"","size_bytes":0},"backend/authentication/admin.py":{"content":"from django.contrib import admin\n\n# Register your models here.\n","size_bytes":63},"backend/authentication/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass AuthenticationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'authentication'\n","size_bytes":160},"backend/authentication/models.py":{"content":"\nfrom django.db import models\n\nclass School(models.Model):\n    school_id = models.CharField(max_length=10, primary_key=True)\n    school_name = models.CharField(max_length=255)\n    address = models.TextField(blank=True, null=True)\n    email = models.EmailField(blank=True, null=True)\n    api_key = models.CharField(max_length=255, blank=True, null=True)\n    logourl = models.URLField(blank=True, null=True)\n\n    class Meta:\n        db_table = 'schools'\n        managed = False  # Django won't manage this table\n\n    def __str__(self):\n        return self.school_name\n\nclass Admin(models.Model):\n    id = models.AutoField(primary_key=True)\n    school_id = models.CharField(max_length=10, db_column='school_id')\n    username = models.CharField(max_length=255)\n    password = models.CharField(max_length=255)\n    name = models.CharField(max_length=255)\n    phone = models.CharField(max_length=20, blank=True, null=True)\n    teacher_id = models.CharField(max_length=255, blank=True, null=True)\n    email = models.EmailField(blank=True, null=True)\n\n    class Meta:\n        db_table = 'admins'\n        managed = False  # Django won't manage this table\n\n    def __str__(self):\n        return f\"{self.name} ({self.username})\"\n","size_bytes":1217},"backend/authentication/serializers.py":{"content":"\nfrom rest_framework import serializers\nfrom .models import School, Admin\n\nclass SchoolSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = School\n        fields = ['school_id', 'school_name', 'address', 'email', 'logourl']\n\nclass AdminSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Admin\n        fields = ['id', 'school_id', 'username', 'name', 'phone', 'teacher_id', 'email']\n        extra_kwargs = {'password': {'write_only': True}}\n","size_bytes":482},"backend/authentication/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"backend/authentication/urls.py":{"content":"\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('schools/', views.get_schools, name='get_schools'),\n    path('login/', views.login, name='login'),\n]\n","size_bytes":177},"backend/authentication/views.py":{"content":"from rest_framework import status\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom django.db import connection\nfrom .models import School, Admin\nfrom .serializers import SchoolSerializer, AdminSerializer\nimport bcrypt\n\n@api_view(['GET'])\ndef get_schools(request):\n    \"\"\"Get list of all schools\"\"\"\n    try:\n        with connection.cursor() as cursor:\n            cursor.execute(\"SELECT school_id, school_name, address, email, logourl FROM schools\")\n            schools_data = cursor.fetchall()\n\n            schools = []\n            for school in schools_data:\n                schools.append({\n                    'school_id': school[0],\n                    'school_name': school[1],\n                    'address': school[2],\n                    'email': school[3],\n                    'logourl': school[4]\n                })\n\n            return Response({'schools': schools}, status=status.HTTP_200_OK)\n    except Exception as e:\n        print(f\"Error fetching schools: {e}\")\n        return Response(\n            {'error': 'Failed to fetch schools'}, \n            status=status.HTTP_500_INTERNAL_SERVER_ERROR\n        )\n\n@api_view(['POST'])\ndef login(request):\n    \"\"\"Admin login\"\"\"\n    try:\n        school_id = request.data.get('school_id')\n        username = request.data.get('username')\n        password = request.data.get('password')\n\n        if not all([school_id, username, password]):\n            return Response(\n                {'error': 'School ID, username and password are required'}, \n                status=status.HTTP_400_BAD_REQUEST\n            )\n\n        with connection.cursor() as cursor:\n            cursor.execute(\n                \"SELECT id, school_id, username, password, name, phone, teacher_id, email FROM admins WHERE school_id = %s AND username = %s\",\n                [school_id, username]\n            )\n            admin_data = cursor.fetchone()\n\n            if not admin_data:\n                return Response(\n                    {'error': 'Invalid credentials'}, \n                    status=status.HTTP_401_UNAUTHORIZED\n                )\n\n            # Check password (assuming bcrypt hashed)\n            stored_password = admin_data[3]\n            if isinstance(stored_password, str):\n                stored_password = stored_password.encode('utf-8')\n\n            if isinstance(password, str):\n                password = password.encode('utf-8')\n\n            # For now, simple string comparison (you can implement bcrypt later)\n            if stored_password.decode('utf-8') == password.decode('utf-8'):\n                admin_info = {\n                    'id': admin_data[0],\n                    'school_id': admin_data[1],\n                    'username': admin_data[2],\n                    'name': admin_data[4],\n                    'phone': admin_data[5],\n                    'teacher_id': admin_data[6],\n                    'email': admin_data[7]\n                }\n\n                # Get school details\n                cursor.execute(\n                    \"SELECT school_name, logourl FROM schools WHERE school_id = %s\",\n                    [school_id]\n                )\n                school_data = cursor.fetchone()\n\n                if school_data:\n                    admin_info['school_name'] = school_data[0]\n                    admin_info['school_logo'] = school_data[1]\n\n                return Response({\n                    'message': 'Login successful',\n                    'admin': admin_info\n                }, status=status.HTTP_200_OK)\n            else:\n                return Response(\n                    {'error': 'Invalid credentials'}, \n                    status=status.HTTP_401_UNAUTHORIZED\n                )\n\n    except Exception as e:\n        print(f\"Login error: {e}\")\n        return Response(\n            {'error': 'Login failed'}, \n            status=status.HTTP_500_INTERNAL_SERVER_ERROR\n        )","size_bytes":3904},"backend/existing_modules/arrangement_logic.py":{"content":"import pandas as pd\r\nfrom datetime import date\r\nimport traceback\r\nimport re\r\nfrom utils import get_ist_today\r\nfrom datetime import date, timedelta\r\n\r\nclass ArrangementLogic:\r\n    \"\"\"\r\n    Railway-optimized arrangement logic for teacher replacement system.\r\n    Enhanced with comprehensive subject mapping, intelligent category-based matching,\r\n    and robust workload balancing.\r\n    \"\"\"\r\n\r\n    # ... (Poora SUBJECT_MAPPING_CONFIG, STREAMS, CLASS_LEVELS waise ka waisa hi rahega) ...\r\n    # ... (Ismein koi badlaav nahi hai, isliye yahan dobara paste nahi kar raha) ...\r\n    SUBJECT_MAPPING_CONFIG = {\r\n        \"MATHEMATICS\": [\"MATH\", \"MATHS\", \"MATHEMATICS\", \"APPLIED MATH\", \"APPLIED MATHEMATICS\"],\r\n        \"SCIENCE\": [\"SCIENCE\", \"SCI\", \"PHYSICS\", \"CHEMISTRY\", \"BIOLOGY\"],\r\n        \"PHYSICS\": [\"PHYSICS\", \"PHY\", \"SCIENCE\"],\r\n        \"CHEMISTRY\": [\"CHEMISTRY\", \"CHEM\", \"SCIENCE\"],\r\n        \"BIOLOGY\": [\"BIOLOGY\", \"BIO\", \"SCIENCE\"],\r\n        \"SST\": [\"SST\", \"S.ST\", \"SOCIAL STUDIES\", \"SOCIAL SCIENCE\", \"HISTORY\", \"GEOGRAPHY\", \"POLITICAL SCIENCE\", \"ECONOMICS\", \"CIVICS\"],\r\n        \"HISTORY\": [\"HISTORY\", \"HIST\", \"SST\", \"SOCIAL STUDIES\"],\r\n        \"GEOGRAPHY\": [\"GEOGRAPHY\", \"GEO\", \"SST\", \"SOCIAL STUDIES\"],\r\n        \"POLITICAL SCIENCE\": [\"POLITICAL SCIENCE\", \"POL.SC\", \"CIVICS\", \"SST\"],\r\n        \"ECONOMICS\": [\"ECONOMICS\", \"ECO\", \"SST\",],\r\n        \"CIVICS\": [\"CIVICS\", \"POLITICAL SCIENCE\", \"SST\"],\r\n        \"COMPUTER SCIENCE\": [\"COMPUTER SCIENCE\", \"CS\", \"COMPUTER\", \"COMPUTERS\", \"IT\", \"ICT\", \"AI\", \"ARTIFICIAL INTELLIGENCE\"],\r\n        \"IT\": [\"IT\", \"INFORMATION TECHNOLOGY\", \"COMPUTER\", \"CS\"],\r\n        \"AI\": [\"AI\", \"A.I.\", \"ARTIFICIAL INTELLIGENCE\", \"COMPUTER\", \"IT\"], \r\n        \"HINDI\": [\"HINDI\", \"SANSKRIT\"],\r\n        \"EVS\": [\"EVS\", \"ENVIRONMENTAL SCIENCE\", \"ENVIRONMENTAL STUDIES\"],\r\n        \"SANSKRIT\": [\"SANSKRIT\", \"SKT\", \"HINDI\"],\r\n        \"ENGLISH\": [\"ENGLISH\", \"ENG\"],\r\n        \"BUSINESS STUDIES\": [\"BUSINESS STUDIES\", \"BST\", \"BUSINESS\",],\r\n        \"BST\": [\"BST\", \"BUSINESS STUDIES\", \"BUSINESS\",],\r\n        \"ACCOUNTANCY\": [\"ACCOUNTANCY\", \"ACCOUNTS\", \"ACCOUNTING\"],\r\n        \"ACCOUNTS\": [\"ACCOUNTS\", \"ACCOUNTANCY\", \"ACCOUNTING\"],\r\n        \"PHYSICAL EDUCATION\": [\"PE\", \"PHYSICAL\", \"PHE\", \"GAME\", \"SPORTS\"],\r\n        \"ART\": [\"ART\", \"ARTS\", \"DRAWING\", \"PAINTING\"],\r\n        \"MUSIC\": [\"MUSIC\", \"SINGING\", \"VOCAL\"],\r\n        \"GK\": [\"GK\", \"GENERAL KNOWLEDGE\"],\r\n        \"MORAL SCIENCE\": [\"MORAL SCIENCE\", \"MORAL ED\", \"VALUE EDUCATION\", \"VALUES\"],\r\n        \"URDU\": [\"URDU\"],\r\n        \"SOCIOLOGY\": [\"SOCIOLOGY\"],\r\n        \"PSYCHOLOGY\": [\"PSYCHOLOGY\"]\r\n    }\r\n\r\n    STREAMS = {\r\n        \"SCIENCE\": [\"PHYSICS\", \"CHEMISTRY\", \"BIOLOGY\", \"ENGLISH\",],\r\n        \"COMMERCE\": [\"BUSINESS STUDIES\", \"BST\", \"ACCOUNTANCY\", \"ACCOUNTS\", \"ECONOMICS\", \"ENGLISH\"],\r\n        \"ARTS\": [\"HISTORY\", \"GEOGRAPHY\", \"POLITICAL SCIENCE\", \"ECONOMICS\", \"ENGLISH\",],\r\n        \"HUMANITIES\": [\"HISTORY\", \"GEOGRAPHY\", \"POLITICAL SCIENCE\", \"ECONOMICS\", \"ENGLISH\"],\r\n        \"SOCIOLOGY\": [\"SOCIOLOGY\"], \r\n        \"PSYCHOLOGY\": [\"PSYCHOLOGY\"]\r\n    }\r\n\r\n    CLASS_LEVELS = {\r\n        \"PRIMARY\": [\"I\", \"II\", \"III\", \"IV\", \"V\",\"VI\" \"1\", \"2\", \"3\", \"4\", \"5\",\"6\"],\r\n        \"MIDDLE\": [\"VI\", \"VII\", \"VIII\", \"6\", \"7\", \"8\"],\r\n        \"SECONDARY\": [\"IX\", \"X\", \"9\", \"10\"],\r\n        \"SENIOR_SECONDARY\": [\"XI\", \"XII\", \"11\", \"12\"]\r\n    }\r\n\r\n\r\n    def __init__(self, data_manager_instance):\r\n        \"\"\"Initialize with DataManager instance for database operations\"\"\"\r\n        self.data_manager = data_manager_instance\r\n        all_variations = []\r\n        for variations in self.SUBJECT_MAPPING_CONFIG.values():\r\n            all_variations.extend(variations)\r\n        self.sorted_subject_variations = sorted(list(set(all_variations)), key=len, reverse=True)\r\n        print(\"--- ArrangementLogic Initialized (Workload Optimized) ---\")\r\n\r\n    # ... (_get_standardized_subject, _extract_subject_from_class_info, _extract_class_level, _get_stream_for_subject, _can_teach functions waise hi rahenge) ...\r\n    # ... (Inmein koi badlaav nahi hai) ...\r\n    def _get_standardized_subject(self, subject_str):\r\n     \"\"\"Standardize subject using comprehensive mapping\"\"\"\r\n     if not subject_str or not isinstance(subject_str, str):\r\n        return None\r\n    \r\n     s_upper = subject_str.upper().strip()\r\n    \r\n    # Check variations to find the standard key\r\n     for std_subject, variations in self.SUBJECT_MAPPING_CONFIG.items():\r\n        # Ensure variations are also checked in uppercase\r\n        if s_upper in [v.upper() for v in variations]:\r\n            return std_subject\r\n    \r\n    # If no mapping found, return the original subject in uppercase\r\n     return s_upper\r\n    def _extract_subject_from_class_info(self, class_info_str):\r\n        \"\"\"\r\n        ✅✅✅ FINAL FIX: Finds the subject by searching for known variations in the string.\r\n        This is the most reliable method.\r\n        \"\"\"\r\n        if not class_info_str or not isinstance(class_info_str, str):\r\n            return None\r\n        \r\n        class_info_upper = class_info_str.upper().strip()\r\n        \r\n        # self.sorted_subject_variations is created in __init__\r\n        # It's sorted by length, so \"POLITICAL SCIENCE\" is checked before \"SCIENCE\"\r\n        for variation in self.sorted_subject_variations:\r\n            # Use word boundaries (\\b) to ensure we match whole words.\r\n            # This prevents 'ART' from matching inside 'QUARTERLY'.\r\n            # We must escape special characters like '.' in 'A.I.' for regex to work.\r\n            pattern = r'\\b' + re.escape(variation.upper()) + r'\\b'\r\n            \r\n            # For variations with dots like A.I., the \\b might fail. Add an alternative check.\r\n            is_found = False\r\n            if re.search(pattern, class_info_upper):\r\n                is_found = True\r\n            elif variation.find('.') != -1: # If variation has dots (e.g., A.I.)\r\n                # Also check without word boundaries, but surrounded by spaces or at ends\r\n                pattern_no_boundary = r'(^|\\s)' + re.escape(variation.upper()) + r'(\\s|$)'\r\n                if re.search(pattern_no_boundary, class_info_upper):\r\n                    is_found = True\r\n\r\n            if is_found:\r\n                # If a known variation is found, return its standardized form.\r\n                # For example, if 'BST' is found, this returns 'BUSINESS STUDIES'.\r\n                return self._get_standardized_subject(variation)\r\n        \r\n        # If no known subject is found after checking all variations, return None.\r\n        print(f\"WARN: Could not extract a known subject from '{class_info_str}'\")\r\n        return None\r\n\r\n\r\n    def _extract_class_level(self, class_info_str):\r\n        \"\"\"✅ FIXED: Extract class level from class info (Regex now includes 'X')\"\"\"\r\n        if not class_info_str or not isinstance(class_info_str, str):\r\n            return None\r\n        \r\n        class_upper = class_info_str.upper().strip()\r\n        \r\n        # ✅ FIXED REGEX\r\n        match = re.search(r'\\b(XI|XII|X|IX|IV|V?I{0,3}|[1-9]|1[0-2])\\b', class_upper)\r\n        if not match:\r\n            return None\r\n        \r\n        class_val = match.group(1)\r\n        \r\n        # Find level\r\n        for level, classes in self.CLASS_LEVELS.items():\r\n            if class_val in classes:\r\n                return level\r\n        \r\n        return None\r\n\r\n    def _get_stream_for_subject(self, subject):\r\n        \"\"\"Get stream for a subject\"\"\"\r\n        if not subject:\r\n            return None\r\n        \r\n        std_subject = self._get_standardized_subject(subject)\r\n        \r\n        for stream, subjects in self.STREAMS.items():\r\n            std_stream_subjects = [self._get_standardized_subject(s) for s in subjects]\r\n            if std_subject in std_stream_subjects:\r\n                return stream\r\n        \r\n        return None\r\n\r\n    def _can_teach(self, candidate_subjects_str, target_subjects_list):\r\n     \"\"\"\r\n     Checks if a candidate can teach ANY of the subjects from the target list.\r\n     target_subjects_list: Can be a single subject string or a list of subject strings.\r\n     \"\"\"\r\n    # If there's no specific subject requirement, any teacher can \"teach\" it.\r\n     if not target_subjects_list:\r\n        return True\r\n    \r\n    # If the candidate has no subjects listed, they can't teach anything specific.\r\n     if not candidate_subjects_str or not isinstance(candidate_subjects_str, str):\r\n        return False\r\n\r\n    # Ensure target_subjects is always a list for consistent processing\r\n     if isinstance(target_subjects_list, str):\r\n        target_subjects_list = [target_subjects_list]\r\n\r\n    # Standardize all target subjects from the input list\r\n     std_target_subjects = {self._get_standardized_subject(s) for s in target_subjects_list if s}\r\n     if not std_target_subjects: # If list was empty or contained only invalid subjects\r\n        return True \r\n\r\n    # Get all subjects the candidate teaches\r\n     candidate_subjects_list = [s.strip() for s in candidate_subjects_str.split(',') if s.strip()]\r\n     if not candidate_subjects_list:\r\n        return False\r\n    \r\n    # Standardize all candidate subjects\r\n     std_candidate_subjects = {self._get_standardized_subject(s) for s in candidate_subjects_list if s}\r\n\r\n    # The core logic: Check if there is any intersection between the two sets of subjects.\r\n    # This is the most efficient way to see if ANY candidate subject matches ANY target subject.\r\n     if not std_candidate_subjects.isdisjoint(std_target_subjects):\r\n        return True\r\n\r\n    # Additionally, check for broader mappings (e.g., candidate teaches PHYSICS, target is SCIENCE)\r\n     for cand_subj in std_candidate_subjects:\r\n        for target_subj in std_target_subjects:\r\n            # Check if candidate's subject is a variation of the target subject\r\n            if cand_subj in [v.upper() for v in self.SUBJECT_MAPPING_CONFIG.get(target_subj, [])]:\r\n                return True\r\n            # Check if target's subject is a variation of the candidate's subject\r\n            if target_subj in [v.upper() for v in self.SUBJECT_MAPPING_CONFIG.get(cand_subj, [])]:\r\n                return True\r\n\r\n     return False\r\n\r\n    # ⭐️⭐️⭐️ ASLI BADLAAV IS FUNCTION MEIN HAI ⭐️⭐️⭐️\r\n    def _find_candidates(self, candidates_df, search_criteria, daily_workload_map, historical_workload_map):\r\n        \"\"\"\r\n        Finds the best candidate with two-level workload balancing.\r\n        1. Filters candidates by category/subject.\r\n        2. Sorts the qualified pool by:\r\n           - First by DAILY workload (less is better).\r\n           - Then by HISTORICAL workload (less is better) as a tie-breaker.\r\n        \"\"\"\r\n        if candidates_df.empty:\r\n            return None\r\n\r\n        # Step 1 & 2: Filter by Category and Subject (No change here)\r\n        filtered_candidates = candidates_df.copy()\r\n        category_to_find = search_criteria.get('category')\r\n        if category_to_find:\r\n            filtered_candidates = filtered_candidates[\r\n                filtered_candidates['category'].astype(str).str.replace('.', '', regex=False).str.strip().str.upper() == category_to_find.upper()\r\n            ]\r\n        if filtered_candidates.empty: return None\r\n\r\n        subjects_to_match = search_criteria.get('subject')\r\n        if subjects_to_match:\r\n            qualified_indices = [idx for idx, row in filtered_candidates.iterrows() if self._can_teach(row.get('subject', ''), subjects_to_match)]\r\n            if not qualified_indices: return None\r\n            filtered_candidates = filtered_candidates.loc[qualified_indices]\r\n        if filtered_candidates.empty: return None\r\n\r\n        # Step 3: Filter by Teaching Class (No change here)\r\n        candidate_class_req = search_criteria.get('candidate_teaches_class')\r\n        if candidate_class_req:\r\n            class_columns = [f'period{i}' for i in range(1, 8)]\r\n            qualified_indices_by_class = [\r\n                idx for idx, row in filtered_candidates.iterrows()\r\n                if any(match.group(1) in candidate_class_req for col in class_columns if (match := re.search(r'\\b(XI|XII|X|IX|IV|V?I{0,3}|[1-9]|1[0-2])\\b', str(row.get(col, '')).upper())))\r\n            ]\r\n            if not qualified_indices_by_class: return None\r\n            filtered_candidates = filtered_candidates.loc[qualified_indices_by_class]\r\n        if filtered_candidates.empty: return None\r\n\r\n        # ⭐️⭐️⭐️ YAHAN HAI ASLI WORKLOAD LOGIC ⭐️⭐️⭐️\r\n        # Step 4: Add BOTH workload columns to the filtered candidates\r\n        filtered_candidates['daily_workload'] = filtered_candidates['teacher_id'].astype(str).str.upper().map(daily_workload_map).fillna(0).astype(int)\r\n        filtered_candidates['historical_workload'] = filtered_candidates['teacher_id'].astype(str).str.upper().map(historical_workload_map).fillna(0).astype(int)\r\n\r\n        # Step 5: Sort by Daily workload first, then Historical workload\r\n        sorted_candidates = filtered_candidates.sort_values(\r\n            by=['daily_workload', 'historical_workload', 'name'],\r\n            ascending=[True, True, True]\r\n        )\r\n\r\n        print(f\"DEBUG: Found {len(sorted_candidates)} qualified candidates. Picking best by workload.\")\r\n        # print(sorted_candidates[['name', 'daily_workload', 'historical_workload']].to_string()) # Uncomment for deep debugging\r\n\r\n        # Step 6: Return the best candidate (sabse upar wala)\r\n        return sorted_candidates.iloc[0].to_dict()\r\n\r\n\r\n\r\n# arrangement_logic.py ke andar is naye function ko paste karein\r\n\r\n    def find_replacement_teacher(self, school_id, absent_teacher_id, period, schedules_df, all_absent_today, assigned_in_this_period):\r\n        \"\"\"\r\n        Advanced replacement logic v4. Uses a dynamically updated list of teachers busy in the current period.\r\n        \"\"\"\r\n        print(f\"\\n--- ADVANCED REPLACEMENT LOGIC v4: School={school_id}, Absent={absent_teacher_id}, Period={period} ---\")\r\n        try:\r\n            absent_row = schedules_df[schedules_df['teacher_id'].astype(str).str.upper() == str(absent_teacher_id).upper()]\r\n            if absent_row.empty:\r\n                user_detail = self.data_manager.get_user_details_by_teacher_id(school_id, absent_teacher_id)\r\n                absent_name = user_detail.get(\"name\", \"Unknown\") if user_detail else \"Unknown\"\r\n                return None, None, None, absent_name, \"Teacher Not in Schedule\"\r\n\r\n            absent_details = absent_row.iloc[0]\r\n            absent_name = str(absent_details.get('name', 'Unknown'))\r\n            period_col = f'period{period}'\r\n            \r\n            # --- ✅ FINAL EXCLUSION LOGIC ---\r\n            # Final exclusion list = Aaj ke sabhi absent teachers + jo is period mein pehle se busy hain\r\n            exclusion_list = list(set(all_absent_today + assigned_in_this_period))\r\n            exclusion_list_upper = [str(tid).upper() for tid in exclusion_list if tid]\r\n\r\n            free_teachers_df = schedules_df[\r\n                (schedules_df[period_col].fillna('FREE').astype(str).str.upper() == 'FREE') &\r\n                (~schedules_df['teacher_id'].astype(str).str.upper().isin(exclusion_list_upper))\r\n            ].copy()\r\n\r\n            if free_teachers_df.empty:\r\n                print(f\"INFO: No free and un-assigned teachers available for Period {period}.\")\r\n                return None, None, None, absent_name, \"No Free Teachers\"\r\n\r\n            # --- Baaki ka logic (workload, search pipeline) ab is 'free_teachers_df' par chalega ---\r\n            period_cols = [f'period{i}' for i in range(1, 8)]\r\n            daily_workload_map = {str(row['teacher_id']).upper(): sum(1 for col in period_cols if str(row.get(col, '')).strip().upper() not in ['FREE', 'NAN', '']) for _, row in schedules_df.iterrows()}\r\n            candidate_ids = free_teachers_df['teacher_id'].astype(str).tolist()\r\n            historical_workloads_data = self.data_manager.get_multiple_teachers_workload(school_id, candidate_ids)\r\n            historical_workload_map = {str(item[\"teacher_id\"]).upper(): item.get(\"workload_count\", 0) for item in historical_workloads_data}\r\n            \r\n            # --- Aapka poora, detailed search pipeline (bilkul a_sahi hai) ---\r\n            raw_category = str(absent_details.get('category', ''))\r\n            absent_category = raw_category.replace('.', '',).strip().upper()\r\n            class_info = absent_details.get(period_col, 'FREE')\r\n            search_subject = self._extract_subject_from_class_info(class_info)\r\n            class_level = self._extract_class_level(class_info)\r\n            class_val_match = re.search(r'\\b(XI|XII|X|IX|IV|V?I{0,3}|[1-9]|1[0-2])\\b', class_info.upper())\r\n            class_val = class_val_match.group(1) if class_val_match else None\r\n            search_pipeline = []\r\n            custom_rules = self.data_manager.get_arrangement_rules(school_id)\r\n\r\n            search_pipeline = []\r\n\r\n            # 2. Agar custom rules mile, to unka istemal karo\r\n            if custom_rules:\r\n                print(f\"INFO: Found {len(custom_rules)} custom rules for {school_id}. Using DATABASE LOGIC.\")\r\n                \r\n                absent_category = str(absent_details.get('category', '')).replace('.', '').strip().upper()\r\n                class_info = absent_details.get(period_col, 'FREE')\r\n                search_subject = self._extract_subject_from_class_info(class_info)\r\n\r\n                for rule in custom_rules:\r\n                    criteria = rule.get('criteria', {})\r\n                    if absent_category in criteria.get('absent_category', []):\r\n                        search_criteria = {'quality': rule['rule_name']}\r\n                        search_criteria['category'] = criteria.get('candidate_category')\r\n                        if criteria.get('subject_match') == 'exact':\r\n                            search_criteria['subject'] = search_subject\r\n                        else:\r\n                            search_criteria['subject'] = None\r\n                        search_pipeline.append(search_criteria)\r\n            \r\n            # 3. Agar koi custom rule nahi mila, to apne default logic ka istemal karo\r\n            else:\r\n                print(f\"INFO: No custom rules for {school_id}. Using DEFAULT BUILT-IN LOGIC.\")\r\n                \r\n                # --- YAHAN AAPKA POORA PURANA, POWERFUL LOGIC AAYEGA ---\r\n                raw_category = str(absent_details.get('category', ''))\r\n                absent_category = raw_category.replace('.', '').strip().upper()\r\n                class_info = absent_details.get(period_col, 'FREE')\r\n                search_subject = self._extract_subject_from_class_info(class_info)\r\n                class_level = self._extract_class_level(class_info)\r\n                class_val_match = re.search(r'\\b(XI|XII|X|IX|IV|V?I{0,3}|[1-9]|1[0-2])\\b', class_info.upper())\r\n                class_val = class_val_match.group(1) if class_val_match else None\r\n                \r\n            # ... (Poora TGT, PGT, PRT ka search_pipeline waise hi rahega) ...\r\n            if absent_category == 'PRT':\r\n                search_pipeline = [\r\n                    {'quality': 'Ideal - Same Category, Same Subject', 'category': 'PRT', 'subject': search_subject}\r\n                ]\r\n                if class_level == 'PRIMARY':\r\n                    search_pipeline.append(\r\n                        {'quality': 'Good - TGT (Class 6-8) for Adjacent Class', 'category': 'TGT', 'subject': search_subject, 'condition': class_val in ['V','VI','5','6'], 'candidate_teaches_class': ['VI', 'VII', 'VIII', '6', '7', '8']}\r\n                    )\r\n                elif class_level == 'MIDDLE':\r\n                    search_pipeline.append(\r\n                        {'quality': 'Good - TGT with Same Subject for Middle Class', 'category': 'TGT', 'subject': search_subject}\r\n                    )\r\n                search_pipeline.append(\r\n                    {'quality': 'Acceptable - Same Category, Any Subject', 'category': 'PRT', 'subject': None}\r\n                )\r\n\r\n# --- TGT LOGIC (FINAL VERSION - YOUR LOGIC + MY FIX) ---\r\n            elif absent_category == 'TGT':\r\n                search_pipeline = []\r\n                std_subject = self._get_standardized_subject(search_subject)\r\n\r\n                # --- Condition 1: Agar absent teacher 9th ya 10th class mein hai ---\r\n                if class_val in ['IX', 'X', '9', '10']:\r\n                    print(\"INFO: Applying ADVANCED rules for Secondary Classes (IX, X)\")\r\n                    \r\n                    # Priority 1: Sabse pehle, TGT dhoondho jo 9-10 padhata ho aur subject bhi same ho.\r\n                    search_pipeline.append({\r\n                        'quality': 'Ideal - TGT (Teaches 9-10), Same Subject', \r\n                        'category': 'TGT', \r\n                        'subject': search_subject,\r\n                        'candidate_teaches_class': ['IX', 'X', '9', '10'] # YEH FIX ZAROORI HAI\r\n                    })\r\n                    \r\n                    # Priority 1.5: Aapka specific subject logic (Hindi/CS)\r\n                    if std_subject == 'HINDI':\r\n                        search_pipeline.append({\r\n                            'quality': 'Good - TGT (Teaches 9-10), Related (Sanskrit)', \r\n                            'category': 'TGT', \r\n                            'subject': 'SANSKRIT',\r\n                            'candidate_teaches_class': ['IX', 'X', '9', '10'] # Yahan bhi filter zaroori hai\r\n                        })\r\n                    elif std_subject == 'COMPUTER SCIENCE':\r\n                        search_pipeline.append({\r\n                            'quality': 'Good - TGT (Teaches 9-10), Related (IT/AI)', \r\n                            'category': 'TGT', \r\n                            'subject': ['IT', 'AI'],\r\n                            'candidate_teaches_class': ['IX', 'X', '9', '10'] # Yahan bhi filter zaroori hai\r\n                        })\r\n\r\n                    # Priority 2: PGT dhoondho jiska subject same ho.\r\n                    search_pipeline.append({\r\n                        'quality': 'Very Good - PGT, Same Subject', \r\n                        'category': 'PGT', \r\n                        'subject': search_subject\r\n                    })\r\n                    \r\n                    # Priority 2.5: Aapka PGT related subject logic\r\n                    related_subjects_pgt = []\r\n                    if std_subject in ['SCIENCE', 'PHYSICS', 'CHEMISTRY', 'BIOLOGY']:\r\n                        related_subjects_pgt = [s for s in ['PHYSICS', 'CHEMISTRY', 'BIOLOGY'] if s != std_subject]\r\n                    elif std_subject in ['SST', 'HISTORY', 'GEOGRAPHY', 'POLITICAL SCIENCE', 'ECONOMICS', 'CIVICS']:\r\n                        related_subjects_pgt = [s for s in ['HISTORY', 'GEOGRAPHY', 'POLITICAL SCIENCE', 'ECONOMICS', 'CIVICS'] if s != std_subject]\r\n                    \r\n                    if related_subjects_pgt:\r\n                        search_pipeline.append({\r\n                            'quality': 'Acceptable - PGT, Related Subject', \r\n                            'category': 'PGT', \r\n                            'subject': related_subjects_pgt\r\n                        })\r\n\r\n                    # Priority 3: Koi bhi TGT dhoondho jo 9-10 padhata ho (subject koi bhi ho).\r\n                    search_pipeline.append({\r\n                        'quality': 'Suboptimal - TGT (Teaches 9-10), Any Subject', \r\n                        'category': 'TGT', \r\n                        'subject': None,\r\n                        'candidate_teaches_class': ['IX', 'X', '9', '10'] # YEH FIX ZAROORI HAI\r\n                    })\r\n                    \r\n                    # Priority 4 (Last Resort): Koi bhi PGT laga do.\r\n                    search_pipeline.append({\r\n                        'quality': 'Fallback - Any PGT', \r\n                        'category': 'PGT', \r\n                        'subject': None\r\n                    })\r\n\r\n                # --- Condition 2: Agar absent teacher 6th, 7th, ya 8th class mein hai ---\r\n                # (Aapka original logic bilkul sahi tha iske liye)\r\n                elif class_val in ['VI', 'VII', 'VIII', '6', '7', '8']:\r\n                    print(\"INFO: Applying rules for Middle Classes (VI, VII, VIII)\")\r\n                    search_pipeline.extend([\r\n                        {'quality': 'Ideal - TGT, Same Subject', 'category': 'TGT', 'subject': search_subject},\r\n                        {'quality': 'Good - PGT, Same Subject', 'category': 'PGT', 'subject': search_subject},\r\n                        {'quality': 'Acceptable - Any TGT', 'category': 'TGT', 'subject': None},\r\n                        {'quality': 'Fallback - Any PGT', 'category': 'PGT', 'subject': None}\r\n                    ])\r\n\r\n                # --- Condition 3: Agar TGT teacher Primary section mein padha raha hai ---\r\n                # (Aapka original logic bilkul sahi tha iske liye)\r\n                elif class_val in ['IV', 'V', '4', '5']:\r\n                     print(\"INFO: Applying rules for TGT in Primary Classes (IV, V)\")\r\n                     search_pipeline.extend([\r\n                        {'quality': 'Ideal - TGT, Same Subject', 'category': 'TGT', 'subject': search_subject},\r\n                        {'quality': 'Good - PRT, Same Subject', 'category': 'PRT', 'subject': search_subject},\r\n                        {'quality': 'Acceptable - Any TGT', 'category': 'TGT', 'subject': None},\r\n                        {'quality': 'Fallback - Any PRT', 'category': 'PRT', 'subject': None}\r\n                    ])\r\n                \r\n                # --- Default Fallback (Agar class inmein se koi nahi hai) ---\r\n                else:\r\n                    print(\"INFO: Applying default fallback rules for TGT.\")\r\n                    search_pipeline.append(\r\n                        {'quality': 'Fallback - Any TGT', 'category': 'TGT', 'subject': None}\r\n                    )\r\n            elif absent_category == 'PGT':\r\n                search_pipeline = []\r\n                std_subject = self._get_standardized_subject(search_subject)\r\n\r\n                # Step 1: Ideal Match - Hamesha sabse pehle\r\n                search_pipeline.append(\r\n                    {'quality': 'Ideal - PGT with Same Subject', 'category': 'PGT', 'subject': search_subject}\r\n                )\r\n\r\n                # Step 2: Very Good Match - TGT for Same Subject (Aapki PGT -> TGT wali problem solve karega)\r\n                # Yeh niyam ab har PGT ke liye check hoga.\r\n                search_pipeline.append(\r\n                    {'quality': 'Very Good - TGT with Same Subject', 'category': 'TGT', 'subject': search_subject}\r\n                )\r\n\r\n                # Step 3: Detailed Rules based on Class Level and Stream\r\n                if class_level == 'SENIOR_SECONDARY': # Classes 11, 12\r\n                    stream = self._get_stream_for_subject(search_subject)\r\n                    # Stream-based logic\r\n                    if stream == 'COMMERCE':\r\n                        search_pipeline.append({'quality': 'Good - PGT from Same Stream (Commerce)', 'category': 'PGT', 'subject': self.STREAMS.get(\"COMMERCE\", [])})\r\n                    elif stream == 'SCIENCE':\r\n                        search_pipeline.append({'quality': 'Good - PGT from Same Stream (Science)', 'category': 'PGT', 'subject': self.STREAMS.get(\"SCIENCE\", [])})\r\n                    elif stream in ['ARTS', 'HUMANITIES']:\r\n                         search_pipeline.append({'quality': 'Good - PGT from Same Stream (Arts)', 'category': 'PGT', 'subject': self.STREAMS.get(\"ARTS\", [])})\r\n                    \r\n                    # Subject-specific cross-category logic\r\n                    if std_subject == 'ENGLISH':\r\n                        search_pipeline.append({'quality': 'Acceptable - TGT (9/10) for English', 'category': 'TGT', 'subject': 'ENGLISH', 'candidate_teaches_class': ['IX', 'X', '9', '10']})\r\n                    elif std_subject == 'COMPUTER SCIENCE':\r\n                        search_pipeline.append({'quality': 'Acceptable - TGT (9/10) for CS/IT/AI', 'category': 'TGT', 'subject': ['COMPUTER SCIENCE', 'IT', 'AI'], 'candidate_teaches_class': ['IX', 'X', '9', '10']})\r\n\r\n                elif class_level == 'SECONDARY': # Classes 9, 10\r\n                    # Related subjects logic for PGTs\r\n                    related_subjects_pgt = []\r\n                    if std_subject in ['SCIENCE', 'PHYSICS', 'CHEMISTRY', 'BIOLOGY']:\r\n                        related_subjects_pgt = [s for s in ['PHYSICS', 'CHEMISTRY', 'BIOLOGY'] if s != std_subject]\r\n                    elif std_subject in ['SST', 'HISTORY', 'GEOGRAPHY', 'POLITICAL SCIENCE', 'ECONOMICS', 'CIVICS']:\r\n                        related_subjects_pgt = [s for s in ['HISTORY', 'GEOGRAPHY', 'POLITICAL SCIENCE', 'ECONOMICS', 'CIVICS'] if s != std_subject]\r\n                    elif std_subject == 'MATHEMATICS':\r\n                        related_subjects_pgt = ['APPLIED MATHEMATICS']\r\n                    \r\n                    if related_subjects_pgt:\r\n                        search_pipeline.append({'quality': 'Acceptable - PGT with Related Subject', 'category': 'PGT', 'subject': related_subjects_pgt})\r\n                    \r\n                    # Related subjects for TGTs\r\n                    if std_subject == 'HINDI':\r\n                        search_pipeline.append({'quality': 'Acceptable - TGT with Sanskrit', 'category': 'TGT', 'subject': 'SANSKRIT'})\r\n                \r\n                # Step 4: UNIVERSAL FALLBACK - YEH AB HAMESHA CHALEGA\r\n                # Yeh niyam ab sabse aakhir mein, bina kisi if/else ke, add hoga.\r\n                # Isse \"UNASSIGNED\" wali problem 100% khatm ho jayegi.\r\n                search_pipeline.append(\r\n                    {'quality': 'Fallback - Any free PGT teacher', 'category': 'PGT', 'subject': None}\r\n                )\r\n\r\n            # --- SEARCH EXECUTION LOOP (Ismein koi badlaav nahi) ---\r\n            for criteria in search_pipeline:\r\n                if 'condition' in criteria and not criteria['condition']:\r\n                    continue\r\n                \r\n                print(f\"DEBUG: Searching with criteria: {criteria['quality']}\")\r\n                \r\n                best_candidate_dict = self._find_candidates(free_teachers_df, criteria, daily_workload_map, historical_workload_map)\r\n                if best_candidate_dict:\r\n                    replacement_id = str(best_candidate_dict.get(\"teacher_id\", \"\")).strip()\r\n                    replacement_category = str(best_candidate_dict.get(\"category\", \"\")).replace('.', '').strip().upper()\r\n                    replacement_name = str(best_candidate_dict.get(\"name\", \"\")).strip()\r\n                    quality = criteria['quality']\r\n                    \r\n                    self.data_manager.update_teacher_workload(school_id, replacement_id)\r\n                    return replacement_id, replacement_category, replacement_name, absent_name, quality\r\n            \r\n            # Agar poori pipeline ke baad bhi koi nahi mila (ab iske chances bohot kam hain)\r\n            return None, None, None, absent_name, \"No Suitable Replacement\"\r\n        except Exception as e:\r\n            print(f\"CRITICAL ERROR in find_replacement_teacher: {e}\")\r\n            traceback.print_exc()\r\n            return None, None, None, \"Unknown\", \"Error Occurred\"","size_bytes":31162},"backend/existing_modules/auth.py":{"content":"\nimport streamlit as st\nfrom datetime import date\nimport bcrypt\nfrom mysql.connector import Error\nimport data_manager\n\ndef validate_domain_access(school_id, current_domain):\n    \"\"\"\n    Check karta hai ki given school_id wala admin us domain se login kar sakta hai ya nahi\n    \"\"\"\n    if not current_domain or not school_id:\n        return True  # Local development ke liye fallback\n    \n    # Database se school ka domain check karein\n    connection = data_manager.create_db_connection()\n    if connection:\n        try:\n            query = \"SELECT domin FROM schools WHERE school_id = %s\"\n            result = data_manager.read_query(connection, query, (school_id,))\n            connection.close()\n            \n            if result and result[0]['domin'] == current_domain:\n                print(f\"DEBUG: Domain access validated for {school_id} on {current_domain}\")\n                return True\n            else:\n                print(f\"WARNING: Domain access denied for {school_id} on {current_domain}\")\n                return False\n        except Exception as e:\n            print(f\"ERROR: Error validating domain access: {e}\")\n            return False\n    return False\n\ndef check_password(username, entered_plain_password, school_id):\n    dm_instance = st.session_state.get(\"data_manager\")\n    if dm_instance is None:\n        st.error(\"System error: Database manager not initialized.\")\n        return None\n\n    # Domain validation - Check if user is accessing from correct domain\n    current_domain = st.session_state.get('current_domain')\n    if current_domain and not validate_domain_access(school_id, current_domain):\n        print(f\"ERROR auth.py: Domain access denied for school {school_id} on domain {current_domain}\")\n        return {'error': 'Access denied: You can only login from your school\\'s official domain.'}\n\n    try:\n        user_data_from_db = dm_instance.get_user_details(school_id, username)\n\n        if user_data_from_db:\n            hashed_password_str_from_db = user_data_from_db.get(\"password\")\n\n            if not hashed_password_str_from_db:\n                return None\n\n            entered_password_bytes = entered_plain_password.encode(\"utf-8\")\n            hashed_password_bytes_from_db = hashed_password_str_from_db.encode(\"utf-8\")\n\n            if bcrypt.checkpw(entered_password_bytes, hashed_password_bytes_from_db):\n                # Password sahi hai! Ab subscription check karo.\n                print(f\"INFO auth.py: Password MATCHED for user '{username}'. Checking subscription...\")\n                \n                # Naya Subscription Check Logic\n                subscription_status = check_subscription_status(school_id)\n                \n                if subscription_status['is_valid']:\n                    print(f\"INFO auth.py: Subscription valid for school '{school_id}'. Login successful.\")\n                    return user_data_from_db  # Sab a_sahi hai, user data return karo\n                else:\n                    # Password sahi hai, lekin subscription mein dikkat hai\n                    print(f\"ERROR auth.py: Subscription invalid for school '{school_id}'. Reason: {subscription_status['message']}\")\n                    return {'error': subscription_status['message']} # Error message return karo\n            else:\n                return None  # Galat password\n        else:\n            return None  # User nahi mila\n            \n    except Exception as e_auth_main:\n        print(f\"CRITICAL ERROR auth.py: {e_auth_main}\")\n        import traceback\n        traceback.print_exc()\n        st.error(\"An unexpected error occurred during login.\")\n        return None\n\ndef check_subscription_status(school_id):\n    \"\"\"Check karta hai ki school ke paas valid subscription hai ya nahi.\"\"\"\n    # Demo school ko hamesha access do\n    if school_id == 'S001':\n        return {'is_valid': True, 'message': 'Access granted for demo school.'}\n        \n    dm_instance = st.session_state.get(\"data_manager\")\n    if not dm_instance:\n        return {'is_valid': False, 'message': 'System error: Cannot verify subscription.'}\n        \n    connection = dm_instance.create_db_connection()\n    if connection:\n        try:\n            with connection.cursor(dictionary=True) as cursor:\n                cursor.execute(\n                    \"SELECT * FROM subscriptions WHERE school_id = %s AND status = 'active' ORDER BY end_date DESC LIMIT 1\",\n                    (school_id,)\n                )\n                subscription = cursor.fetchone()\n            \n            if subscription:\n                if subscription.get('end_date') and subscription.get('end_date') >= date.today():\n                    return {'is_valid': True, 'message': 'Subscription is active.'}\n                else:\n                    return {'is_valid': False, 'message': 'Your subscription has expired. Please renew.'}\n            else:\n                return {'is_valid': False, 'message': 'No active subscription found. Please purchase a plan.'}\n        except Exception as e:\n            print(f\"ERROR checking subscription: {e}\")\n            return {'is_valid': False, 'message': 'Could not verify subscription due to a database error.'}\n        finally:\n            if connection.is_connected():\n                connection.close()\n    \n    # Agar DB connection fail ho, to fallback. False return karna behtar hai.\n    return {'is_valid': False, 'message': 'Could not connect to the server to verify subscription.'}","size_bytes":5427},"backend/existing_modules/auto_marker.py":{"content":"import schedule\nimport time\nfrom mysql.connector import Error\nimport pandas as pd\nimport traceback\nimport threading\nfrom datetime import datetime, date\nimport data_manager\nimport pytz\nimport streamlit as st\nimport os\n\nclass AutoMarker:\n    def __init__(self, school_id, data_manager_instance, ui_update_callback=None):\n        \"\"\"Railway-optimized AutoMarker with timezone handling\"\"\"\n        self.school_id = school_id\n        self.data_manager_instance = data_manager_instance\n        self.running = False\n        self.ui_update_callback = ui_update_callback\n        \n        # ✅ FIXED: Railway timezone handling\n        self.timezone = pytz.timezone('Asia/Kolkata')  # IST for Railway\n        \n        # Load timing settings\n        try:\n            if self.data_manager_instance is None:\n                raise ValueError(\"DataManager instance is None\")\n\n            saved_timing = self.data_manager_instance.get_auto_marking_timing(self.school_id)\n            self._hour = saved_timing.get(\"hour\", 10)\n            self._minute = saved_timing.get(\"minute\", 0)\n            self._enabled = saved_timing.get(\"enabled\", False)\n            \n            print(f\"INFO AutoMarker: Initialized for school {self.school_id} - Time: {self._hour:02d}:{self._minute:02d}, Enabled: {self._enabled}\")\n        except Exception as e:\n            print(f\"ERROR AutoMarker init: {e}\")\n            self._hour = 10\n            self._minute = 0\n            self._enabled = False\n\n    def get_timing(self):\n        return {\"hour\": self._hour, \"minute\": self._minute, \"enabled\": self._enabled}\n\n    def set_timing(self, hour, minute, enabled=True):\n        \"\"\"✅ FIXED: Railway-optimized timing setting with proper timezone\"\"\"\n        print(f\"INFO AutoMarker: Setting timing for school {self.school_id} to {hour:02d}:{minute:02d}, Enabled: {enabled}\")\n        \n        try:\n            if not self.data_manager_instance:\n                print(\"ERROR: DataManager instance missing\")\n                return False\n\n            # Save to database\n            success = self.data_manager_instance.set_auto_marking_timing(\n                self.school_id, hour, minute, enabled\n            )\n            \n            if success:\n                # Update internal state\n                self._hour = hour\n                self._minute = minute\n                self._enabled = enabled\n                \n                # ✅ CRITICAL: Restart scheduler for Railway\n                self.restart_scheduler()\n                print(f\"SUCCESS: Timing saved and scheduler restarted for {self.school_id}\")\n                return True\n            else:\n                print(f\"ERROR: Failed to save timing for {self.school_id}\")\n                return False\n                \n        except Exception as e:\n            print(f\"CRITICAL ERROR setting timing: {e}\")\n            traceback.print_exc()\n            return False\n\n    def mark_absences(self):\n        try:\n            ist_now = datetime.now(self.timezone)\n            today_date = ist_now.date()\n            print(f\"\\n--- ✅ AutoMarker (Batch Process) STARTED for {self.school_id} at {ist_now.strftime('%Y-%m-%d %H:%M:%S %Z')} ---\")\n\n            if today_date.weekday() == 6: # Sunday\n                print(\"INFO: Today is Sunday, skipping auto-marking.\")\n                return\n\n            if not self.data_manager_instance: return\n\n            today_str = str(today_date)\n            if not self.data_manager_instance.get_present_teachers(self.school_id, today_str):\n                print(\"INFO: No teachers present today, assuming holiday.\")\n                return\n\n            marked_teachers_today = set(self.data_manager_instance.get_all_marked_teacher_ids_for_date(self.school_id, today_str))\n            all_teachers = self.data_manager_instance.get_all_teachers(self.school_id)\n            if not all_teachers: return\n\n            teachers_to_mark_absent = [\n                teacher.get(\"teacher_id\") for teacher in all_teachers \n                if teacher.get(\"teacher_id\") and teacher.get(\"teacher_id\") not in marked_teachers_today\n            ]\n\n            if teachers_to_mark_absent:\n                print(f\"INFO: Found {len(teachers_to_mark_absent)} unmarked teachers to process: {teachers_to_mark_absent}\")\n                attendance_updates = [(teacher_id, 'absent') for teacher_id in teachers_to_mark_absent]\n                \n                success_count = self.data_manager_instance.bulk_update_attendance(self.school_id, attendance_updates, is_auto=True)\n                \n                if success_count > 0:\n                    print(f\"INFO: Successfully bulk marked {success_count} teachers as absent.\")\n                    print(f\"INFO: Proceeding to create arrangements for all {success_count} absent teachers.\")\n                    self.data_manager_instance.process_bulk_arrangements(self.school_id, teachers_to_mark_absent, today_date)\n            else:\n                print(\"INFO: All teachers are already marked. No action needed.\")\n\n            print(f\"--- ✅ AutoMarker (Batch Process) COMPLETED for {self.school_id} ---\")\n            if self.ui_update_callback: self.ui_update_callback()\n\n        except Exception as e:\n            print(f\"CRITICAL ERROR in mark_absences (Final Fix): {e}\")\n            traceback.print_exc()\n\n    def schedule_job(self):\n        \"\"\"✅ RAILWAY-OPTIMIZED job scheduling\"\"\"\n        if not self._enabled:\n            print(f\"INFO: Auto-marking disabled for {self.school_id}\")\n            job_tag = f\"automark_{self.school_id}\"\n            schedule.clear(job_tag)\n            return\n\n        job_time = f\"{self._hour:02d}:{self._minute:02d}\"\n        job_tag = f\"automark_{self.school_id}\"\n\n        # Clear existing jobs\n        existing_jobs = schedule.get_jobs(job_tag)\n        if existing_jobs:\n            print(f\"INFO: Clearing {len(existing_jobs)} existing jobs for {job_tag}\")\n            schedule.clear(job_tag)\n\n        # ✅ RAILWAY FIX: Schedule with proper timezone awareness\n        try:\n            schedule.every().day.at(job_time, \"Asia/Kolkata\").do(self.mark_absences).tag(job_tag) # Timezone added\n            print(f\"SUCCESS: Scheduled job {job_tag} at {job_time} IST\")\n            print(f\"INFO: Total scheduled jobs: {len(schedule.get_jobs(job_tag))}\")\n        except Exception as e:\n            print(f\"ERROR scheduling job: {e}\")\n\n    def start(self):\n        \"\"\"✅ RAILWAY-OPTIMIZED startup\"\"\"\n        if not self.running:\n            print(f\"INFO: Starting AutoMarker for school {self.school_id}\")\n            self.running = True\n            \n            # ✅ CRITICAL: Start scheduler thread as daemon for Railway\n            self.scheduler_thread = threading.Thread(\n                target=self._run_scheduler, \n                daemon=True,  # Important for Railway\n                name=f\"AutoMarker-{self.school_id}\"\n            )\n            self.scheduler_thread.start()\n            \n            # Schedule the job\n            self.schedule_job()\n            print(f\"SUCCESS: AutoMarker started for {self.school_id}\")\n        else:\n            print(f\"INFO: AutoMarker already running for {self.school_id}\")\n\n    def stop(self):\n        \"\"\"✅ RAILWAY-OPTIMIZED stop\"\"\"\n        if self.running:\n            print(f\"INFO: Stopping AutoMarker for {self.school_id}\")\n            self.running = False\n            \n            # Clear scheduled jobs\n            job_tag = f\"automark_{self.school_id}\"\n            schedule.clear(job_tag)\n            print(f\"INFO: Cleared jobs for {job_tag}\")\n        else:\n            print(f\"INFO: AutoMarker not running for {self.school_id}\")\n\n    def restart_scheduler(self):\n        \"\"\"✅ CRITICAL: Railway restart fix\"\"\"\n        print(f\"INFO: Restarting scheduler for {self.school_id}\")\n        \n        # Clear old jobs first\n        job_tag = f\"automark_{self.school_id}\"\n        schedule.clear(job_tag)\n        \n        # Re-schedule if enabled\n        if self._enabled and self.running:\n            self.schedule_job()\n            print(f\"SUCCESS: Scheduler restarted for {self.school_id}\")\n        else:\n            print(f\"INFO: Scheduler not restarted - enabled: {self._enabled}, running: {self.running}\")\n\n    def _run_scheduler(self):\n        \"\"\"✅ RAILWAY-OPTIMIZED scheduler loop\"\"\"\n        print(f\"INFO: Scheduler thread started for {self.school_id}\")\n        \n        while self.running:\n            try:\n                # Run pending jobs\n                schedule.run_pending()\n                \n                # ✅ RAILWAY OPTIMIZATION: Longer sleep to reduce CPU usage\n                time.sleep(30)  # Check every 30 seconds instead of 1 second\n                \n            except Exception as e:\n                print(f\"ERROR in scheduler loop: {e}\")\n                time.sleep(60)  # Wait longer on error\n\n        print(f\"INFO: Scheduler thread stopped for {self.school_id}\")\n\n    def get_next_run_time(self):\n        \"\"\"Get next scheduled run time in IST\"\"\"\n        try:\n            job_tag = f\"automark_{self.school_id}\"\n            jobs = schedule.get_jobs(job_tag)\n            if jobs:\n                next_run = jobs[0].next_run\n                if next_run:\n                    # 'schedule' library with timezone returns timezone-aware datetime objects\n                    return next_run.strftime(\"%Y-%m-%d %H:%M:%S %Z\")\n            return \"Not scheduled\"\n        except Exception as e:\n            print(f\"ERROR getting next run time: {e}\")\n            return \"Error\"\n\n    def is_running(self):\n        \"\"\"Check if AutoMarker is active\"\"\"\n        return self.running and self._enabled\n\n    def get_status(self):\n        \"\"\"Get comprehensive AutoMarker status\"\"\"\n        return {\n            \"running\": self.running,\n            \"enabled\": self._enabled,\n            \"scheduled_time\": f\"{self._hour:02d}:{self._minute:02d}\",\n            \"next_run\": self.get_next_run_time(),\n            \"timezone\": \"Asia/Kolkata (IST)\",\n            \"thread_alive\": hasattr(self, 'scheduler_thread') and self.scheduler_thread.is_alive()\n        }\n\n# ✅ RAILWAY DEPLOYMENT HELPER\ndef create_railway_optimized_automarker(school_id, data_manager_instance):\n    \"\"\"Factory function for Railway deployment\"\"\"\n    try:\n        automarker = AutoMarker(school_id, data_manager_instance)\n        \n        # Auto-start for Railway\n        if os.getenv(\"RAILWAY_ENVIRONMENT\") or os.getenv(\"IS_RAILWAY\", \"false\").lower() == \"true\":\n            print(\"INFO: Railway environment detected, auto-starting AutoMarker\")\n            automarker.start()\n            \n        return automarker\n    except Exception as e:\n        print(f\"ERROR creating AutoMarker: {e}\")\n        return None","size_bytes":10629},"backend/existing_modules/csv_importer.py":{"content":"import csv\r\nimport mysql.connector\r\nfrom mysql.connector import Error\r\nimport os\r\nimport argparse\r\nfrom datetime import datetime\r\nimport traceback\r\nimport re\r\n\r\nDB_HOST = os.getenv(\"MYSQLHOST\")\r\nDB_PORT_STR = os.getenv(\"MYSQLPORT\")\r\nDB_USER = os.getenv(\"MYSQLUSER\")\r\nDB_PASSWORD = os.getenv(\"MYSQLPASSWORD\")\r\nDB_NAME = os.getenv(\"MYSQLDATABASE\")\r\nDB_PORT = 4000\r\nif DB_PORT_STR and DB_PORT_STR.isdigit():\r\n    DB_PORT = int(DB_PORT_STR)\r\nelif DB_PORT_STR:\r\n    print(\r\n        f\"WARNING: MYSQLPORT environment variable ('{DB_PORT_STR}') is not a valid number. Connection might use default or fail if DB_PORT remains None and connector requires it.\"\r\n    )\r\n\r\n\r\ndef create_db_connection():\r\n    \"\"\"\r\n    MySQL database connection establish karta hai\r\n    \"\"\"\r\n    connection = None\r\n    try:\r\n        connection = mysql.connector.connect(\r\n            host=DB_HOST,\r\n            port=DB_PORT,\r\n            user=DB_USER,\r\n            password=DB_PASSWORD,\r\n            database=DB_NAME,\r\n        )\r\n        if connection.is_connected():\r\n            print(\"MySQL Database connection successful\")\r\n        return connection\r\n    except Error as e:\r\n        print(f\"Error connecting to MySQL Database: {e}\")\r\n        return None\r\n\r\n\r\n# --- Helper to execute single insert query (WITHOUT COMMIT) ---\r\ndef _execute_single_insert_no_commit(connection, query, params):  # Naam badla\r\n    \"\"\"\r\n    SQL INSERT query execute karta hai, lekin COMMIT nahi karta.\r\n    Returns: True if successful, False otherwise.\r\n    \"\"\"\r\n    # connection check pehle hi kar lena chahiye jahan se call ho raha hai\r\n    # if not connection or not connection.is_connected():\r\n    #     print(\"Error: No valid database connection for _execute_single_insert_no_commit.\")\r\n    #     return False\r\n\r\n    cursor = None  # cursor ko bahar define karein taaki finally mein access ho sake\r\n    try:\r\n        cursor = connection.cursor()\r\n        cursor.execute(query, params)\r\n        # connection.commit() # <<<<<<<<<<< YEH LINE HATA DI GAYI HAI >>>>>>>>>>>>>\r\n        return True\r\n    except Error as e:\r\n        if e.errno == mysql.connector.errorcode.ER_DUP_ENTRY:  # Duplicate entry\r\n            print(\r\n                f\"Warning (not committed yet): Duplicate entry for query: {query[:70]}... with params {params[:2]}... Error: {e}\"\r\n            )\r\n            # Agar ON DUPLICATE KEY UPDATE hai, toh yeh error nahi aana chahiye,\r\n            # balki update hona chahiye. Agar simple INSERT hai aur key duplicate hai, tab yeh error aayega.\r\n            # Is case mein, hum ise False return kar sakte hain taaki pata chale ki insert nahi hua.\r\n            return False  # Ya True agar ON DUPLICATE KEY UPDATE ise handle kar lega\r\n        else:\r\n            print(\r\n                f\"Error staging insert query: {query[:70]}... with params {params[:2]}... Error: {e}\"\r\n            )\r\n            # Rollback yahan nahi, main import function mein batch ke fail hone par hoga\r\n        return False\r\n    finally:\r\n        if cursor:\r\n            cursor.close()\r\n\r\n\r\n# --- Helper to execute single insert query ---\r\ndef execute_insert(connection, query, params):\r\n    \"\"\"\r\n    SQL INSERT query execute karta hai.\r\n    Returns: True if successful, False otherwise.\r\n    \"\"\"\r\n    cursor = connection.cursor()\r\n    try:\r\n        cursor.execute(query, params)\r\n        connection.commit()\r\n        # print(f\"Inserted row: {params}\") # Uncomment for debugging inserts\r\n        return True\r\n    except Error as e:\r\n        # Handle specific errors if needed, e.g., duplicate entries\r\n        if e.errno == mysql.connector.errorcode.ER_DUP_ENTRY:\r\n            print(\r\n                f\"Warning: Duplicate entry ignored for query: {query} with params {params}. Error: {e}\"\r\n            )\r\n        else:\r\n            print(\r\n                f\"Error executing insert query: {query} with params {params}. Error: {e}\"\r\n            )\r\n            connection.rollback()  # Rollback the transaction on error\r\n        return False\r\n    finally:\r\n        cursor.close()\r\n\r\n\r\n# --- Data Import Functions per table ---\r\n\r\n\r\ndef import_schools(connection, file_path):\r\n    print(f\"Importing {file_path} into schools...\")\r\n    insert_query = \"\"\"\r\n    INSERT INTO schools (school_id, school_name, address, email, api_key, logourl)\r\n    VALUES (%s, %s, %s, %s, %s, %s)\r\n    ON DUPLICATE KEY UPDATE\r\n        school_name = VALUES(school_name),\r\n        address = VALUES(address),\r\n        email = VALUES(email),\r\n        api_key = VALUES(api_key),\r\n        logourl = VALUES(logourl);\r\n    \"\"\"\r\n    try:\r\n        with open(file_path, mode=\"r\", encoding=\"utf-8\") as file:\r\n            reader = csv.reader(file)\r\n            header = next(reader)  # Skip header row\r\n            for row in reader:\r\n                # Ensure row has enough columns\r\n                if len(row) < 6:\r\n                    print(f\"Skipping malformed row in {file_path}: {row}\")\r\n                    continue\r\n\r\n                # Handle empty strings for potentially nullable columns\r\n                params = (\r\n                    row[0] if row[0] else None,  # school_id\r\n                    row[1] if row[1] else None,  # school_name\r\n                    row[2] if row[2] else None,  # address\r\n                    row[3] if row[3] else None,  # email\r\n                    row[4] if row[4] else None,  # api_key (handle empty as NULL)\r\n                    row[5] if row[5] else None,  # logourl (handle empty as NULL)\r\n                )\r\n                execute_insert(connection, insert_query, params)\r\n    except FileNotFoundError:\r\n        print(f\"Error: File not found at {file_path}\")\r\n    except Exception as e:\r\n        print(f\"Error importing {file_path}: {e}\")\r\n\r\n\r\ndef import_admins(connection, school_id_arg, file_path, batch_size=100):\r\n    print(\r\n        f\"Importing {file_path} into admins for school {school_id_arg} (Batch Size: {batch_size})...\"\r\n    )\r\n\r\n    # Query se `role` hata diya gaya hai.\r\n    # `name` ko backticks (`) mein daala gaya hai.\r\n    # `admins` table mein ek naya column 'email' add karna pad sakta hai.\r\n    insert_query = \"\"\"\r\n    INSERT INTO admins (school_id, username, password, `name`, phone, email)\r\n    VALUES (%s, %s, %s, %s, %s, %s)\r\n    ON DUPLICATE KEY UPDATE\r\n        password = VALUES(password), \r\n        `name` = VALUES(`name`),\r\n        phone = VALUES(phone),\r\n        email = VALUES(email);\r\n    \"\"\"\r\n\r\n    rows_batch = []\r\n    total_rows_processed_from_csv = 0\r\n    total_successful_db_operations = 0\r\n\r\n    try:\r\n        with open(file_path, mode=\"r\", encoding=\"utf-8\") as file:\r\n            reader = csv.reader(file)\r\n            try:\r\n                header = next(reader)\r\n            except StopIteration:\r\n                print(f\"Warning: CSV file {file_path} is empty. Skipping.\")\r\n                return\r\n\r\n            for row_num, row in enumerate(reader):\r\n                total_rows_processed_from_csv += 1\r\n\r\n                # Ab hum 6 columns check karenge\r\n                if len(row) < 6:\r\n                    print(\r\n                        f\"Skipping malformed CSV row #{row_num+1} in {file_path}: {row}\"\r\n                    )\r\n                    continue\r\n\r\n                # CSV ke school_id (row[4]) ko `school_id_arg` par prathmikta denge\r\n                current_school_id = row[4].strip() if row[4] else school_id_arg\r\n\r\n                params = (\r\n                    current_school_id,  # school_id (CSV se ya argument se)\r\n                    row[0].strip() if row[0] else None,  # username (CSV index 0)\r\n                    row[1].strip() if row[1] else None,  # password (CSV index 1)\r\n                    row[2].strip() if row[2] else None,  # name (CSV index 2)\r\n                    row[3].strip() if row[3] else None,  # phone (CSV index 3)\r\n                    row[5].strip() if row[5] else None,  # email (CSV index 5)\r\n                )\r\n                rows_batch.append(params)\r\n\r\n                if len(rows_batch) >= batch_size:\r\n                    staged_for_commit_count = 0\r\n                    for p_batch_item in rows_batch:\r\n                        if _execute_single_insert_no_commit(\r\n                            connection, insert_query, p_batch_item\r\n                        ):\r\n                            staged_for_commit_count += 1\r\n\r\n                    if staged_for_commit_count > 0:\r\n                        try:\r\n                            connection.commit()\r\n                            print(\r\n                                f\"Committed batch of {staged_for_commit_count} operations for admins.\"\r\n                            )\r\n                            total_successful_db_operations += staged_for_commit_count\r\n                        except Error as e_commit:\r\n                            print(\r\n                                f\"Error committing batch for admins: {e_commit}. Rolling back.\"\r\n                            )\r\n                            connection.rollback()\r\n\r\n                    rows_batch = []\r\n\r\n            if rows_batch:\r\n                staged_for_commit_count = 0\r\n                for p_batch_item in rows_batch:\r\n                    if _execute_single_insert_no_commit(\r\n                        connection, insert_query, p_batch_item\r\n                    ):\r\n                        staged_for_commit_count += 1\r\n\r\n                if staged_for_commit_count > 0:\r\n                    try:\r\n                        connection.commit()\r\n                        print(\r\n                            f\"Committed final batch of {staged_for_commit_count} operations for admins.\"\r\n                        )\r\n                        total_successful_db_operations += staged_for_commit_count\r\n                    except Error as e_commit:\r\n                        print(\r\n                            f\"Error committing final batch for admins: {e_commit}. Rolling back.\"\r\n                        )\r\n                        connection.rollback()\r\n\r\n            print(f\"Finished importing admins from {file_path}.\")\r\n            print(f\"Total rows processed from CSV: {total_rows_processed_from_csv}.\")\r\n            print(\r\n                f\"Total successful database insert/update operations: {total_successful_db_operations}.\"\r\n            )\r\n\r\n    except FileNotFoundError:\r\n        print(f\"Error: File not found at {file_path}\")\r\n    except Exception as e:\r\n        print(f\"An unexpected error occurred while importing {file_path}: {e}\")\r\n        traceback.print_exc()\r\n        if connection and connection.is_connected():\r\n            connection.rollback()\r\n\r\n\r\ndef import_users(connection, school_id_arg, file_path, batch_size=100):\r\n    print(\r\n        f\"Importing {file_path} into users for school {school_id_arg} (Batch Size: {batch_size})...\"\r\n    )\r\n\r\n    # `name` ko backticks (`) mein daala gaya hai kyunki yeh ek SQL keyword hai.\r\n    insert_query = \"\"\"\r\n    INSERT INTO users (school_id, teacher_id, `name`, biometric_code, phone, category) \r\n    VALUES (%s, %s, %s, %s, %s, %s)\r\n    ON DUPLICATE KEY UPDATE\r\n        `name` = VALUES(`name`),\r\n        biometric_code = VALUES(biometric_code),\r\n        phone = VALUES(phone),\r\n        category = VALUES(category),\r\n        school_id = VALUES(school_id)\r\n    \"\"\"\r\n\r\n    rows_batch = []\r\n    total_rows_processed_from_csv = 0\r\n    total_successful_db_operations = 0\r\n\r\n    try:\r\n        with open(file_path, mode=\"r\", encoding=\"utf-8\") as file:\r\n            reader = csv.reader(file)\r\n            try:\r\n                header = next(reader)\r\n            except StopIteration:\r\n                print(f\"Warning: CSV file {file_path} is empty. Skipping.\")\r\n                return\r\n\r\n            for row_num, row in enumerate(reader):\r\n                total_rows_processed_from_csv += 1\r\n\r\n                # Ab hum 5 columns check karenge\r\n                if len(row) < 5:\r\n                    print(\r\n                        f\"Skipping malformed CSV row #{row_num+1} in {file_path}: {row}\"\r\n                    )\r\n                    continue\r\n\r\n                # Parameters ab naye CSV structure ke hisaab se banenge\r\n                params = (\r\n                    school_id_arg,  # school_id script se aayega\r\n                    row[0].strip() if row[0] else None,  # teacher_id (CSV index 0)\r\n                    row[1].strip() if row[1] else None,  # name (CSV index 1)\r\n                    row[2].strip() if row[2] else None,  # biometric_code (CSV index 2)\r\n                    row[3].strip() if row[3] else None,  # phone (CSV index 3)\r\n                    row[4].strip() if row[4] else None,  # category (CSV index 4)\r\n                )\r\n                rows_batch.append(params)\r\n\r\n                if len(rows_batch) >= batch_size:\r\n                    staged_for_commit_count = 0\r\n                    for p_batch_item in rows_batch:\r\n                        if _execute_single_insert_no_commit(\r\n                            connection, insert_query, p_batch_item\r\n                        ):\r\n                            staged_for_commit_count += 1\r\n\r\n                    if staged_for_commit_count > 0:\r\n                        try:\r\n                            connection.commit()\r\n                            print(\r\n                                f\"Committed batch of {staged_for_commit_count} operations for users.\"\r\n                            )\r\n                            total_successful_db_operations += staged_for_commit_count\r\n                        except Error as e_commit:\r\n                            print(\r\n                                f\"Error committing batch for users: {e_commit}. Rolling back.\"\r\n                            )\r\n                            connection.rollback()\r\n\r\n                    rows_batch = []\r\n\r\n            if rows_batch:\r\n                staged_for_commit_count = 0\r\n                for p_batch_item in rows_batch:\r\n                    if _execute_single_insert_no_commit(\r\n                        connection, insert_query, p_batch_item\r\n                    ):\r\n                        staged_for_commit_count += 1\r\n\r\n                if staged_for_commit_count > 0:\r\n                    try:\r\n                        connection.commit()\r\n                        print(\r\n                            f\"Committed final batch of {staged_for_commit_count} operations for users.\"\r\n                        )\r\n                        total_successful_db_operations += staged_for_commit_count\r\n                    except Error as e_commit:\r\n                        print(\r\n                            f\"Error committing final batch for users: {e_commit}. Rolling back.\"\r\n                        )\r\n                        connection.rollback()\r\n\r\n            print(f\"Finished importing users from {file_path}.\")\r\n            print(f\"Total rows processed from CSV: {total_rows_processed_from_csv}.\")\r\n            print(\r\n                f\"Total successful database insert/update operations: {total_successful_db_operations}.\"\r\n            )\r\n\r\n    except FileNotFoundError:\r\n        print(f\"Error: File not found at {file_path}\")\r\n    except Exception as e:\r\n        print(f\"An unexpected error occurred while importing {file_path}: {e}\")\r\n        traceback.print_exc()\r\n        if connection and connection.is_connected():\r\n            connection.rollback()\r\n\r\n\r\ndef import_daily_schedules(connection, school_id, file_path, day_of_week, batch_size=200):\r\n    print(f\"Importing {file_path} for {day_of_week} into daily_schedules...\")\r\n\r\n    # Step 1: Delete existing data for this school and day\r\n    try:\r\n        with connection.cursor() as cursor:\r\n            delete_query = \"DELETE FROM daily_schedules WHERE school_id = %s AND day_of_week = %s\"\r\n            cursor.execute(delete_query, (school_id, day_of_week))\r\n            connection.commit()\r\n            print(f\"Deleted existing records for {school_id} - {day_of_week}.\")\r\n    except Error as e_del:\r\n        print(f\"Error deleting records: {e_del}\")\r\n        connection.rollback()\r\n        return\r\n\r\n    # Step 2: Prepare a SAHI INSERT query\r\n    # Isme 'class' column hai, aur column ke naam CSV se match karte hain.\r\n    insert_query = \"\"\"\r\n    INSERT INTO daily_schedules (school_id, day_of_week, teacher_id, name, category, classes, subject, period_number, class_info)\r\n    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s) \r\n    \"\"\"\r\n\r\n    rows_to_insert = []\r\n    try:\r\n        with open(file_path, mode=\"r\", encoding=\"utf-8\") as file:\r\n            reader = csv.reader(file)\r\n            header = next(reader)\r\n            # CSV header se period columns ka pata lagao\r\n            period_cols_header = header[5:] # period1 se shuru hone wale columns\r\n\r\n            for csv_row in reader:\r\n                # CSV se data nikalo\r\n                teacher_id = csv_row[0].strip()\r\n                name = csv_row[1].strip()\r\n                category = csv_row[2].strip()\r\n                classes = csv_row[3].strip() # Ye naya 'classes' column hai\r\n                subject = csv_row[4].strip() # Ye 'subject' column hai\r\n\r\n                # Har period ke liye ek alag row banao\r\n                for i, period_col_name in enumerate(period_cols_header):\r\n                    period_number = int(re.search(r'\\d+', period_col_name).group()) # 'period1' se 1 nikalo\r\n                    class_info = csv_row[5 + i].strip() if len(csv_row) > (5 + i) else None\r\n                    \r\n                    # Agar period 'Free' nahi hai, tabhi row banao\r\n                    if class_info and class_info.upper() != 'FREE':\r\n                        params = (\r\n                            school_id, day_of_week, teacher_id, name, category, \r\n                            classes, subject, period_number, class_info\r\n                        )\r\n                        rows_to_insert.append(params)\r\n\r\n        # Batch insert using executemany for speed\r\n        if rows_to_insert:\r\n            with connection.cursor() as cursor:\r\n                cursor.executemany(insert_query, rows_to_insert)\r\n                connection.commit()\r\n                print(f\"Successfully inserted {cursor.rowcount} period entries for {day_of_week}.\")\r\n\r\n    except FileNotFoundError:\r\n        print(f\"Error: File not found at {file_path}\")\r\n    except Exception as e:\r\n        print(f\"Error during import: {e}\")\r\n        traceback.print_exc()\r\n        connection.rollback()\r\n\r\n# --- Main Import Logic ---\r\nif __name__ == \"__main__\":\r\n    # Setup command-line argument parsing\r\n    parser = argparse.ArgumentParser(\r\n        description=\"Import CSV data into MySQL/TiDB database.\"  # Description thoda general rakha\r\n    )\r\n    parser.add_argument(\r\n        \"--school_id\", required=True, help=\"The school ID for the data.\"\r\n    )\r\n    # Option 1: Process all CSVs in a directory\r\n    parser.add_argument(\r\n        \"--csv_dir\",\r\n        help=\"Directory containing all CSV files for this school to import (processes all known CSVs).\",\r\n    )\r\n    # Option 2: Process a single specific CSV file for a specific table\r\n    parser.add_argument(\r\n        \"--csv_file\",\r\n        help=\"Path to a specific CSV file to import.\",\r\n    )\r\n    parser.add_argument(\r\n        \"--table_name\",\r\n        help=\"Name of the database table to import the specific CSV file into (required if --csv_file is used).\",\r\n    )\r\n\r\n    args = parser.parse_args()\r\n\r\n    school_id_to_import = args.school_id\r\n\r\n    # Validate arguments: EITHER --csv_dir OR (--csv_file AND --table_name) must be provided\r\n    if args.csv_dir and (args.csv_file or args.table_name):\r\n        parser.error(\r\n            \"Cannot use --csv_dir with --csv_file or --table_name. Use one mode or the other.\"\r\n        )\r\n        exit(1)  # Exit script\r\n    if args.csv_file and not args.table_name:\r\n        parser.error(\"--table_name is required when --csv_file is specified.\")\r\n        exit(1)  # Exit script\r\n    if not args.csv_dir and not args.csv_file:\r\n        parser.error(\r\n            \"Either --csv_dir or --csv_file (with --table_name) must be specified.\"\r\n        )\r\n        exit(1)  # Exit script\r\n\r\n    print(f\"--- Starting CSV Import Process for School ID: {school_id_to_import} ---\")\r\n\r\n    db_connection = create_db_connection()\r\n\r\n    if not db_connection:  # Agar connection fail hota hai toh yahin se exit\r\n        print(\"\\nDatabase connection failed. CSV Import aborted.\")\r\n        exit(1)\r\n\r\n    if args.csv_dir:\r\n        schools_csv_path_for_check = os.path.join(args.csv_dir, \"schools.csv\")\r\n        if os.path.exists(schools_csv_path_for_check):\r\n            print(\r\n                f\"\\n--- Stage: Ensuring 'schools' table is up-to-date from: {schools_csv_path_for_check} ---\"\r\n            )\r\n            import_schools(\r\n                db_connection, schools_csv_path_for_check\r\n            )  # import_schools school_id argument nahi leta\r\n        else:\r\n            print(\r\n                f\"INFO: schools.csv not found in --csv_dir '{args.csv_dir}'. Assuming target school '{school_id_to_import}' already exists in DB.\"\r\n            )\r\n    elif args.csv_file and args.table_name.lower() == \"schools\":\r\n        # Agar user specifically schools.csv import kar raha hai\r\n        print(f\"\\n--- Stage: Importing specific schools file: {args.csv_file} ---\")\r\n        if os.path.exists(args.csv_file):\r\n            import_schools(db_connection, args.csv_file)\r\n        else:\r\n            print(f\"ERROR: Specified schools.csv file not found: {args.csv_file}\")\r\n            db_connection.close()\r\n            exit(1)\r\n\r\n    cursor = None\r\n    school_exists_in_db = False\r\n    try:\r\n        cursor = db_connection.cursor(dictionary=True)\r\n        cursor.execute(\r\n            \"SELECT school_id FROM schools WHERE school_id = %s\", (school_id_to_import,)\r\n        )\r\n        result = cursor.fetchone()\r\n        if result:\r\n            school_exists_in_db = True\r\n    except Error as e_check:\r\n        print(f\"Error checking for school_id '{school_id_to_import}': {e_check}\")\r\n    finally:\r\n        if cursor:\r\n            cursor.close()\r\n\r\n    if not school_exists_in_db:\r\n        print(\r\n            f\"\\nCRITICAL ERROR: School ID '{school_id_to_import}' NOT FOUND in the 'schools' table.\"\r\n        )\r\n        print(\r\n            \"Please ensure the school exists in the database (e.g., by importing schools.csv first or ensuring it's pre-populated).\"\r\n        )\r\n        db_connection.close()\r\n        exit(1)\r\n\r\n    print(\r\n        f\"\\n--- Confirmed School ID '{school_id_to_import}' exists in 'schools' table. ---\"\r\n    )\r\n\r\n    # --- Mode 1: Import a single specified CSV file ---\r\n    if args.csv_file and args.table_name:\r\n        print(\r\n            f\"--- Importing single file: {args.csv_file} into table: {args.table_name} ---\"\r\n        )\r\n        csv_file_path = args.csv_file\r\n\r\n        if not os.path.exists(csv_file_path):\r\n            print(f\"ERROR: Specified CSV file not found: {csv_file_path}\")\r\n        else:\r\n            target_table = args.table_name.lower()\r\n            if target_table == \"users\":\r\n                import_users(db_connection, school_id_to_import, csv_file_path)\r\n            elif target_table == \"admins\":\r\n                import_admins(db_connection, school_id_to_import, csv_file_path)\r\n            # elif target_table == \"arrangements\":\r\n            #     import_arrangements(db_connection, school_id_to_import, csv_file_path)\r\n            # elif target_table == \"attendance\":\r\n            #     import_attendance(db_connection, school_id_to_import, csv_file_path)\r\n            # elif (\r\n            #     target_table == \"schedules_summary\" or target_table == \"schedules\"\r\n            # ):  # schedules.csv ke liye\r\n            #     import_schedules_summary(\r\n            #         db_connection, school_id_to_import, csv_file_path\r\n            #     )\r\n            # elif target_table == \"workload_counter\":\r\n            #     import_workload_counter(\r\n            #         db_connection, school_id_to_import, csv_file_path\r\n            #     )\r\n            # elif target_table == \"coverage_tracking\":\r\n            #     import_coverage_tracking(\r\n            #         db_connection, school_id_to_import, csv_file_path\r\n            #     )\r\n            # elif target_table == \"substitutes\":\r\n            #     import_substitutes(db_connection, school_id_to_import, csv_file_path)\r\n            # elif target_table == \"suspended_dates\":\r\n            #     import_suspended_dates(\r\n            #         db_connection, school_id_to_import, csv_file_path\r\n            #     )\r\n            # elif target_table == \"timing\":\r\n            #     import_timing(db_connection, school_id_to_import, csv_file_path)\r\n            # daily_schedules ke liye alag se handle karna padega agar file ka naam day specific hai\r\n            # Ya fir user ko table_name mein 'schedule_monday' jaisa kuch dena hoga\r\n            elif target_table.startswith(\"schedule_\"):\r\n                day_name_from_table = target_table.split(\"_\")[\r\n                    -1\r\n                ]  # Aakhiri part day hoga\r\n                valid_days = [\r\n                    \"monday\",\r\n                    \"tuesday\",\r\n                    \"wednesday\",\r\n                    \"thursday\",\r\n                    \"friday\",\r\n                    \"saturday\",\r\n                ]\r\n                if day_name_from_table in valid_days:\r\n                    import_daily_schedules(\r\n                        db_connection,\r\n                        school_id_to_import,\r\n                        csv_file_path,\r\n                        day_name_from_table.capitalize(),\r\n                    )\r\n                else:\r\n                    print(\r\n                        f\"ERROR: Invalid day '{day_name_from_table}' in table_name for daily schedule. Expected format 'schedule_dayname'.\"\r\n                    )\r\n            elif (\r\n                target_table == \"schools\"\r\n            ):  # Agar specifically schools.csv import karna ho (upar handle ho chuka hai, par yahan bhi rakh sakte hain)\r\n                print(\r\n                    \"INFO: schools.csv should have been handled already if it was the target.\"\r\n                )\r\n                if not os.path.exists(csv_file_path):  # Double check\r\n                    import_schools(db_connection, csv_file_path)\r\n            else:\r\n                print(\r\n                    f\"ERROR: Importing into table '{args.table_name}' is not supported for single file import or table name not recognized.\"\r\n                )\r\n\r\n    # --- Mode 2: Import all CSVs from a directory (original behavior) ---\r\n    elif args.csv_dir:\r\n        csv_data_directory = args.csv_dir\r\n        print(\r\n            f\"--- Importing all relevant CSV files from directory: {csv_data_directory} ---\"\r\n        )\r\n\r\n        # (Aapka original import_tasks wala loop yahan aa jayega)\r\n        # schools.csv ko pehle hi (school_id check se pehle) handle kar liya gaya hai agar --csv_dir mode hai\r\n\r\n        import_tasks_for_dir_mode = [  # schools.csv is handled above\r\n            (import_admins, \"admins.csv\", False),\r\n            (import_users, \"users.csv\", False),\r\n            # (import_arrangements, \"arrangements.csv\", False),\r\n            # (import_attendance, \"attendance.csv\", False),\r\n            (import_daily_schedules, \"schedule_{day}.csv\", True),\r\n            # (import_schedules_summary, \"schedules.csv\", False),\r\n            # (import_workload_counter, \"workload_counter.csv\", False),\r\n            # (import_coverage_tracking, \"coverage_tracking.csv\", False),\r\n            # (import_substitutes, \"substitutes.csv\", False),\r\n            # (import_suspended_dates, \"suspended_dates.csv\", False),\r\n            # (import_timing, \"timing.csv\", False),\r\n        ]\r\n\r\n        days_for_schedule = [\r\n            \"monday\",\r\n            \"tuesday\",\r\n            \"wednesday\",\r\n            \"thursday\",\r\n            \"friday\",\r\n            \"saturday\",\r\n        ]\r\n\r\n        for import_func, csv_pattern, needs_day_loop in import_tasks_for_dir_mode:\r\n            if needs_day_loop:\r\n                for day_name in days_for_schedule:\r\n                    specific_csv_filename = csv_pattern.format(day=day_name)\r\n                    csv_file_path = os.path.join(\r\n                        csv_data_directory, specific_csv_filename\r\n                    )\r\n                    if os.path.exists(csv_file_path):\r\n                        import_func(\r\n                            db_connection,\r\n                            school_id_to_import,\r\n                            csv_file_path,\r\n                            day_name.capitalize(),\r\n                        )\r\n                    else:\r\n                        print(\r\n                            f\"INFO: CSV file not found for {day_name.capitalize()} schedule: {csv_file_path}. Skipping.\"\r\n                        )\r\n            else:\r\n                csv_file_path = os.path.join(csv_data_directory, csv_pattern)\r\n                if os.path.exists(csv_file_path):\r\n                    import_func(db_connection, school_id_to_import, csv_file_path)\r\n                else:\r\n                    print(\r\n                        f\"INFO: CSV file not found: {csv_file_path}. Skipping import for {csv_pattern}.\"\r\n                    )\r\n\r\n    db_connection.close()\r\n    print(\"\\n--- CSV Import process finished. ---\")\r\n# test line to trigger git","size_bytes":29156},"backend/existing_modules/data_manager.py":{"content":"import os\nfrom utils import get_ist_today\nimport platform\nimport pandas as pd\nimport time\nimport mysql.connector\nfrom mysql.connector import Error\nfrom datetime import datetime, date\nimport certifi\nimport streamlit as st\nimport whatsapp_service\nimport traceback\n\nfrom arrangement_logic import ArrangementLogic\n\nif platform.system() == \"Windows\" or os.getenv(\"ENV\", \"DEV\") == \"DEV\":\n    from dotenv import load_dotenv\n    load_dotenv()\n\nDB_HOST = os.getenv(\"DB_HOST\")\nDB_PORT = int(os.getenv(\"DB_PORT\", 4000))\nDB_USER = os.getenv(\"DB_USER\")\nDB_PASSWORD = os.getenv(\"DB_PASSWORD\")\nDB_NAME = os.getenv(\"DB_NAME\")\n\n# ✅ RAILWAY-OPTIMIZED Connection Function\ndef create_db_connection():\n    \"\"\"Railway-optimized database connection with fast retry logic\"\"\"\n    if not all([DB_HOST, DB_USER, DB_PASSWORD, DB_NAME]):\n        print(\"ERROR: Database environment variables are not fully set.\")\n        return None\n\n    max_retries = 2\n    for attempt in range(max_retries):\n        try:\n            print(f\"--- Attempting Railway DB connection ({attempt + 1}/{max_retries}) ---\")\n            connection = mysql.connector.connect(\n                host=DB_HOST,\n                port=DB_PORT,\n                user=DB_USER,\n                password=DB_PASSWORD,\n                database=DB_NAME,\n                connect_timeout=8,\n                autocommit=True,\n                use_unicode=True,\n                charset='utf8mb4',\n                auth_plugin='mysql_native_password'\n            )\n            if connection.is_connected():\n                print(\"--- Railway DB Connection Successful! ---\")\n                return connection\n            \n        except Error as e:\n            print(f\"ERROR on attempt {attempt + 1}: Could not connect to database: {e}\")\n            if attempt == max_retries - 1:\n                print(f\"Database Connection Failed after {max_retries} attempts\")\n                return None\n            \n            print(\"--- Waiting 2 seconds before retrying... ---\")\n            time.sleep(2)\n            \n    return None\n\ndef execute_query(connection, query, params=None):\n    \"\"\"Railway-optimized execute query with enhanced error handling\"\"\"\n    if connection is None or not connection.is_connected():\n        print(\"ERROR execute_query: Received invalid or closed connection.\")\n        return False\n\n    try:\n        with connection.cursor() as cursor:\n            if params:\n                cursor.execute(query, params)\n            else:\n                cursor.execute(query)\n            connection.commit() if not connection.autocommit else None\n            return True\n\n    except mysql.connector.Error as e:\n        print(f\"ERROR execute_query: MySQL Error: {e}\")\n        print(f\"Query: {query[:100]}...\")\n        try:\n            connection.rollback()\n        except Error as rb_err:\n            print(f\"ERROR execute_query: Error during rollback: {rb_err}\")\n        return False\n\n    except Exception as e:\n        print(f\"ERROR execute_query: Unexpected error: {e}\")\n        traceback.print_exc()\n        try:\n            connection.rollback()\n        except Error:\n            pass\n        return False\n\ndef read_query(connection, query, params=None):\n    \"\"\"Railway-optimized read query with enhanced performance\"\"\"\n    if connection is None or not connection.is_connected():\n        print(\"ERROR read_query: Received invalid or closed connection.\")\n        return []\n\n    try:\n        with connection.cursor(dictionary=True) as cursor:\n            if params:\n                cursor.execute(query, params)\n            else:\n                cursor.execute(query)\n            return cursor.fetchall()\n\n    except mysql.connector.Error as e:\n        print(f\"ERROR read_query: MySQL Error: {e}\")\n        print(f\"Query: {query[:100]}...\")\n        return []\n\n    except Exception as e:\n        print(f\"ERROR read_query: Unexpected error: {e}\")\n        traceback.print_exc()\n        return []\n\n# ✅ RAILWAY-OPTIMIZED DataManager Class\nclass DataManager:\n    def __init__(self):\n        print(\"--- DataManager initialized (Railway Optimized) ---\")\n        self.arrangement_logic = ArrangementLogic(self)\n\n \n        \n    def get_suspended_dates(self, school_id):\n        \"\"\"Fetches suspended arrangement dates for a specific school from the database.\"\"\"\n        print(f\"DEBUG DataManager: Getting suspended dates for school={school_id}\")\n        connection = None\n        suspended_dates_df = pd.DataFrame()\n\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(\n                    f\"ERROR DataManager.get_suspended_dates: DB connection failed for school {school_id}. Cannot fetch suspended dates.\"\n                )\n                return suspended_dates_df\n\n            print(f\"DEBUG DataManager.get_suspended_dates: DB connection obtained.\")\n\n            query = \"SELECT date FROM suspended_dates WHERE school_id = %s;\"\n            params = (school_id,)\n\n            result = read_query(connection, query, params)\n\n            if result:\n                suspended_dates_df = pd.DataFrame(result)\n                print(\n                    f\"DEBUG DataManager.get_suspended_dates: Fetched {len(suspended_dates_df)} suspended dates.\"\n                )\n                if \"date\" in suspended_dates_df.columns:\n                    try:\n                        suspended_dates_df[\"date\"] = pd.to_datetime(\n                            suspended_dates_df[\"date\"]\n                        ).dt.date\n                        print(\n                            \"DEBUG DataManager.get_suspended_dates: Converted 'suspended_date' column to date objects.\"\n                        )\n                    except Exception as e:\n                        print(\n                            f\"WARNING DataManager.get_suspended_dates: Could not convert 'date' column to date objects: {e}\"\n                        )\n                else:\n                    print(\n                        \"WARNING DataManager.get_suspended_dates: 'date' column not found in result.\"\n                    )\n\n            else:\n                print(\n                    f\"INFO DataManager.get_suspended_dates: No suspended dates found for school {school_id}.\"\n                )\n\n            return suspended_dates_df\n\n        except Exception as e:\n            print(\n                f\"ERROR DataManager.get_suspended_dates: Unexpected error getting suspended dates from DB for school {school_id}: {e}\"\n            )\n            import traceback\n\n            traceback.print_exc()\n            return suspended_dates_df\n\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                    print(f\"DEBUG DataManager.get_suspended_dates: Connection closed.\")\n                except Error as e:\n                    print(\n                        f\"ERROR DataManager.get_suspended_dates: Failed to close connection: {e}\"\n                    )\n\n    def _save_arrangements(self, new_arrangements_list):\n        \"\"\"\n        ✅ FIXED: Saves arrangements using executemany for better performance.\n        \"\"\"\n        print(f\"DEBUG DataManager: Attempting to save {len(new_arrangements_list)} arrangements\")\n        \n        if not new_arrangements_list:\n            print(\"INFO DataManager: No new arrangements to save\")\n            return True\n\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager._save_arrangements: DB connection failed\")\n                return False\n\n            # This query will attempt to insert a new arrangement. \n            # If an arrangement for the same school, date, and period already exists, it will be updated.\n            # This requires a UNIQUE constraint on (school_id, date, period).\n            # ALTER TABLE arrangements ADD UNIQUE KEY `unique_arrangement` (`school_id`, `date`, `period`);\n            query = \"\"\"\n                INSERT INTO arrangements (school_id, date, absent_teacher, absent_name, absent_category, replacement_teacher, replacement_name, replacement_category, class, period, status, match_quality) \n                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n                ON DUPLICATE KEY UPDATE \n                    absent_teacher=VALUES(absent_teacher), absent_name=VALUES(absent_name), absent_category=VALUES(absent_category),\n                    replacement_teacher=VALUES(replacement_teacher), replacement_name=VALUES(replacement_name), replacement_category=VALUES(replacement_category),\n                    class=VALUES(class), status=VALUES(status), match_quality=VALUES(match_quality);\n            \"\"\"\n            \n            params_to_insert = [\n                (\n                    arr.get(\"school_id\"), arr.get(\"date\"), arr.get(\"absent_teacher\"),\n                    arr.get(\"absent_name\"), arr.get(\"absent_category\"), arr.get(\"replacement_teacher\"),\n                    arr.get(\"replacement_name\"), arr.get(\"replacement_category\"), arr.get(\"class\"),\n                    arr.get(\"period\"), arr.get(\"status\"), arr.get(\"match_quality\")\n                )\n                for arr in new_arrangements_list\n            ]\n            \n            with connection.cursor() as cursor:\n                cursor.executemany(query, params_to_insert)\n                connection.commit()\n                # executemany in MySQL Connector/Python with ON DUPLICATE KEY UPDATE returns 1 for an insert, 2 for an update.\n                # So cursor.rowcount can be more than the number of rows. We'll just check if it's non-negative.\n                success_count = cursor.rowcount\n                print(f\"SUCCESS: Bulk saved/updated arrangements. Rowcount: {success_count}\")\n                return True\n        \n        except Exception as e:\n            print(f\"ERROR DataManager._save_arrangements: {e}\")\n            traceback.print_exc()\n            if connection:\n                connection.rollback()\n            return False\n        finally:\n            if connection and connection.is_connected():\n                connection.close()\n    \n    # ... [Keep all your other DataManager methods as they are] ...\n    # get_user_details, mark_attendance, suspend_arrangements, etc.\n    # The rest of your file is okay.\n\n    # [ PASTE THE REST OF YOUR data_manager.py FILE HERE ]\n    # Make sure to copy all other methods like get_todays_attendance, get_auto_marking_timing, get_user_details etc.\n    # The code below is a placeholder for you to paste the rest of your file.\n\n    def get_todays_attendance(self, school_id):\n        \"\"\"Get today's attendance (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Getting today's attendance for school {school_id}\")\n        today = get_ist_today()\n        return self.get_attendance_report(school_id, start_date=today, end_date=today)\n\n    def get_auto_marking_timing(self, school_id):\n        \"\"\"Get auto-marking timing (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Fetching auto-marking timing for school {school_id}\")\n        connection = None\n        timing_data = {}\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_auto_marking_timing: DB connection failed for school {school_id}\")\n                return timing_data\n\n            print(f\"DEBUG DataManager.get_auto_marking_timing: DB connection obtained for school {school_id}\")\n            query = \"SELECT hour, minute, enabled FROM timing WHERE school_id = %s LIMIT 1\"\n            params = (school_id,)\n            result = read_query(connection, query, params)\n\n            if result:\n                timing_data = result[0]\n                print(f\"DEBUG DataManager.get_auto_marking_timing: Found timing data: {timing_data}\")\n            else:\n                print(f\"INFO DataManager.get_auto_marking_timing: No timing data found for school {school_id}\")\n            return timing_data\n        except Exception as e:\n            print(f\"ERROR DataManager.get_auto_marking_timing: Exception for school {school_id}: {e}\")\n            traceback.print_exc()\n            return timing_data\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_auto_marking_timing: Failed to close connection: {e_close}\")\n\n    def get_arrangement_time(self, school_id):\n        \"\"\"Get arrangement creation time for a specific school from the database.\"\"\"\n        print(\n            f\"DEBUG DataManager: Fetching timing for school {school_id} using get_arrangement_time\"\n        )\n        connection = None\n        timing_data = {\n            \"hour\": 10,\n            \"minute\": 0,\n            \"enabled\": True,\n        }\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(\n                    f\"ERROR DataManager.get_arrangement_time: Failed to get DB connection for school {school_id}. Returning defaults.\"\n                )\n                return timing_data\n\n            query = \"SELECT hour, minute, enabled FROM timing WHERE school_id = %s\"\n            params = (school_id,)\n            result = read_query(connection, query, params)\n\n            if result:\n                timing_data = result[0]\n                if \"enabled\" in timing_data:\n                    timing_data[\"enabled\"] = bool(timing_data[\"enabled\"])\n            else:\n                print(\n                    f\"INFO DataManager.get_arrangement_time: No timing found for school {school_id}. Returning defaults.\"\n                )\n            return timing_data\n        except Exception as e:\n            print(\n                f\"ERROR DataManager.get_arrangement_time: Error fetching timing for school {school_id}: {e}\"\n            )\n            return timing_data\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Error as e:\n                    print(\n                        f\"ERROR DataManager.get_arrangement_time: Failed to close connection: {e}\"\n                    )\n\n    def set_arrangement_time(self, school_id, hour, minute):\n        \"\"\"Set arrangement creation time for a specific school in the database.\"\"\"\n        print(\n            f\"DEBUG DataManager: Attempting to set timing for school {school_id} to {hour}:{minute:02d}\"\n        )\n        connection = None\n        success = False\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(\n                    f\"ERROR DataManager.set_arrangement_time: Failed to get DB connection for school {school_id}. Cannot save timing.\"\n                )\n                return success\n\n            hour_int = int(hour)\n            minute_int = int(minute)\n            query = \"\"\"\n                INSERT INTO timing (school_id, hour, minute, enabled)\n                VALUES (%s, %s, %s, TRUE)\n                ON DUPLICATE KEY UPDATE\n                    hour = VALUES(hour),\n                    minute = VALUES(minute),\n                    enabled = VALUES(enabled);\n            \"\"\"\n            params = (school_id, hour_int, minute_int)\n            success = execute_query(connection, query, params)\n            if success:\n                print(\n                    f\"INFO DataManager.set_arrangement_time: Timing successfully set/updated for school {school_id}.\"\n                )\n        except ValueError:\n            print(\n                \"ERROR DataManager.set_arrangement_time: Hour and minute must be integers.\"\n            )\n            success = False\n        except Exception as e:\n            print(\n                f\"ERROR DataManager.set_arrangement_time: Unexpected error setting timing for school {school_id}: {e}\"\n            )\n            traceback.print_exc()\n            success = False\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Error as e:\n                    print(\n                        f\"ERROR DataManager.set_arrangement_time: Failed to close connection: {e}\"\n                    )\n        return success\n\n    def set_auto_marking_timing(self, school_id, hour, minute, enabled):\n        \"\"\"Set auto-marking timing (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Setting auto-marking timing for school {school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.set_auto_marking_timing: DB connection failed for school {school_id}\")\n                return False\n\n            query = \"REPLACE INTO timing (school_id, hour, minute, enabled) VALUES (%s, %s, %s, %s)\"\n            params = (school_id, hour, minute, enabled)\n            success = execute_query(connection, query, params)\n            \n            if success:\n                print(f\"SUCCESS DataManager.set_auto_marking_timing: Updated timing for school {school_id}\")\n            return success\n        except Exception as e:\n            print(f\"ERROR DataManager.set_auto_marking_timing: Exception for school {school_id}: {e}\")\n            traceback.print_exc()\n            return False\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.set_auto_marking_timing: Failed to close connection: {e_close}\")\n\n    def is_arrangement_suspended(self, school_id, date_obj):\n        \"\"\"Check if arrangements are suspended (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Checking arrangement suspension for school={school_id}, date={date_obj}\")\n        connection = None\n        is_suspended_flag = False\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.is_arrangement_suspended: DB connection failed for school {school_id}\")\n                return False\n\n            date_str = str(date_obj)\n            query = \"SELECT COUNT(*) as suspension_count FROM suspended_dates WHERE school_id = %s AND date = %s\"\n            params = (school_id, date_str)\n            result = read_query(connection, query, params)\n\n            if result and isinstance(result, list) and len(result) > 0:\n                count = result[0].get(\"suspension_count\", 0)\n                if count is not None and count > 0:\n                    is_suspended_flag = True\n                    print(f\"INFO DataManager.is_arrangement_suspended: Arrangements ARE suspended for {date_str}\")\n                else:\n                    print(f\"INFO DataManager.is_arrangement_suspended: Arrangements are NOT suspended for {date_str}\")\n            else:\n                print(f\"INFO DataManager.is_arrangement_suspended: No suspension record found for {date_str}\")\n                is_suspended_flag = False\n\n            return is_suspended_flag\n        except Exception as e:\n            print(f\"ERROR DataManager.is_arrangement_suspended: Unexpected error for school {school_id}: {e}\")\n            traceback.print_exc()\n            return False\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.is_arrangement_suspended: Failed to close connection: {e_close}\")\n\n    def get_absent_teachers(self, school_id, date_str):\n        \"\"\"Get absent teachers (Railway optimized with DISTINCT)\"\"\"\n        print(f\"DEBUG DataManager: Getting absent teachers for school={school_id}, date={date_str}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_absent_teachers: DB connection failed for school {school_id}\")\n                return []\n\n            query = \"SELECT DISTINCT teacher_id FROM attendance WHERE school_id = %s AND date = %s AND status = 'absent'\"\n            params = (school_id, date_str)\n            result = read_query(connection, query, params)\n            \n            absent_list = [row[\"teacher_id\"] for row in result] if result else []\n            print(f\"DEBUG DataManager.get_absent_teachers: Found {len(absent_list)} absent teachers\")\n            return absent_list\n        except Exception as e:\n            print(f\"ERROR DataManager.get_absent_teachers: Exception for school {school_id}: {e}\")\n            traceback.print_exc()\n            return []\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_absent_teachers: Failed to close connection: {e_close}\")\n\n    def get_present_teachers(self, school_id, date_str):\n        \"\"\"Get present teachers (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Getting present teachers for school={school_id}, date={date_str}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_present_teachers: DB connection failed for school {school_id}\")\n                return []\n\n            query = \"SELECT DISTINCT teacher_id FROM attendance WHERE school_id = %s AND date = %s AND status = 'present'\"\n            params = (school_id, date_str)\n            result = read_query(connection, query, params)\n            \n            present_list = [row[\"teacher_id\"] for row in result] if result else []\n            print(f\"DEBUG DataManager.get_present_teachers: Found {len(present_list)} present teachers\")\n            return present_list\n        except Exception as e:\n            print(f\"ERROR DataManager.get_present_teachers: Exception for school {school_id}: {e}\")\n            traceback.print_exc()\n            return []\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_present_teachers: Failed to close connection: {e_close}\")\n\n    def get_all_marked_teacher_ids_for_date(self, school_id, date_str):\n        \"\"\"Get all marked teacher IDs (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Getting all marked teachers for school={school_id}, date={date_str}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_all_marked_teacher_ids_for_date: DB connection failed\")\n                return []\n\n            query = \"SELECT DISTINCT teacher_id FROM attendance WHERE school_id = %s AND date = %s\"\n            params = (school_id, date_str)\n            result = read_query(connection, query, params)\n            \n            marked_list = [row[\"teacher_id\"] for row in result] if result else []\n            print(f\"DEBUG DataManager.get_all_marked_teacher_ids_for_date: Found {len(marked_list)} marked teachers\")\n            return marked_list\n        except Exception as e:\n            print(f\"ERROR DataManager.get_all_marked_teacher_ids_for_date: Exception: {e}\")\n            traceback.print_exc()\n            return []\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_all_marked_teacher_ids_for_date: Failed to close connection: {e_close}\")\n\n    def get_all_teachers(self, school_id):\n        \"\"\"Get all teachers (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Getting all teachers for school={school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_all_teachers: DB connection failed for school {school_id}\")\n                return []\n\n            query = \"SELECT teacher_id, name, category, phone, biometric_code FROM users WHERE school_id = %s\"\n            params = (school_id,)\n            result = read_query(connection, query, params)\n            \n            teachers_list = result if result else []\n            print(f\"DEBUG DataManager.get_all_teachers: Found {len(teachers_list)} teachers\")\n            return teachers_list\n        except Exception as e:\n            print(f\"ERROR DataManager.get_all_teachers: Exception for school {school_id}: {e}\")\n            traceback.print_exc()\n            return []\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_all_teachers: Failed to close connection: {e_close}\")\n\n    def load_teacher_schedules(self, school_id, specific_day=None):\n        \"\"\"\n        Loads and pivots the daily schedule for a specific day into a wide format.\n        This is the primary source for teacher schedules and their subjects for the day.\n        \"\"\"\n        if not specific_day:\n            specific_day = datetime.now().strftime('%A')\n        \n        print(f\"DEBUG DataManager: Loading schedule for school {school_id} on {specific_day}\")\n        \n        connection = None\n        try:\n            connection = create_db_connection()\n            if not connection:\n                return pd.DataFrame()\n\n            # This query fetches the schedule in a \"long\" format.\n            query = \"\"\"\n                SELECT teacher_id, name,classes, category, subject, period_number, class_info\n                FROM daily_schedules\n                WHERE school_id = %s AND day_of_week = %s\n                ORDER BY teacher_id, period_number;\n            \"\"\"\n            params = (school_id, specific_day)\n            long_format_result = read_query(connection, query, params)\n\n            if not long_format_result:\n                print(f\"INFO: No daily schedule found for {specific_day}.\")\n                return pd.DataFrame()\n\n            # Convert the long format to a wide format DataFrame\n            schedule_df_long = pd.DataFrame(long_format_result)\n            \n            # Pivot the table to get periods as columns\n            schedule_df_wide = schedule_df_long.pivot_table(\n                index=['teacher_id', 'name', 'category', 'subject'],\n                columns='period_number',\n                values='class_info',\n                aggfunc='first'\n            ).reset_index()\n\n            # Rename the pivoted columns from numbers (1, 2, 3) to \"period1\", \"period2\", etc.\n            schedule_df_wide.columns = ['teacher_id', 'name', 'category', 'subject'] + [f'period{col}' for col in schedule_df_wide.columns[4:]]\n\n            # Fill any empty period slots with 'FREE'\n            for i in range(1, 8):\n                period_col = f'period{i}'\n                if period_col not in schedule_df_wide.columns:\n                    schedule_df_wide[period_col] = 'FREE'\n            \n            schedule_df_wide.fillna('FREE', inplace=True)\n            \n            print(f\"SUCCESS: Loaded and pivoted schedule for {len(schedule_df_wide)} teachers.\")\n            return schedule_df_wide\n\n        except Exception as e:\n            print(f\"CRITICAL ERROR in load_teacher_schedules: {e}\")\n            traceback.print_exc()\n            return pd.DataFrame()\n        finally:\n            if connection and connection.is_connected():\n                connection.close()\n                \n    def get_todays_arrangements(self, school_id, current_date=None):\n        \"\"\"Get today's arrangements (Railway optimized)\"\"\"\n        if not current_date:\n            current_date = get_ist_today()\n        \n        print(f\"DEBUG DataManager: Getting arrangements for school={school_id}, date={current_date}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_todays_arrangements: DB connection failed for school {school_id}\")\n                return pd.DataFrame()\n\n            query = \"SELECT * FROM arrangements WHERE school_id = %s AND date = %s\"\n            params = (school_id, str(current_date))\n            result = read_query(connection, query, params)\n            \n            if result:\n                arrangements_df = pd.DataFrame(result)\n                print(f\"DEBUG DataManager.get_todays_arrangements: Found {len(arrangements_df)} arrangements\")\n                return arrangements_df\n            \n            print(f\"DEBUG DataManager.get_todays_arrangements: No arrangements found for {current_date}\")\n            return pd.DataFrame()\n        except Exception as e:\n            print(f\"ERROR DataManager.get_todays_arrangements: Exception for school {school_id}: {e}\")\n            traceback.print_exc()\n            return pd.DataFrame()\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_todays_arrangements: Failed to close connection: {e_close}\")\n\n    def get_multiple_teachers_workload(self, school_id, teacher_ids):\n        \"\"\"Get multiple teachers' workload (Railway optimized)\"\"\"\n        if not teacher_ids:\n            return []\n        \n        print(f\"DEBUG DataManager: Getting workload for {len(teacher_ids)} teachers in school {school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_multiple_teachers_workload: DB connection failed for school {school_id}\")\n                return []\n\n            placeholders = \",\".join([\"%s\"] * len(teacher_ids))\n            query = f\"SELECT teacher_id, workload_count FROM workload_counter WHERE school_id = %s AND teacher_id IN ({placeholders})\"\n            params = [school_id] + teacher_ids\n            result = read_query(connection, query, params)\n            \n            workload_list = result if result else []\n            print(f\"DEBUG DataManager.get_multiple_teachers_workload: Found workload for {len(workload_list)} teachers\")\n            return workload_list\n        except Exception as e:\n            print(f\"ERROR DataManager.get_multiple_teachers_workload: Exception for school {school_id}: {e}\")\n            traceback.print_exc()\n            return []\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_multiple_teachers_workload: Failed to close connection: {e_close}\")\n\n    def update_teacher_workload(self, school_id, teacher_id, increment=1):\n        \"\"\"Update teacher workload (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Updating workload for teacher {teacher_id} in school {school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.update_teacher_workload: DB connection failed for school {school_id}\")\n                return False\n\n            query = \"\"\"INSERT INTO workload_counter (school_id, teacher_id, workload_count) \n                       VALUES (%s, %s, %s) \n                       ON DUPLICATE KEY UPDATE workload_count = workload_count + %s\"\"\"\n            params = (school_id, teacher_id, increment, increment)\n            success = execute_query(connection, query, params)\n            \n            if success:\n                print(f\"SUCCESS DataManager.update_teacher_workload: Updated workload for teacher {teacher_id}\")\n            return success\n        except Exception as e:\n            print(f\"ERROR DataManager.update_teacher_workload: Exception for teacher {teacher_id}: {e}\")\n            traceback.print_exc()\n            return False\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.update_teacher_workload: Failed to close connection: {e_close}\")\n\n    def get_user_details_by_teacher_id(self, school_id, teacher_id):\n        \"\"\"Get user details by teacher ID (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Getting user details for teacher={teacher_id}, school={school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_user_details_by_teacher_id: DB connection failed for school {school_id}\")\n                return None\n\n            query = \"SELECT id, name, phone, teacher_id, category FROM users WHERE school_id = %s AND teacher_id = %s LIMIT 1\"\n            params = (school_id, teacher_id)\n            result = read_query(connection, query, params)\n\n            if result:\n                user_data = result[0]\n                print(f\"DEBUG DataManager.get_user_details_by_teacher_id: Found user: {user_data.get('name')}\")\n                return user_data\n            else:\n                print(f\"INFO DataManager.get_user_details_by_teacher_id: No user found for teacher_id '{teacher_id}'\")\n                return None\n        except Exception as e:\n            print(f\"ERROR DataManager.get_user_details_by_teacher_id: Exception for teacher {teacher_id}: {e}\")\n            traceback.print_exc()\n            return None\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_user_details_by_teacher_id: Failed to close connection: {e_close}\")\n\n    def get_user_details(self, school_id, username):\n        \"\"\"Get admin user details by username for a specific school from the database (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Getting admin user details for username={username}, school={school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_user_details: DB connection failed for school {school_id}\")\n                return None\n\n            print(f\"DEBUG DataManager.get_user_details: DB connection obtained\")\n\n            query = \"SELECT id, username, name, phone, email, password FROM admins WHERE school_id = %s AND username = %s\"\n            params = (school_id, username)\n            result = read_query(connection, query, params)\n\n            print(f\"DEBUG DataManager.get_user_details: read_query returned: {result}\")\n\n            if result:\n                user_data = result[0]\n                print(f\"DEBUG DataManager.get_user_details: Found user: {user_data.get('name')}\")\n                return user_data\n            else:\n                print(f\"INFO DataManager.get_user_details: No admin user found for username '{username}' in school '{school_id}'\")\n                return None\n        except Exception as e:\n            print(f\"ERROR DataManager.get_user_details: Exception for username {username} in school {school_id}: {e}\")\n            import traceback\n            traceback.print_exc()\n            return None\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                    print(f\"DEBUG DataManager.get_user_details: Connection closed\")\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_user_details: Failed to close connection: {e_close}\")\n\n    def get_attendance(self, school_id, teacher_id, date_str):\n        \"\"\"Get attendance record (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Getting attendance for teacher={teacher_id}, date={date_str}, school={school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_attendance: DB connection failed for school {school_id}\")\n                return None\n\n            query = \"SELECT * FROM attendance WHERE school_id = %s AND teacher_id = %s AND date = %s LIMIT 1\"\n            params = (school_id, teacher_id, date_str)\n            result = read_query(connection, query, params)\n\n            if result:\n                attendance_record = result[0]\n                print(f\"DEBUG DataManager.get_attendance: Found attendance record for {teacher_id}\")\n                return attendance_record\n            else:\n                print(f\"INFO DataManager.get_attendance: No attendance found for teacher {teacher_id} on {date_str}\")\n                return None\n        except Exception as e:\n            print(f\"ERROR DataManager.get_attendance: Exception for teacher {teacher_id}: {e}\")\n            traceback.print_exc()\n            return None\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_attendance: Failed to close connection: {e_close}\")\n\n    def has_attendance(self, school_id, teacher_id, date_str):\n        \"\"\"Check if attendance exists (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Checking attendance for teacher={teacher_id}, date={date_str}, school={school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.has_attendance: DB connection failed for school {school_id}\")\n                return False\n\n            query = \"SELECT COUNT(*) as count FROM attendance WHERE school_id = %s AND teacher_id = %s AND date = %s\"\n            params = (school_id, teacher_id, date_str)\n            result = read_query(connection, query, params)\n\n            if result:\n                count = result[0]['count']\n                has_record = count > 0\n                print(f\"DEBUG DataManager.has_attendance: Teacher {teacher_id} has attendance: {has_record}\")\n                return has_record\n            else:\n                print(f\"INFO DataManager.has_attendance: No attendance check result for teacher {teacher_id}\")\n                return False\n        except Exception as e:\n            print(f\"ERROR DataManager.has_attendance: Exception for teacher {teacher_id}: {e}\")\n            traceback.print_exc()\n            return False\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.has_attendance: Failed to close connection: {e_close}\")\n\n    def get_attendance_report(self, school_id, start_date=None, end_date=None, teacher_id_filter=None):\n        \"\"\"Get attendance report (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Getting attendance report for school={school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_attendance_report: DB connection failed for school {school_id}\")\n                return []\n\n            query = \"SELECT * FROM attendance WHERE school_id = %s\"\n            params = [school_id]\n            \n            if start_date:\n                query += \" AND date >= %s\"\n                params.append(str(start_date))\n            if end_date:\n                query += \" AND date <= %s\"\n                params.append(str(end_date))\n            if teacher_id_filter:\n                query += \" AND teacher_id = %s\"\n                params.append(teacher_id_filter)\n            \n            query += \" ORDER BY date DESC, timestamp DESC\"\n            result = read_query(connection, query, params)\n            \n            if result:\n                report_df = pd.DataFrame(result)\n                print(f\"DEBUG DataManager.get_attendance_report: Found {len(report_df)} attendance records.\")\n                return report_df\n            else:\n                print(f\"INFO DataManager.get_attendance_report: No attendance records found for the given criteria.\")\n                return pd.DataFrame() # Return an empty DataFrame\n        except Exception as e:\n            print(f\"ERROR DataManager.get_attendance_report: An unexpected error occurred: {e}\")\n            traceback.print_exc()\n            return pd.DataFrame() # Return an empty DataFrame on error\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_attendance_report: Failed to close connection: {e_close}\")\n                    \n    def mark_attendance(self, school_id, teacher_id, date_str, status, is_auto_mark=False):\n        \"\"\"Mark attendance (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Marking attendance for teacher={teacher_id}, status={status}, school={school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.mark_attendance: DB connection failed for school {school_id}\")\n                return False\n\n            query = \"\"\"INSERT INTO attendance (school_id, teacher_id, date, status, timestamp, is_auto) \n                       VALUES (%s, %s, %s, %s, %s, %s)\n                       ON DUPLICATE KEY UPDATE status = VALUES(status), timestamp = VALUES(timestamp), is_auto = VALUES(is_auto)\"\"\"\n            params = (school_id, teacher_id, date_str, status, datetime.now(), is_auto_mark)\n            success = execute_query(connection, query, params)\n            \n            if success:\n                print(f\"SUCCESS DataManager.mark_attendance: Marked {teacher_id} as {status}\")\n            return success\n        except Exception as e:\n            print(f\"ERROR DataManager.mark_attendance: Exception for teacher {teacher_id}: {e}\")\n            traceback.print_exc()\n            return False\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.mark_attendance: Failed to close connection: {e_close}\")\n\n    def suspend_arrangements(self, school_id, date_obj):\n        \"\"\"Suspend arrangements for a date (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Suspending arrangements for school={school_id}, date={date_obj}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.suspend_arrangements: DB connection failed for school {school_id}\")\n                return False\n\n            date_str = str(date_obj)\n            query = \"INSERT IGNORE INTO suspended_dates (school_id, date) VALUES (%s, %s)\"\n            params = (school_id, date_str)\n            success = execute_query(connection, query, params)\n\n            if success:\n                print(f\"INFO DataManager.suspend_arrangements: Successfully suspended arrangements for {date_str}\")\n            return success\n        except Exception as e:\n            print(f\"ERROR DataManager.suspend_arrangements: Exception for school {school_id}: {e}\")\n            traceback.print_exc()\n            return False\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.suspend_arrangements: Failed to close connection: {e_close}\")\n\n    def resume_arrangements(self, school_id, date_obj):\n        \"\"\"Resume arrangements for a date (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Resuming arrangements for school={school_id}, date={date_obj}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.resume_arrangements: DB connection failed for school {school_id}\")\n                return False\n\n            date_str = str(date_obj)\n            query = \"DELETE FROM suspended_dates WHERE school_id = %s AND date = %s\"\n            params = (school_id, date_str)\n            success = execute_query(connection, query, params)\n\n            if success:\n                print(f\"INFO DataManager.resume_arrangements: Successfully resumed arrangements for {date_str}\")\n            return success\n        except Exception as e:\n            print(f\"ERROR DataManager.resume_arrangements: Exception for school {school_id}: {e}\")\n            traceback.print_exc()\n            return False\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.resume_arrangements: Failed to close connection: {e_close}\")\n\n    def get_recent_attendance(self, school_id, limit=20):\n        \"\"\"Get recent attendance records for a specific school from the database.\"\"\"\n        print(\n            f\"DEBUG DataManager: Getting recent attendance for school={school_id}, limit={limit}\"\n        )\n        connection = None  # Initialize connection\n        attendance_df = pd.DataFrame()  # Initialize return as empty DataFrame\n\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(\n                    f\"ERROR DataManager.get_recent_attendance: DB connection failed for school {school_id}. Cannot fetch recent attendance.\"\n                )\n                return attendance_df  # Return empty DataFrame on connection failure\n\n            print(f\"DEBUG DataManager.get_recent_attendance: DB connection obtained.\")\n\n            query = \"\"\"\n                SELECT date, teacher_id, status, timestamp, is_auto\n                FROM attendance WHERE school_id = %s\n                ORDER BY timestamp DESC LIMIT %s;\n            \"\"\"  # Use date, order by timestamp\n            params = (school_id, int(limit))  # Ensure limit is integer\n\n            result = read_query(connection, query, params)\n\n            if result:\n                attendance_df = pd.DataFrame(result)\n                print(\n                    f\"DEBUG DataManager.get_recent_attendance: Fetched {len(attendance_df)} recent attendance records.\"\n                )\n\n            else:\n                print(\n                    f\"INFO DataManager.get_recent_attendance: No recent attendance records found for school {school_id}.\"\n                )\n                # attendance_df remains empty DataFrame\n\n            return attendance_df  # Return DataFrame (empty or with data)\n\n        except Exception as e:\n            print(\n                f\"ERROR DataManager.get_recent_attendance: Unexpected error getting recent attendance for school {school_id}: {e}\"\n            )\n            import traceback\n\n            traceback.print_exc()\n            return attendance_df  # Return empty DataFrame on error\n\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                    print(\n                        f\"DEBUG DataManager.get_recent_attendance: Connection closed.\"\n                    )\n                except Error as e:\n                    print(\n                        f\"ERROR DataManager.get_recent_attendance: Failed to close connection: {e}\"\n                    )\n\n    def create_manual_arrangement(\n        self,\n        school_id,\n        absent_teacher,\n        absent_name,\n        absent_category,\n        replacement_teacher,\n        replacement_name,\n        replacement_category,\n        period,\n        class_name,\n        current_date=None,\n        status=\"MANUAL\",\n        match_quality=\"Manual\",\n    ):\n        \"\"\"Create a manual arrangement for a specific period in the database.\"\"\"\n        print(\n            f\"DEBUG DataManager: Creating manual arrangement for school: {school_id}, absent={absent_teacher}, replacement={replacement_teacher}, period={period}\"\n        )\n        save_success = False\n        try:\n            date_to_save = current_date if current_date is not None else get_ist_today()\n            date_str = str(date_to_save)\n\n            arrangement = {\n                \"school_id\": school_id,\n                \"date\": date_str,\n                \"absent_teacher\": absent_teacher,\n                \"absent_name\": absent_name,\n                \"absent_category\": absent_category,\n                \"replacement_teacher\": replacement_teacher,\n                \"replacement_name\": replacement_name,\n                \"replacement_category\": replacement_category,\n                \"class\": class_name,\n                \"period\": period,\n                \"status\": status,\n                \"match_quality\": match_quality,\n            }\n\n            save_success = self._save_arrangements([arrangement])\n\n            if save_success:\n                print(\n                    f\"INFO DataManager: Manual arrangement saved successfully for school {school_id}.\"\n                )\n                if replacement_teacher:\n                    self.update_teacher_workload(school_id, replacement_teacher)\n                \n                # Trigger WhatsApp notification for manual arrangement\n                if replacement_teacher and replacement_name:\n                    school_details = self.get_school_details(school_id)\n                    school_name = school_details.get(\"school_name\", \"Your School\") if school_details else \"Your School\"\n                    teacher_details = self.get_user_details_by_teacher_id(school_id, replacement_teacher)\n                    if teacher_details and teacher_details.get(\"phone\"):\n                        manual_detail_text = f\"Period {period}: {class_name}\"\n                        whatsapp_service.send_manual_arrangement_notification(\n                            replacement_name,\n                            teacher_details.get(\"phone\"),\n                            manual_detail_text,\n                            school_name\n                        )\n            else:\n                print(\n                    f\"ERROR DataManager: Failed to save manual arrangement for school {school_id}.\"\n                )\n            return save_success\n        except Exception as e:\n            print(\n                f\"CRITICAL ERROR DataManager: Unexpected error creating manual arrangement for school {school_id}: {e}\"\n            )\n            traceback.print_exc()\n            return False\n\n    def get_teacher_workload(self, school_id, teacher_id):\n        \"\"\"Get teacher workload (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Getting workload for teacher={teacher_id}, school={school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_teacher_workload: DB connection failed for school {school_id}\")\n                return 0\n\n            query = \"SELECT workload_count FROM workload_counter WHERE school_id = %s AND teacher_id = %s LIMIT 1\"\n            params = (school_id, teacher_id)\n            result = read_query(connection, query, params)\n            \n            if result:\n                workload = result[0]['workload_count']\n                print(f\"DEBUG DataManager.get_teacher_workload: Teacher {teacher_id} has workload {workload}\")\n                return workload\n            else:\n                print(f\"DEBUG DataManager.get_teacher_workload: No workload found for teacher {teacher_id}\")\n                return 0\n        except Exception as e:\n            print(f\"ERROR DataManager.get_teacher_workload: Exception for teacher {teacher_id}: {e}\")\n            traceback.print_exc()\n            return 0\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_teacher_workload: Failed to close connection: {e_close}\")\n\n    def get_school_details(self, school_id):\n        \"\"\"Get school details (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Getting school details for school={school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_school_details: DB connection failed for school {school_id}\")\n                return None\n\n            query = \"SELECT * FROM schools WHERE school_id = %s LIMIT 1\"\n            params = (school_id,)\n            result = read_query(connection, query, params)\n            \n            if result:\n                school_details = result[0]\n                print(f\"DEBUG DataManager.get_school_details: Found school: {school_details.get('school_name')}\")\n                return school_details\n            else:\n                print(f\"INFO DataManager.get_school_details: No school found for school_id '{school_id}'\")\n                return None\n        except Exception as e:\n            print(f\"ERROR DataManager.get_school_details: Exception for school {school_id}: {e}\")\n            traceback.print_exc()\n            return None\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_school_details: Failed to close connection: {e_close}\")\n\n    def get_school_api_key(self, school_id):\n        \"\"\"Get school API key (Railway optimized)\"\"\"\n        print(f\"DEBUG DataManager: Fetching API key for school_id={school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.get_school_api_key: DB connection failed for school {school_id}\")\n                return None\n\n            query = \"SELECT api_key FROM schools WHERE school_id = %s LIMIT 1\"\n            params = (school_id,)\n            result = read_query(connection, query, params)\n\n            if result and result[0].get(\"api_key\"):\n                api_key = result[0][\"api_key\"]\n                print(f\"DEBUG DataManager.get_school_api_key: Found API key for school {school_id}\")\n                return api_key\n            else:\n                print(f\"INFO DataManager.get_school_api_key: No API key found for school {school_id}\")\n                return None\n        except Exception as e:\n            print(f\"ERROR DataManager.get_school_api_key: Exception for school {school_id}: {e}\")\n            traceback.print_exc()\n            return None\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.get_school_api_key: Failed to close connection: {e_close}\")\n\n    def bulk_mark_attendance(self, school_id, attendance_data_list):\n        \"\"\"Bulk mark attendance (Railway optimized)\"\"\"\n        if not attendance_data_list:\n            return 0\n\n        print(f\"DEBUG DataManager: Bulk marking attendance for {len(attendance_data_list)} teachers in school {school_id}\")\n        connection = None\n        try:\n            connection = create_db_connection()\n            if connection is None or not connection.is_connected():\n                print(f\"ERROR DataManager.bulk_mark_attendance: DB connection failed for school {school_id}\")\n                return 0\n\n            cursor = connection.cursor()\n            db_timestamp = datetime.now()\n            today_str = str(get_ist_today())\n\n            update_query = \"\"\"\n                INSERT INTO attendance (school_id, teacher_id, date, status, timestamp, is_auto)\n                VALUES (%s, %s, %s, %s, %s, %s)\n                ON DUPLICATE KEY UPDATE status = VALUES(status), timestamp = VALUES(timestamp), is_auto = VALUES(is_auto)\n            \"\"\"\n\n            records_to_process = []\n            for teacher_id, status in attendance_data_list:\n                records_to_process.append(\n                    (school_id, teacher_id, today_str, status, db_timestamp, False)\n                )\n\n            cursor.executemany(update_query, records_to_process)\n            connection.commit()\n\n            processed_count = cursor.rowcount\n            print(f\"SUCCESS: Bulk marked attendance for {processed_count} records\")\n            return processed_count\n\n        except Exception as e:\n            print(f\"ERROR DataManager.bulk_mark_attendance: Exception: {e}\")\n            traceback.print_exc()\n            if connection:\n                connection.rollback()\n            return 0\n        finally:\n            if connection and connection.is_connected():\n                try:\n                    connection.close()\n                except Exception as e_close:\n                    print(f\"ERROR DataManager.bulk_mark_attendance: Failed to close connection: {e_close}\")\n\n    def bulk_update_attendance(self, school_id, attendance_updates_list, is_auto=False):\n        \"\"\"\n        ✅ FINAL VERSION: Ek saath kai teachers ki attendance ko INSERT ya UPDATE karta hai.\n        Requires a UNIQUE KEY on (school_id, teacher_id, date) in the attendance table.\n        \"\"\"\n        if not attendance_updates_list: \n            return 0\n        \n        connection = create_db_connection()\n        if not connection: \n            return 0\n            \n        try:\n            db_timestamp = datetime.now()\n            today_str = get_ist_today().strftime('%Y-%m-%d')\n            \n            query = \"\"\"\n                INSERT INTO attendance (school_id, teacher_id, date, status, timestamp, is_auto)\n                VALUES (%s, %s, %s, %s, %s, %s)\n                ON DUPLICATE KEY UPDATE \n                    status = VALUES(status), \n                    timestamp = VALUES(timestamp), \n                    is_auto = VALUES(is_auto);\n            \"\"\"\n            \n            records_to_process = [\n                (school_id, teacher_id, today_str, status, db_timestamp, is_auto) \n                for teacher_id, status in attendance_updates_list\n            ]\n            \n            with connection.cursor() as cursor:\n                cursor.executemany(query, records_to_process)\n                connection.commit()\n                \n                # MySQL mein, ON DUPLICATE KEY UPDATE ke liye rowcount 1 (insert) ya 2 (update) return karta hai.\n                # Hum actual process kiye gaye records ki sankhya return karenge.\n                print(f\"SUCCESS: Bulk update completed. DB Rowcount: {cursor.rowcount}\")\n                return len(records_to_process)\n                \n        except Error as e:\n            print(f\"CRITICAL ERROR in bulk_update_attendance: {e}\")\n            if connection: connection.rollback()\n            return 0\n        finally:\n            if connection: connection.close()\n    def process_bulk_arrangements(self, school_id, list_of_absent_teachers, arrangement_date):\n        \"\"\"\n        ✅ FINAL GOLDEN FIX v4: Creates arrangements period-by-period, updating the busy list in real-time within the period loop.\n        \"\"\"\n        if not list_of_absent_teachers:\n            print(\"INFO: No absent teachers for bulk arrangement.\")\n            return True\n        print(f\"--- ✅ Starting FINAL Bulk Arrangement Processing v4 for {len(list_of_absent_teachers)} teachers ---\")\n        \n        try:\n            if self.is_arrangement_suspended(school_id, arrangement_date):\n                print(f\"INFO: Arrangements suspended for {arrangement_date}.\")\n                return True\n\n            schedules_df = self.load_teacher_schedules(school_id, specific_day=arrangement_date.strftime('%A'))\n            if schedules_df.empty:\n                print(f\"ERROR: No schedule for {arrangement_date.strftime('%A')}. Cannot process.\")\n                return False\n\n            all_arrangements_to_save = []\n            all_replacements_to_notify = {}\n            \n            self.delete_arrangements_for_date(school_id, arrangement_date)\n            \n            # --- ✅ PERIOD-BY-PERIOD LOOP (YAHAN HAI ASLI FIX) ---\n            for period in range(1, 8):\n                print(f\"\\n--- Processing Arrangements for Period {period} ---\")\n                \n                # Har naye period ke liye, \"is period mein busy\" list ko khaali karo\n                assigned_in_this_period = []\n\n                for absent_teacher_id in list_of_absent_teachers:\n                    \n                    absent_row = schedules_df[schedules_df[\"teacher_id\"].astype(str).str.upper() == str(absent_teacher_id).upper()]\n                    if absent_row.empty: continue\n                    absent_details = absent_row.iloc[0]\n                    \n                    class_info = absent_details.get(f\"period{period}\", 'FREE')\n                    if not class_info or str(class_info).strip().upper() == \"FREE\":\n                        continue\n                        \n                    # Replacement dhoondho. Is baar hum 'assigned_in_this_period' list bhej rahe hain.\n                    repl_id, repl_cat, repl_name, absent_name, match_quality = self.arrangement_logic.find_replacement_teacher(\n                        school_id=school_id, \n                        absent_teacher_id=absent_teacher_id, \n                        period=period,\n                        schedules_df=schedules_df,\n                        all_absent_today=list_of_absent_teachers,\n                        assigned_in_this_period=assigned_in_this_period  # <<< YEH HAI ASLI BADLAAV\n                    )\n                    \n                    # ✅ AGAR REPLACEMENT MILA, TO USE TURANT BUSY LIST MEIN DAALO\n                    if repl_id:\n                        assigned_in_this_period.append(repl_id)\n\n                    arrangement_dict = {\n                        \"school_id\": school_id, \"date\": str(arrangement_date),\n                        \"absent_teacher\": absent_teacher_id, \"absent_name\": absent_name,\n                        \"absent_category\": absent_details.get(\"category\"),\n                        \"replacement_teacher\": repl_id, \"replacement_name\": repl_name or \"UNASSIGNED\",\n                        \"replacement_category\": repl_cat, \"class\": class_info, \"period\": period,\n                        \"status\": \"ASSIGNED\" if repl_id else \"UNASSIGNED\",\n                        \"match_quality\": match_quality,\n                    }\n                    all_arrangements_to_save.append(arrangement_dict)\n\n                    if repl_id:\n                        if repl_id not in all_replacements_to_notify:\n                            all_replacements_to_notify[repl_id] = {\"name\": repl_name, \"details\": []}\n                        arrangement_line = f\"Period {period}: {class_info} (for {absent_name})\"\n                        all_replacements_to_notify[repl_id][\"details\"].append(arrangement_line)\n            \n            if all_arrangements_to_save:\n                save_success = self._save_arrangements(all_arrangements_to_save)\n                if save_success:\n                    print(f\"SUCCESS: Bulk saved {len(all_arrangements_to_save)} new arrangement rows.\")\n                    self.send_bulk_whatsapp_notifications(school_id, all_replacements_to_notify)\n                    return True\n            return False\n        except Exception as e:\n            print(f\"CRITICAL ERROR in process_bulk_arrangements: {e}\")\n            traceback.print_exc()\n            return False\n    def delete_arrangements_for_date(self, school_id, date_to_delete):\n        \"\"\"Ek specific date ke saare arrangements delete karta hai.\"\"\"\n        connection = create_db_connection()\n        if not connection: return False\n        try:\n            query = \"DELETE FROM arrangements WHERE school_id = %s AND date = %s\"\n            return execute_query(connection, query, (school_id, str(date_to_delete)))\n        finally:\n            if connection: connection.close()\n\n    def send_bulk_whatsapp_notifications(self, school_id, replacements_to_notify):\n        \"\"\"Ek saath saare replacement teachers ko WhatsApp bhejta hai.\"\"\"\n        if not replacements_to_notify: return\n        school_details = self.get_school_details(school_id)\n        school_name = school_details.get(\"school_name\", \"Your School\") if school_details else \"Your School\"\n        for repl_id, data in replacements_to_notify.items():\n            teacher_details = self.get_user_details_by_teacher_id(school_id, repl_id)\n            if teacher_details and teacher_details.get(\"phone\"):\n                whatsapp_service.send_arrangement_notification(data[\"name\"], teacher_details.get(\"phone\"), data[\"details\"], school_name)\n","size_bytes":66555},"backend/existing_modules/utils.py":{"content":"\r\nimport streamlit as st\r\nfrom datetime import datetime\r\nimport pytz\r\ndef get_ist_today():\r\n    \"\"\"\r\n    Returns the current date in the 'Asia/Kolkata' (IST) timezone.\r\n    This function is crucial for ensuring date consistency across different server timezones.\r\n    \"\"\"\r\n    # Define the Indian Standard Timezone\r\n    ist = pytz.timezone('Asia/Kolkata')\r\n    \r\n    # Get the current time in UTC and then convert it to IST\r\n    ist_now = datetime.now(ist)\r\n    \r\n    # Return only the date part\r\n    return ist_now.date()\r\n","size_bytes":524},"backend/existing_modules/whatsapp_service.py":{"content":"import requests\r\nimport json\r\nimport time\r\n\r\n# ==============================================================================\r\n# === MSG91 KI DETAILS YAHAN DAALEIN ===\r\n# ==============================================================================\r\n\r\n# # Aapka MSG91 ka Authentication Key\r\nAUTH_KEY = \"444852AYpUlDhd685ec94eP1\"\r\n\r\n# Aapka WhatsApp number jo MSG91 par register hai (e.g., '917599377142')\r\nINTEGRATED_NUMBER = \"917599377142\"\r\n\r\n# Har template ke liye Template Name\r\nTEMPLATE_ARRANGEMENT = \"teacher_daily_arrangements\"\r\nTEMPLATE_MANUAL = \"manual_teacher_arrangement\"\r\nTEMPLATE_ABSENT = \"teacher_absence_confirmation\"\r\n\r\n# ==============================================================================\r\n\r\n\r\ndef _send_msg91_request(payload):\r\n    \"\"\"\r\n    Internal function to send API request to MSG91 using the correct Bulk Template API endpoint.\r\n    Includes retry logic for better reliability.\r\n    \"\"\"\r\n    # Sahi API Endpoint (Bulk wala)\r\n    url = \"https://api.msg91.com/api/v5/whatsapp/whatsapp-outbound-message/bulk/\"\r\n    headers = {\"authkey\": AUTH_KEY, \"Content-Type\": \"application/json\"}\r\n\r\n    max_retries = 3\r\n    for attempt in range(max_retries):\r\n        try:\r\n            print(\r\n                f\"DEBUG: Sending MSG91 Bulk Template payload (Attempt {attempt + 1}/{max_retries}): {json.dumps(payload, indent=2)}\"\r\n            )\r\n            response = requests.post(\r\n                url, headers=headers, data=json.dumps(payload), timeout=30\r\n            )\r\n            response.raise_for_status()\r\n\r\n            print(\r\n                f\"SUCCESS: MSG91 API call successful on attempt {attempt + 1}. Response: {response.text}\"\r\n            )\r\n            return True\r\n\r\n        except requests.exceptions.Timeout as e:\r\n            print(f\"WARNING: MSG91 Timeout on attempt {attempt + 1}. Error: {e}\")\r\n            if attempt == max_retries - 1:\r\n                print(\"ERROR: MSG91 request failed after all retries due to timeout.\")\r\n                return False\r\n            time.sleep(5 * (attempt + 1))\r\n\r\n        except requests.exceptions.RequestException as e:\r\n            print(\r\n                f\"ERROR: Failed to send MSG91 message on attempt {attempt + 1}. Error: {e}\"\r\n            )\r\n            if \"response\" in locals() and hasattr(response, \"text\"):\r\n                print(f\"Response Body from MSG91: {response.text}\")\r\n\r\n            if \"response\" in locals() and response.status_code in [401, 403, 400]:\r\n                print(\r\n                    \"ERROR: Unrecoverable client error (e.g., Invalid AuthKey or malformed JSON). Aborting retries.\"\r\n                )\r\n                return False\r\n\r\n            if attempt == max_retries - 1:\r\n                print(\"ERROR: MSG91 request failed after all retries.\")\r\n                return False\r\n            time.sleep(5 * (attempt + 1))\r\n\r\n    return False\r\n\r\n\r\ndef send_arrangement_notification(\r\n    replacement_teacher_name,\r\n    replacement_teacher_phone,\r\n    arrangement_details_list,\r\n    school_name,\r\n):\r\n    \"\"\"Auto-arrangement ka message bhejta hai (SAHI FORMAT MEIN).\"\"\"\r\n    if not str(replacement_teacher_phone).strip():\r\n        print(\"ERROR (Arrangement): Replacement teacher phone number is missing.\")\r\n        return\r\n\r\n    # Saare arrangement details ko ek hi string me jodo\r\n    arrangement_text = \"\\\\n\".join(\r\n        arrangement_details_list\r\n    )  # Use \\\\n for newlines in MSG91\r\n\r\n    # Sahi payload banayein\r\n    payload = {\r\n        \"integrated_number\": INTEGRATED_NUMBER,\r\n        \"content_type\": \"template\",\r\n        \"payload\": {\r\n            \"messaging_product\": \"whatsapp\",\r\n            \"type\": \"template\",\r\n            \"template\": {\r\n                \"name\": TEMPLATE_ARRANGEMENT,\r\n                \"language\": {\"code\": \"en\"},\r\n                \"to_and_components\": [\r\n                    {\r\n                        \"to\": [\r\n                            f\"91{str(replacement_teacher_phone).strip()}\"\r\n                        ],  # Country code ke saath\r\n                        \"components\": {\r\n                            \"body_1\": {\r\n                                \"type\": \"text\",\r\n                                \"value\": replacement_teacher_name,\r\n                            },\r\n                            \"body_2\": {\"type\": \"text\", \"value\": \"today\"},\r\n                            \"body_3\": {\"type\": \"text\", \"value\": arrangement_text},\r\n                            \"body_4\": {\"type\": \"text\", \"value\": school_name},\r\n                        },\r\n                    }\r\n                ],\r\n            },\r\n        },\r\n    }\r\n    _send_msg91_request(payload)\r\n\r\n\r\ndef send_manual_arrangement_notification(\r\n    teacher_name, teacher_phone, manual_arrangement_detail, school_name\r\n):\r\n    \"\"\"Manual arrangement ka message bhejta hai (SAHI FORMAT MEIN).\"\"\"\r\n    if not str(teacher_phone).strip():\r\n        print(\"ERROR (Manual): Teacher phone number is missing.\")\r\n        return\r\n\r\n    payload = {\r\n        \"integrated_number\": INTEGRATED_NUMBER,\r\n        \"content_type\": \"template\",\r\n        \"payload\": {\r\n            \"messaging_product\": \"whatsapp\",\r\n            \"type\": \"template\",\r\n            \"template\": {\r\n                \"name\": TEMPLATE_MANUAL,\r\n                \"language\": {\"code\": \"en\"},\r\n                \"to_and_components\": [\r\n                    {\r\n                        \"to\": [f\"91{str(teacher_phone).strip()}\"],\r\n                        \"components\": {\r\n                            \"body_1\": {\"type\": \"text\", \"value\": teacher_name},\r\n                            \"body_2\": {\"type\": \"text\", \"value\": \"today\"},\r\n                            \"body_3\": {\r\n                                \"type\": \"text\",\r\n                                \"value\": manual_arrangement_detail,\r\n                            },\r\n                            \"body_4\": {\"type\": \"text\", \"value\": school_name},\r\n                        },\r\n                    }\r\n                ],\r\n            },\r\n        },\r\n    }\r\n    _send_msg91_request(payload)\r\n\r\n\r\ndef send_absent_confirmation(teacher_name, teacher_phone, school_name):\r\n    \"\"\"Absent mark hone ka confirmation message bhejta hai (SAHI FORMAT MEIN).\"\"\"\r\n    if not str(teacher_phone).strip():\r\n        print(\"ERROR (Absent): Teacher phone number is missing.\")\r\n        return\r\n\r\n    payload = {\r\n        \"integrated_number\": INTEGRATED_NUMBER,\r\n        \"content_type\": \"template\",\r\n        \"payload\": {\r\n            \"messaging_product\": \"whatsapp\",\r\n            \"type\": \"template\",\r\n            \"template\": {\r\n                \"name\": TEMPLATE_ABSENT,\r\n                \"language\": {\"code\": \"en\"},\r\n                \"to_and_components\": [\r\n                    {\r\n                        \"to\": [f\"91{str(teacher_phone).strip()}\"],\r\n                        \"components\": {\r\n                            \"body_1\": {\"type\": \"text\", \"value\": teacher_name},\r\n                            \"body_2\": {\"type\": \"text\", \"value\": \"today\"},\r\n                            \"body_3\": {\"type\": \"text\", \"value\": school_name},\r\n                        },\r\n                    }\r\n                ],\r\n            },\r\n        },\r\n    }\r\n    _send_msg91_request(payload)\r\n# test line to trigger git","size_bytes":7144},"backend/schedules/__init__.py":{"content":"","size_bytes":0},"backend/schedules/admin.py":{"content":"from django.contrib import admin\n\n# Register your models here.\n","size_bytes":63},"backend/schedules/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass SchedulesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'schedules'\n","size_bytes":150},"backend/schedules/models.py":{"content":"from django.db import models\nfrom authentication.models import School\n\n# Note: Schedule models are already defined in teachers/models.py\n# This file can contain schedule-specific views or additional models if needed\n\nclass ScheduleTemplate(models.Model):\n    \"\"\"Template for creating schedules\"\"\"\n    id = models.AutoField(primary_key=True)\n    school = models.ForeignKey(School, on_delete=models.CASCADE, db_column='school_id')\n    template_name = models.CharField(max_length=255)\n    description = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        db_table = 'schedule_templates'\n    \n    def __str__(self):\n        return f\"{self.template_name} - {self.school.school_name}\"\n","size_bytes":806},"backend/schedules/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"backend/schedules/urls.py":{"content":"from django.urls import path\n\nurlpatterns = [\n    # Schedules URLs - to be implemented\n]","size_bytes":88},"backend/schedules/views.py":{"content":"from django.shortcuts import render\n\n# Create your views here.\n","size_bytes":63},"backend/school_management_system/__init__.py":{"content":"","size_bytes":0},"backend/school_management_system/asgi.py":{"content":"\"\"\"\nASGI config for school_management_system project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.2/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_management_system.settings')\n\napplication = get_asgi_application()\n","size_bytes":425},"backend/school_management_system/settings.py":{"content":"\"\"\"\nDjango settings for school_management_system project.\n\nGenerated by 'django-admin startproject' using Django 5.2.5.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.2/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.2/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\nimport os\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-yr%m%v)9ehjvpt$(vzcsi02cep2(2s$gt4391xc#@(339n&vv6'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']  # Allow all hosts for development\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'corsheaders',\n    'authentication',\n    'teachers',\n    'arrangements',\n    'attendance',\n    'schedules',\n]\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'school_management_system.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'school_management_system.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\n\n# Railway MySQL Database Configuration\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'railway',\n        'USER': 'root',\n        'PASSWORD': 'oedglLlOuKszsGcPupOFjEzFoLDGBeWj',\n        'HOST': 'nozomi.proxy.rlwy.net',\n        'PORT': '27878',\n        'OPTIONS': {\n            'charset': 'utf8mb4',\n            'autocommit': True,\n            'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\",\n            'connect_timeout': 60,\n        },\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'Asia/Kolkata'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n# Django REST Framework Configuration\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 20\n}\n\n# CORS Settings for React Frontend\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:3000\",\n    \"https://localhost:3000\",\n]\n\nCORS_ALLOW_CREDENTIALS = True\n\nCORS_ALLOW_ALL_ORIGINS = True  # For development only\n","size_bytes":4590},"backend/school_management_system/urls.py":{"content":"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/auth/', include('authentication.urls')),\n    path('api/teachers/', include('teachers.urls')),\n    path('api/arrangements/', include('arrangements.urls')),\n    path('api/attendance/', include('attendance.urls')),\n    path('api/schedules/', include('schedules.urls')),\n]\n","size_bytes":409},"backend/school_management_system/wsgi.py":{"content":"\"\"\"\nWSGI config for school_management_system project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_management_system.settings')\n\napplication = get_wsgi_application()\n","size_bytes":425},"backend/school_system/__init__.py":{"content":"\n","size_bytes":1},"backend/school_system/apps.py":{"content":"\nfrom django.apps import AppConfig\n\n\nclass SchoolSystemConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'school_system'\n","size_bytes":158},"backend/school_system/serializers.py":{"content":"\nfrom rest_framework import serializers\nfrom authentication.models import School\n\n\nclass SchoolSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = School\n        fields = ['school_id', 'school_name']\n","size_bytes":221},"backend/school_system/urls.py":{"content":"\nfrom django.urls import path\nfrom .views import SchoolListView\n\nurlpatterns = [\n    path('schools/', SchoolListView.as_view(), name='school-list'),\n]\n","size_bytes":151},"backend/school_system/views.py":{"content":"\nfrom rest_framework.generics import ListAPIView\nfrom rest_framework.permissions import AllowAny\nfrom authentication.models import School\nfrom .serializers import SchoolSerializer\n\n\nclass SchoolListView(ListAPIView):\n    queryset = School.objects.all()\n    serializer_class = SchoolSerializer\n    permission_classes = [AllowAny]\n","size_bytes":329},"backend/teachers/__init__.py":{"content":"","size_bytes":0},"backend/teachers/admin.py":{"content":"from django.contrib import admin\n\n# Register your models here.\n","size_bytes":63},"backend/teachers/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass TeachersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'teachers'\n","size_bytes":148},"backend/teachers/models.py":{"content":"from django.db import models\nfrom authentication.models import School\n\nclass User(models.Model):\n    id = models.AutoField(primary_key=True)\n    school = models.ForeignKey(School, on_delete=models.CASCADE, db_column='school_id')\n    teacher_id = models.CharField(max_length=255)\n    name = models.CharField(max_length=255)\n    phone = models.CharField(max_length=20, blank=True, null=True)\n    category = models.CharField(max_length=100, blank=True, null=True)\n    biometric_code = models.CharField(max_length=255, blank=True, null=True)\n    \n    class Meta:\n        db_table = 'users'\n        unique_together = ('school', 'teacher_id')\n    \n    def __str__(self):\n        return f\"{self.name} ({self.teacher_id})\"\n\nclass DailySchedule(models.Model):\n    id = models.AutoField(primary_key=True)\n    school = models.ForeignKey(School, on_delete=models.CASCADE, db_column='school_id')\n    day_of_week = models.CharField(max_length=20)\n    teacher_id = models.CharField(max_length=255)\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=100, blank=True, null=True)\n    subject = models.CharField(max_length=255, blank=True, null=True)\n    period_number = models.IntegerField()\n    class_info = models.CharField(max_length=255, blank=True, null=True)\n    \n    class Meta:\n        db_table = 'daily_schedules'\n    \n    def __str__(self):\n        return f\"{self.name} - {self.day_of_week} Period {self.period_number}\"\n\nclass SchedulesSummary(models.Model):\n    id = models.AutoField(primary_key=True)\n    school = models.ForeignKey(School, on_delete=models.CASCADE, db_column='school_id')\n    teacher_id = models.CharField(max_length=255)\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=100, blank=True, null=True)\n    subject = models.CharField(max_length=255, blank=True, null=True)\n    period1 = models.CharField(max_length=255, blank=True, null=True)\n    period2 = models.CharField(max_length=255, blank=True, null=True)\n    period3 = models.CharField(max_length=255, blank=True, null=True)\n    period4 = models.CharField(max_length=255, blank=True, null=True)\n    period5 = models.CharField(max_length=255, blank=True, null=True)\n    period6 = models.CharField(max_length=255, blank=True, null=True)\n    period7 = models.CharField(max_length=255, blank=True, null=True)\n    \n    class Meta:\n        db_table = 'schedules_summary'\n    \n    def __str__(self):\n        return f\"{self.name} Schedule Summary\"\n\nclass WorkloadCounter(models.Model):\n    id = models.AutoField(primary_key=True)\n    school = models.ForeignKey(School, on_delete=models.CASCADE, db_column='school_id')\n    teacher_id = models.CharField(max_length=255)\n    workload_count = models.IntegerField(default=0)\n    \n    class Meta:\n        db_table = 'workload_counter'\n        unique_together = ('school', 'teacher_id')\n    \n    def __str__(self):\n        return f\"Teacher {self.teacher_id} - Workload: {self.workload_count}\"\n\nclass Substitute(models.Model):\n    id = models.AutoField(primary_key=True)\n    school = models.ForeignKey(School, on_delete=models.CASCADE, db_column='school_id')\n    substitute_id = models.CharField(max_length=255)\n    name = models.CharField(max_length=255)\n    phone = models.CharField(max_length=20, blank=True, null=True)\n    subject_expertise = models.TextField(blank=True, null=True)\n    qualification = models.CharField(max_length=255, blank=True, null=True)\n    availability = models.CharField(max_length=100, default='Available')\n    rating = models.DecimalField(max_digits=3, decimal_places=2, default=0.0)\n    \n    class Meta:\n        db_table = 'substitutes'\n        unique_together = ('school', 'substitute_id')\n    \n    def __str__(self):\n        return f\"{self.name} (Substitute)\"\n","size_bytes":3766},"backend/teachers/serializers.py":{"content":"from rest_framework import serializers\nfrom .models import User, DailySchedule, SchedulesSummary, WorkloadCounter, Substitute\nfrom authentication.models import School\n\nclass UserSerializer(serializers.ModelSerializer):\n    school_name = serializers.CharField(source='school.school_name', read_only=True)\n    \n    class Meta:\n        model = User\n        fields = ['id', 'school', 'school_name', 'teacher_id', 'name', 'phone', 'category', 'biometric_code']\n\nclass DailyScheduleSerializer(serializers.ModelSerializer):\n    school_name = serializers.CharField(source='school.school_name', read_only=True)\n    \n    class Meta:\n        model = DailySchedule\n        fields = ['id', 'school', 'school_name', 'day_of_week', 'teacher_id', 'name', 'category', 'subject', 'period_number', 'class_info']\n\nclass SchedulesSummarySerializer(serializers.ModelSerializer):\n    school_name = serializers.CharField(source='school.school_name', read_only=True)\n    \n    class Meta:\n        model = SchedulesSummary\n        fields = ['id', 'school', 'school_name', 'teacher_id', 'name', 'category', 'subject', \n                 'period1', 'period2', 'period3', 'period4', 'period5', 'period6', 'period7']\n\nclass WorkloadCounterSerializer(serializers.ModelSerializer):\n    school_name = serializers.CharField(source='school.school_name', read_only=True)\n    \n    class Meta:\n        model = WorkloadCounter\n        fields = ['id', 'school', 'school_name', 'teacher_id', 'workload_count']\n\nclass SubstituteSerializer(serializers.ModelSerializer):\n    school_name = serializers.CharField(source='school.school_name', read_only=True)\n    \n    class Meta:\n        model = Substitute\n        fields = ['id', 'school', 'school_name', 'substitute_id', 'name', 'phone', \n                 'subject_expertise', 'qualification', 'availability', 'rating']","size_bytes":1822},"backend/teachers/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"backend/teachers/urls.py":{"content":"\nfrom django.urls import path\n\nurlpatterns = [\n    # Teachers URLs - to be implemented\n]\n","size_bytes":89},"backend/teachers/views.py":{"content":"from rest_framework import status\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated, AllowAny\nfrom rest_framework.response import Response\nfrom django.db.models import Q\nimport sys\nimport os\n\n# Add existing_modules to path to import preserved Python logic\nsys.path.append(os.path.join(os.path.dirname(__file__), '..', 'existing_modules'))\n\nfrom .models import User, DailySchedule, SchedulesSummary, WorkloadCounter, Substitute\nfrom .serializers import UserSerializer, DailyScheduleSerializer, SchedulesSummarySerializer, WorkloadCounterSerializer, SubstituteSerializer\nfrom authentication.models import School\n\n# Import preserved logic\ntry:\n    import data_manager\n    from csv_importer import CSVImporter\nexcept ImportError as e:\n    print(f\"Warning: Could not import preserved logic: {e}\")\n    data_manager = None\n    CSVImporter = None\n\n@api_view(['GET'])\n@permission_classes([AllowAny])  # For development - should be authenticated\ndef get_teachers(request):\n    \"\"\"Get all teachers for a school\"\"\"\n    school_id = request.GET.get('school_id')\n    \n    if not school_id:\n        return Response({\n            'success': False,\n            'error': 'School ID is required'\n        }, status=status.HTTP_400_BAD_REQUEST)\n    \n    try:\n        teachers = User.objects.filter(school_id=school_id)\n        serializer = UserSerializer(teachers, many=True)\n        return Response({\n            'success': True,\n            'teachers': serializer.data\n        })\n    except Exception as e:\n        return Response({\n            'success': False,\n            'error': str(e)\n        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['POST'])\n@permission_classes([AllowAny])\ndef add_teacher(request):\n    \"\"\"Add a new teacher\"\"\"\n    try:\n        serializer = UserSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response({\n                'success': True,\n                'message': 'Teacher added successfully',\n                'teacher': serializer.data\n            }, status=status.HTTP_201_CREATED)\n        else:\n            return Response({\n                'success': False,\n                'error': 'Invalid data',\n                'details': serializer.errors\n            }, status=status.HTTP_400_BAD_REQUEST)\n    except Exception as e:\n        return Response({\n            'success': False,\n            'error': str(e)\n        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['PUT'])\n@permission_classes([AllowAny])\ndef update_teacher(request, teacher_id):\n    \"\"\"Update teacher information\"\"\"\n    try:\n        teacher = User.objects.get(id=teacher_id)\n        serializer = UserSerializer(teacher, data=request.data, partial=True)\n        if serializer.is_valid():\n            serializer.save()\n            return Response({\n                'success': True,\n                'message': 'Teacher updated successfully',\n                'teacher': serializer.data\n            })\n        else:\n            return Response({\n                'success': False,\n                'error': 'Invalid data',\n                'details': serializer.errors\n            }, status=status.HTTP_400_BAD_REQUEST)\n    except User.DoesNotExist:\n        return Response({\n            'success': False,\n            'error': 'Teacher not found'\n        }, status=status.HTTP_404_NOT_FOUND)\n    except Exception as e:\n        return Response({\n            'success': False,\n            'error': str(e)\n        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['DELETE'])\n@permission_classes([AllowAny])\ndef delete_teacher(request, teacher_id):\n    \"\"\"Delete a teacher\"\"\"\n    try:\n        teacher = User.objects.get(id=teacher_id)\n        teacher.delete()\n        return Response({\n            'success': True,\n            'message': 'Teacher deleted successfully'\n        })\n    except User.DoesNotExist:\n        return Response({\n            'success': False,\n            'error': 'Teacher not found'\n        }, status=status.HTTP_404_NOT_FOUND)\n    except Exception as e:\n        return Response({\n            'success': False,\n            'error': str(e)\n        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['GET'])\n@permission_classes([AllowAny])\ndef get_schedule(request):\n    \"\"\"Get schedule for a school\"\"\"\n    school_id = request.GET.get('school_id')\n    day_of_week = request.GET.get('day_of_week')\n    \n    if not school_id:\n        return Response({\n            'success': False,\n            'error': 'School ID is required'\n        }, status=status.HTTP_400_BAD_REQUEST)\n    \n    try:\n        schedules = DailySchedule.objects.filter(school_id=school_id)\n        if day_of_week:\n            schedules = schedules.filter(day_of_week=day_of_week)\n            \n        serializer = DailyScheduleSerializer(schedules, many=True)\n        return Response({\n            'success': True,\n            'schedules': serializer.data\n        })\n    except Exception as e:\n        return Response({\n            'success': False,\n            'error': str(e)\n        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['GET'])\n@permission_classes([AllowAny])\ndef get_workload(request):\n    \"\"\"Get workload counter for teachers\"\"\"\n    school_id = request.GET.get('school_id')\n    \n    if not school_id:\n        return Response({\n            'success': False,\n            'error': 'School ID is required'\n        }, status=status.HTTP_400_BAD_REQUEST)\n    \n    try:\n        workloads = WorkloadCounter.objects.filter(school_id=school_id)\n        serializer = WorkloadCounterSerializer(workloads, many=True)\n        return Response({\n            'success': True,\n            'workloads': serializer.data\n        })\n    except Exception as e:\n        return Response({\n            'success': False,\n            'error': str(e)\n        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['GET'])\n@permission_classes([AllowAny])\ndef get_substitutes(request):\n    \"\"\"Get substitute teachers for a school\"\"\"\n    school_id = request.GET.get('school_id')\n    \n    if not school_id:\n        return Response({\n            'success': False,\n            'error': 'School ID is required'\n        }, status=status.HTTP_400_BAD_REQUEST)\n    \n    try:\n        substitutes = Substitute.objects.filter(school_id=school_id)\n        serializer = SubstituteSerializer(substitutes, many=True)\n        return Response({\n            'success': True,\n            'substitutes': serializer.data\n        })\n    except Exception as e:\n        return Response({\n            'success': False,\n            'error': str(e)\n        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)","size_bytes":6721},"frontend/src/App.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport { Layout, message } from 'antd';\nimport LoginPage from './pages/LoginPage';\nimport Dashboard from './pages/Dashboard';\nimport TeacherManagement from './pages/TeacherManagement';\nimport AttendanceManagement from './pages/AttendanceManagement';\nimport ArrangementManagement from './pages/ArrangementManagement';\nimport ScheduleManagement from './pages/ScheduleManagement';\nimport Reports from './pages/Reports';\nimport { apiService } from './services/apiService';\nimport AppHeader from './components/AppHeader';\nimport AppSidebar from './components/AppSidebar';\n\nconst { Content } = Layout;\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n\n  useEffect(() => {\n    // Check for saved user session\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      try {\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        console.error('Error parsing saved user:', error);\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const handleLogin = (userData) => {\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n    message.success('Login successful!');\n  };\n\n  const handleLogout = async () => {\n    try {\n      await apiService.logout();\n      setUser(null);\n      localStorage.removeItem('user');\n      message.success('Logout successful!');\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Still clear local state even if API call fails\n      setUser(null);\n      localStorage.removeItem('user');\n    }\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!user) {\n    return <LoginPage onLogin={handleLogin} />;\n  }\n\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <AppSidebar \n        collapsed={sidebarCollapsed}\n        onCollapse={setSidebarCollapsed}\n        user={user}\n      />\n      <Layout>\n        <AppHeader \n          user={user}\n          onLogout={handleLogout}\n          onMenuClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n        />\n        <Content className=\"mobile-responsive\">\n          <Routes>\n            <Route path=\"/\" element={<Dashboard user={user} />} />\n            <Route path=\"/dashboard\" element={<Dashboard user={user} />} />\n            <Route path=\"/teachers\" element={<TeacherManagement user={user} />} />\n            <Route path=\"/attendance\" element={<AttendanceManagement user={user} />} />\n            <Route path=\"/arrangements\" element={<ArrangementManagement user={user} />} />\n            <Route path=\"/schedules\" element={<ScheduleManagement user={user} />} />\n            <Route path=\"/reports\" element={<Reports user={user} />} />\n            <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\n          </Routes>\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default App;","size_bytes":3065},"frontend/src/index.css":{"content":"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: 'Poppins', sans-serif !important;\n}\n\nbody {\n  font-family: 'Poppins', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  min-height: 100vh;\n}\n\n.ant-layout {\n  min-height: 100vh;\n}\n\n.login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n}\n\n.login-form {\n  background: white;\n  padding: 40px;\n  border-radius: 15px;\n  box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n  width: 100%;\n  max-width: 400px;\n}\n\n.dashboard-container {\n  background: #f0f2f5;\n  min-height: 100vh;\n}\n\n.professional-header {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 20px;\n}\n\n.mobile-responsive {\n  padding: 10px;\n}\n\n@media (max-width: 768px) {\n  .mobile-responsive {\n    padding: 5px;\n  }\n  \n  .login-form {\n    margin: 20px;\n    padding: 20px;\n  }\n}","size_bytes":1058},"frontend/src/index.js":{"content":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ConfigProvider } from 'antd';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <ConfigProvider\n        theme={{\n          token: {\n            fontFamily: \"'Poppins', sans-serif\",\n            colorPrimary: '#1890ff',\n          },\n        }}\n      >\n        <App />\n      </ConfigProvider>\n    </BrowserRouter>\n  </React.StrictMode>\n);","size_bytes":588},"backend/arrangements/migrations/0001_initial.py":{"content":"# Generated by Django 5.2.5 on 2025-08-15 09:33\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('authentication', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Arrangement',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('date', models.DateField()),\n                ('absent_teacher', models.CharField(max_length=255)),\n                ('replacement_teacher', models.CharField(blank=True, max_length=255, null=True)),\n                ('class_name', models.CharField(db_column='class', max_length=255)),\n                ('period', models.IntegerField()),\n                ('status', models.CharField(default='Pending', max_length=50)),\n                ('school', models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='authentication.school')),\n            ],\n            options={\n                'db_table': 'arrangements',\n            },\n        ),\n        migrations.CreateModel(\n            name='CoverageTracking',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('date', models.DateField()),\n                ('period', models.IntegerField()),\n                ('class_name', models.CharField(max_length=255)),\n                ('section', models.CharField(blank=True, max_length=50, null=True)),\n                ('subject', models.CharField(blank=True, max_length=255, null=True)),\n                ('original_teacher_id', models.CharField(max_length=255)),\n                ('replacement_teacher_id', models.CharField(blank=True, max_length=255, null=True)),\n                ('school', models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='authentication.school')),\n            ],\n            options={\n                'db_table': 'coverage_tracking',\n            },\n        ),\n        migrations.CreateModel(\n            name='SchoolLogic',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('logic_name', models.CharField(max_length=255)),\n                ('logic_code', models.TextField()),\n                ('is_active', models.BooleanField(default=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('school', models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='authentication.school')),\n            ],\n            options={\n                'db_table': 'school_logic',\n                'unique_together': {('school', 'logic_name')},\n            },\n        ),\n        migrations.CreateModel(\n            name='SuspendedDate',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('date', models.DateField()),\n                ('school', models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='authentication.school')),\n            ],\n            options={\n                'db_table': 'suspended_dates',\n                'unique_together': {('school', 'date')},\n            },\n        ),\n    ]\n","size_bytes":3304},"backend/arrangements/migrations/__init__.py":{"content":"","size_bytes":0},"backend/attendance/migrations/0001_initial.py":{"content":"# Generated by Django 5.2.5 on 2025-08-15 09:33\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('authentication', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Timing',\n            fields=[\n                ('timing_id', models.AutoField(primary_key=True, serialize=False)),\n                ('hour', models.IntegerField()),\n                ('minute', models.IntegerField()),\n                ('enabled', models.BooleanField(default=True)),\n                ('school', models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='authentication.school')),\n            ],\n            options={\n                'db_table': 'timing',\n            },\n        ),\n        migrations.CreateModel(\n            name='Attendance',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('date', models.DateField()),\n                ('teacher_id', models.CharField(max_length=255)),\n                ('status', models.CharField(max_length=50)),\n                ('timestamp', models.DateTimeField()),\n                ('is_auto', models.BooleanField(default=False)),\n                ('biometric_code', models.CharField(blank=True, max_length=255, null=True)),\n                ('school', models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='authentication.school')),\n            ],\n            options={\n                'db_table': 'attendance',\n                'unique_together': {('school', 'date', 'teacher_id')},\n            },\n        ),\n    ]\n","size_bytes":1720},"backend/attendance/migrations/__init__.py":{"content":"","size_bytes":0},"backend/authentication/migrations/0001_initial.py":{"content":"# Generated by Django 5.2.5 on 2025-08-15 09:33\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='School',\n            fields=[\n                ('school_id', models.AutoField(primary_key=True, serialize=False)),\n                ('school_name', models.CharField(max_length=255)),\n                ('address', models.TextField(blank=True, null=True)),\n                ('email', models.EmailField(blank=True, max_length=254, null=True)),\n                ('api_key', models.CharField(blank=True, max_length=255, null=True)),\n                ('logourl', models.URLField(blank=True, null=True)),\n                ('domin', models.CharField(blank=True, max_length=255, null=True)),\n            ],\n            options={\n                'db_table': 'schools',\n            },\n        ),\n        migrations.CreateModel(\n            name='Admin',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('username', models.CharField(max_length=255, unique=True)),\n                ('password', models.CharField(max_length=255)),\n                ('name', models.CharField(max_length=255)),\n                ('phone', models.CharField(blank=True, max_length=20, null=True)),\n                ('teacher_id', models.CharField(blank=True, max_length=255, null=True)),\n                ('email', models.EmailField(blank=True, max_length=254, null=True)),\n                ('school', models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='authentication.school')),\n            ],\n            options={\n                'db_table': 'admins',\n                'unique_together': {('school', 'username')},\n            },\n        ),\n    ]\n","size_bytes":1884},"backend/authentication/migrations/__init__.py":{"content":"","size_bytes":0},"backend/existing_modules/components/__init__.py":{"content":"","size_bytes":0},"backend/existing_modules/components/admin_controls.py":{"content":"\r\nimport streamlit as st\r\nfrom datetime import datetime, date, time\r\nimport pandas as pd\r\n# ⭐️⭐️⭐️ FIX: AutoMarker ko import karne ki ab yahan zaroorat nahi hai ⭐️⭐️⭐️\r\n# from auto_marker import AutoMarker \r\nimport data_manager\r\n\r\n\r\ndef render_admin_page(\r\n    school_id, data_manager_instance\r\n):  # Renamed data_manager arg to data_manager_module for clarity\r\n    \"\"\"\r\n    Render admin control panel, fetching data from the database.\r\n    \"\"\"\r\n\r\n    data_manager_instance = st.session_state.data_manager\r\n    if data_manager_instance is None:\r\n        st.error(\"DataManager instance not available. Please report this issue.\")\r\n        st.warning(\r\n            \"Admin Controls render failed: DataManager instance missing in session state.\"\r\n        )\r\n        return  # Cannot proceed without DataManager instance\r\n\r\n    st.markdown(\r\n        \"\"\"\r\n    <h1 style=\"display: flex; align-items: center;color:#1e3a8a;\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" fill=\"currentColor\" style=\"margin-right: 10px;\" viewBox=\"0 0 24 24\">\r\n  <path d=\"M3 17v2h6v-2H3zM3 5v2h10V5H3zm10 16v-2h8v-2h-8v-2h-2v6h2zM7 9v2H3v2h4v2h2V9H7zm14 4v-2H11v2h10zm-6-4h2V7h4V5h-4V3h-2v6z\"/>\r\n</svg>\r\n        Administrative Controls\r\n    </h1>\r\n    \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n    tab1, tab2, tab3 = st.tabs(\r\n        [\"Auto-marking Settings\", \"User Management\", \"System Settings\"]\r\n    )\r\n\r\n    # Inject Custom CSS for styling (Combined and Organized)\r\n    st.markdown(\r\n        \"\"\"\r\n    <style>\r\n    /* Base Styles and Fonts - Ensure Poppins is available */\r\n    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');\r\n    body { font-family: 'Poppins', sans-serif; }\r\n\r\n    /* Streamlit Element Overrides */\r\n    /* Hide Streamlit footer and header */\r\n    #MainMenu {visibility: hidden;}\r\n    footer {visibility: hidden;}\r\n    /* header {visibility: hidden;}  Commented out as it hides Streamlit's built-in header, which might be needed for deploy button etc. */\r\n\r\n    /* Common Card/Container Styles */\r\n    .st-emotion-cache-fk4zow { /* Target Streamlit's main content area */\r\n        padding-top: 0px !important;\r\n        padding-right: 1rem !important;\r\n        padding-left: 1rem !important;\r\n        padding-bottom: 1rem !important;\r\n    }\r\n    div[data-testid=\"stVerticalBlock\"] > div > div { /* Target inner vertical blocks */\r\n         # border: 1px solid red; /* For debugging layout */\r\n         # margin-bottom: 10px; /* Add spacing between blocks */\r\n    }\r\n\r\n\r\n    /* Custom Button Styling (Applied to Streamlit buttons via class) */\r\n    /* Streamlit default button classes can change, target by attributes if needed */\r\n    /* Example: button[kind=\"primary\"] or button[kind=\"secondary\"] */\r\n\r\n    button.st-emotion-cache-1r6p0uf { /* Target Primary buttons by example class */\r\n        background: linear-gradient(90deg, #1E3A8A, #3B82F6) !important;\r\n        color: white !important;\r\n        border: none !important;\r\n        border-radius: 5px !important;\r\n        padding: 10px 20px !important;\r\n        transition: all 0.3s ease !important;\r\n        font-weight: 700 !important;\r\n        box-shadow: 0 2px 5px rgba(0,0,0,0.15);\r\n    }\r\n     button.st-emotion-cache-1r6p0uf:hover {\r\n        opacity: 0.9; transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n    }\r\n\r\n    button.st-emotion-cache-1r6p0uf[kind=\"secondary\"] { /* Target Secondary buttons */\r\n        background: linear-gradient(90deg, #ff6f61, #de425b) !important;\r\n         color: white !important; border: none !important; font-weight: 700 !important;\r\n         box-shadow: 0 2px 5px rgba(0,0,0,0.15);\r\n     }\r\n      button.st-emotion-cache-1r6p0uf[kind=\"secondary\"]:hover {\r\n        opacity: 0.9; transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n     }\r\n\r\n\r\n    /* Card Titles & Headers */\r\n    .card-title h1, .card-title h2, .card-title h3 {\r\n        font-weight: 700; color: #1E3A8A; /* Example color */\r\n    }\r\n     .card-title { /* Ensure this class is applied to the parent div */\r\n         margin-top: 20px; margin-bottom: 20px;\r\n     }\r\n\r\n    /* Section Headers within tabs */\r\n    h2, h3 {\r\n         color: #2C3E50; /* Default color for h2/h3 */\r\n         margin-top: 1.5rem; margin-bottom: 1rem;\r\n    }\r\n    h3 { font-size: 1.3rem; }\r\n\r\n\r\n    /* Specific Section Headers (from your code) */\r\n    .section-header {\r\n        background: linear-gradient(90deg, #ff6f61, #de425b); color: white; padding: 12px 20px; border-radius: 10px;\r\n        margin: 20px 0 15px 0; font-weight: 700; font-size:20px; display: flex; justify-content: space-between; align-items: center;\r\n        box-shadow: 0 4px 8px rgba(0,0,0,0.15);\r\n    }\r\n    .section-header svg { fill: white !important; }\r\n\r\n    /* Dataframes */\r\n    div[data-testid=\"stDataFrame\"] {\r\n         margin-bottom: 20px;\r\n    }\r\n\r\n\r\n    /* Example style from Attendance Marking Form */\r\n    .teacher-card { background: linear-gradient(135deg, #ffffff, #e3f2fd); border-radius: 16px; padding: 18px; margin: 15px 0; border: 1px solid rgba(209, 217, 230, 0.5); box-shadow: 0 6px 16px rgba(0,0,0,0.1); }\r\n\r\n\r\n    </style>\r\n    \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    # --- Tab Content ---\r\n\r\n    with tab1:\r\n        # --- Auto-Marked Absences Today (Updated for DB) ---\r\n        st.markdown(\r\n            \"\"\"\r\n    <h2 style=\"display: flex; align-items: center;\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"35\" height=\"35\" fill=\"black\" style=\"margin-right: 10px;\" viewBox=\"0 0 24 24\">\r\n          <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4zm7 4h-6v-2h6v2z\"/>\r\n        </svg>\r\n        Auto-Marked Absences Today\r\n    </h2>\r\n    \"\"\",\r\n            unsafe_allow_html=True,\r\n        )\r\n        today = date.today()\r\n        attendance_df = data_manager_instance.get_todays_attendance(school_id)\r\n        if (\r\n            not attendance_df.empty\r\n            and \"is_auto\" in attendance_df.columns\r\n            and \"status\" in attendance_df.columns\r\n        ):\r\n            try:\r\n                attendance_df[\"is_auto\"] = attendance_df[\"is_auto\"].astype(bool)\r\n            except Exception:\r\n                st.warning(\r\n                    \"Could not convert 'is_auto' to boolean for auto-marked filter.\"\r\n                )\r\n                auto_marked = attendance_df[\r\n                    (attendance_df[\"is_auto\"].astype(str).str.lower() == \"true\")\r\n                    & (attendance_df[\"status\"] == \"absent\")\r\n                ].copy()\r\n            else:\r\n                auto_marked = attendance_df[\r\n                    (attendance_df[\"is_auto\"] == True)\r\n                    & (attendance_df[\"status\"] == \"absent\")\r\n                ].copy()\r\n\r\n            if not auto_marked.empty:\r\n                if \"timestamp\" in auto_marked.columns:\r\n                    auto_marked[\"display_time\"] = pd.to_datetime(\r\n                        auto_marked[\"timestamp\"]\r\n                    ).dt.strftime(\"%I:%M %p\")\r\n\r\n                    display_cols = [\"teacher_id\", \"display_time\", \"status\"]\r\n                    existing_display_cols = [\r\n                        col for col in display_cols if col in auto_marked.columns\r\n                    ]\r\n\r\n                    st.dataframe(\r\n                        auto_marked[existing_display_cols],\r\n                        column_config={\r\n                            \"teacher_id\": \"Teacher ID\",\r\n                            \"display_time\": \"Time\",\r\n                            \"status\": \"Status\",\r\n                        },\r\n                        hide_index=True,\r\n                        use_container_width=True,\r\n                    )\r\n                else:\r\n                    st.warning(\"Timestamp column missing in auto-marked data.\")\r\n            else:\r\n                st.info(\"No auto-marked absences for today\")\r\n        else:\r\n            st.info(\r\n                \"No attendance data available or columns missing for auto-marked filter.\"\r\n            )\r\n\r\n        st.divider()\r\n        st.markdown(\r\n            \"\"\"\r\n    <h3 style=\"display: flex; align-items: center;\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fill=\"currentColor\" style=\"margin-right: 8px;\" viewBox=\"0 0 24 24\">\r\n            <path d=\"M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z\"/>\r\n            <path d=\"M13 7h-2v5.414l3.293 3.293 1.414-1.414L13 11.586V7z\"/>\r\n            <path d=\"M14.5 14.5v3l3-1.5-3-1.5z\"/>\r\n        </svg>\r\n        Auto-Absence Settings\r\n    </h3>\r\n    \"\"\",\r\n            unsafe_allow_html=True,\r\n        )\r\n        \r\n        # ⭐️⭐️⭐️ FIX: AutoMarker object ko session se safely get karein ⭐️⭐️⭐️\r\n        automarker_instance = st.session_state.get(\"automarker\")\r\n\r\n        if automarker_instance:\r\n            timing = automarker_instance.get_timing()  # AutoMarker method\r\n\r\n            st.write(\r\n                \"The system will automatically mark all unmarked teachers as absent at the configured time.\"\r\n            )\r\n\r\n            col1, col2, col3 = st.columns([1, 1, 1])\r\n            # Time settings\r\n            with col1:\r\n                display_hour = (\r\n                    timing[\"hour\"] if timing[\"hour\"] <= 12 else timing[\"hour\"] - 12\r\n                )\r\n                if display_hour == 0:  # 0 hour (midnight) should be 12 AM\r\n                    display_hour = 12\r\n\r\n                hour = st.number_input(\r\n                    \"Hour\",\r\n                    min_value=1,\r\n                    max_value=12,\r\n                    value=display_hour,\r\n                    step=1,\r\n                    key=\"automark_hour\",\r\n                )\r\n            with col2:\r\n                minute = st.number_input(\r\n                    \"Minute\",\r\n                    min_value=0,\r\n                    max_value=59,\r\n                    value=timing[\"minute\"],\r\n                    step=1,\r\n                    key=\"automark_minute\",\r\n                )\r\n            with col3:\r\n                ampm = st.selectbox(\r\n                    \"AM/PM\",\r\n                    [\"AM\", \"PM\"],\r\n                    index=(\r\n                        0 if timing[\"hour\"] < 12 else 1\r\n                    ),  # Index 0 for AM (<12), 1 for PM (>=12)\r\n                    key=\"automark_ampm\",\r\n                )\r\n\r\n            save_hour = hour\r\n            if ampm == \"PM\" and hour != 12:  # 12 PM is noon (hour 12)\r\n                save_hour = hour + 12\r\n            elif ampm == \"AM\" and hour == 12:  # 12 AM is midnight (hour 0)\r\n                save_hour = 0\r\n\r\n            enabled = st.checkbox(\r\n                \"Enable Auto-Marking\",\r\n                value=timing.get(\"enabled\", True),\r\n                key=\"automark_enabled\",  # Use .get with default True\r\n            )\r\n\r\n            if st.button(\r\n                \"Save Timing\", use_container_width=True, key=\"save_automark_timing\"\r\n            ):\r\n                # Use the local variable 'automarker_instance'\r\n                success = automarker_instance.set_timing(\r\n                    save_hour, minute, enabled\r\n                )\r\n                if success:\r\n                    st.success(\"Auto-mark timing updated!\")\r\n                else:\r\n                    st.error(\"Failed to update auto-mark timing.\")\r\n                st.rerun()\r\n\r\n            updated_timing = automarker_instance.get_timing()\r\n            current_time_obj = datetime.strptime(\r\n                f\"{updated_timing['hour']:02d}:{updated_timing['minute']:02d}\", \"%H:%M\"\r\n            )\r\n            display_time = current_time_obj.strftime(\"%I:%M %p\")\r\n            st.info(\r\n                f\"Current Setting: \"\r\n                f\"{'🟢 Enabled' if updated_timing.get('enabled', True) else '🔴 Disabled'} at \"  # Use .get with default\r\n                f\"{display_time}\"\r\n            )\r\n\r\n        else:\r\n            st.error(\"Auto-marking settings not available due to initialization error. Please check server logs.\")\r\n\r\n        st.divider()\r\n\r\n        # Suspend/Resume buttons\r\n        suspended_after_rerun = data_manager_instance.is_arrangement_suspended(\r\n            school_id, today\r\n        )\r\n\r\n        if st.button(\r\n            (\r\n                \"✋ Stop Today's Arrangements\"\r\n                if not suspended_after_rerun\r\n                else \"▶️ Resume Arrangements\"\r\n            ),\r\n            type=\"primary\" if not suspended_after_rerun else \"secondary\",\r\n            use_container_width=True,\r\n            key=\"toggle_arr_suspension\",\r\n        ):\r\n            if suspended_after_rerun:\r\n                success = data_manager_instance.resume_arrangements(school_id, today)\r\n                if success:\r\n                    st.success(\"Arrangements resumed for today!\")\r\n                else:\r\n                    st.error(\"Failed to resume arrangements.\")\r\n            else:\r\n                success = data_manager_instance.suspend_arrangements(school_id, today)\r\n                if success:\r\n                    st.success(\"Arrangements suspended for today!\")\r\n                else:\r\n                    st.error(\"Failed to suspend arrangements.\")\r\n\r\n            st.rerun()\r\n\r\n        if suspended_after_rerun:\r\n            st.warning(\"⚠️ Arrangements are currently suspended for today\")\r\n        else:\r\n            st.info(\"✅ Arrangements are active for today\")\r\n\r\n    with tab2:\r\n        # --- User Management (Updated for DB) ---\r\n        st.subheader(\"User Management\")\r\n\r\n        try:\r\n            # Get all teachers using DataManager instance\r\n            users_list = data_manager_instance.get_all_teachers(school_id)\r\n            users_df = pd.DataFrame(users_list)\r\n\r\n            st.write(\"All Registered Teachers:\")\r\n\r\n            filter_col1, filter_col2 = st.columns(2)\r\n\r\n            # Ensure 'category' column exists before trying unique()\r\n            categories = (\r\n                [\"All\"] + sorted(users_df[\"category\"].dropna().unique().tolist())\r\n                if not users_df.empty and \"category\" in users_df.columns\r\n                else [\"All\"]  # Provide default categories if column is missing\r\n            )\r\n\r\n            with filter_col1:\r\n                filter_category = st.selectbox(\r\n                    \"Filter by Category\", categories, key=\"user_filter_category\"\r\n                )\r\n\r\n            with filter_col2:\r\n                search_term = st.text_input(\r\n                    \"Search by Name or ID\", key=\"user_search_term\"\r\n                )\r\n\r\n            filtered_df = users_df.copy()\r\n\r\n            if filter_category != \"All\":\r\n                if \"category\" in filtered_df.columns:  # Check again before filtering\r\n                    filtered_df = filtered_df[\r\n                        filtered_df[\"category\"].astype(str).str.lower()\r\n                        == filter_category.lower()\r\n                    ]\r\n                else:\r\n                    st.warning(\"Category column not available for filtering.\")\r\n                    filtered_df = (\r\n                        pd.DataFrame()\r\n                    )  # Show empty if filtering by category fails\r\n\r\n            if search_term:\r\n                name_match = pd.Series(\r\n                    [False] * len(filtered_df), index=filtered_df.index\r\n                )  # Ensure index alignment\r\n                id_match = pd.Series(\r\n                    [False] * len(filtered_df), index=filtered_df.index\r\n                )  # Ensure index alignment\r\n\r\n                if \"name\" in filtered_df.columns:\r\n                    name_match = (\r\n                        filtered_df[\"name\"]\r\n                        .astype(str)\r\n                        .str.contains(search_term, case=False, na=False)\r\n                    )\r\n\r\n                if \"teacher_id\" in filtered_df.columns:\r\n                    id_match = (\r\n                        filtered_df[\"teacher_id\"]\r\n                        .astype(str)\r\n                        .str.contains(search_term, case=False, na=False)\r\n                    )\r\n                # Apply filter only if either name or id match series were actually created\r\n                if not name_match.empty or not id_match.empty:\r\n                    # Combine matches - handle cases where one match series is empty\r\n                    if name_match.empty:\r\n                        filtered_df = filtered_df[id_match]\r\n                    elif id_match.empty:\r\n                        filtered_df = filtered_df[name_match]\r\n                    else:\r\n                        filtered_df = filtered_df[name_match | id_match]\r\n                else:\r\n                    # If both match series are empty (e.g., no name/teacher_id columns), don't filter\r\n                    pass  # Keep filtered_df as is\r\n\r\n            if not filtered_df.empty:\r\n                display_cols = filtered_df.columns.tolist()\r\n                if \"password\" in display_cols:  # Remove password column if it exists\r\n                    display_cols.remove(\"password\")\r\n                if (\r\n                    \"id\" in display_cols\r\n                ):  # Remove primary key 'id' if it exists and isn't needed for display\r\n                    try:\r\n                        display_cols.remove(\"id\")\r\n                    except ValueError:\r\n                        pass  # Ignore if 'id' wasn't there\r\n\r\n                st.dataframe(\r\n                    filtered_df[display_cols], use_container_width=True, hide_index=True\r\n                )\r\n            else:\r\n                st.info(\"No users match the selected filters.\")\r\n\r\n        except Exception as e:\r\n            st.error(f\"Error loading users from database: {str(e)}\")\r\n            st.warning(f\"Error loading users for Admin tab2: {e}\")\r\n\r\n    with tab3:\r\n        # --- System Settings (Updated for DB) ---\r\n        st.subheader(\"System Settings\")\r\n\r\n        # Suspended dates management\r\n        st.write(\"Manage Suspended Arrangement Dates:\")\r\n\r\n        try:\r\n            # Get suspended dates using DataManager instance\r\n            suspended_dates_df = data_manager_instance.get_suspended_dates(school_id)\r\n\r\n            if not suspended_dates_df.empty and \"date\" in suspended_dates_df.columns:\r\n                st.write(\"Current suspended dates:\")\r\n\r\n                # Ensure date column is date objects and sort\r\n                try:\r\n                    # Handle potential mixed types or errors during conversion robustly\r\n                    suspended_dates_df[\"date\"] = pd.to_datetime(\r\n                        suspended_dates_df[\"date\"], errors=\"coerce\"\r\n                    ).dt.date\r\n                    suspended_dates_df = suspended_dates_df.dropna(\r\n                        subset=[\"date\"]\r\n                    )  # Drop rows where date conversion failed\r\n                    suspended_dates_df = suspended_dates_df.sort_values(by=\"date\")\r\n                except Exception as e:\r\n                    st.warning(f\"Could not sort suspended dates: {e}\")\r\n\r\n                if not suspended_dates_df.empty:\r\n                    for (\r\n                        index,\r\n                        row,\r\n                    ) in suspended_dates_df.iterrows():\r\n                        col1, col2 = st.columns([3, 1])\r\n\r\n                        date_to_display = row[\"date\"]\r\n                        # Ensure it's a date object or convertible for display\r\n                        if isinstance(date_to_display, date):\r\n                            date_to_display_str = date_to_display.strftime(\"%Y-%m-%d\")\r\n                        else:\r\n                            # Fallback in case conversion partially failed\r\n                            date_to_display_str = str(date_to_display)\r\n\r\n                        with col1:\r\n                            st.write(date_to_display_str)\r\n\r\n                        with col2:\r\n                            # Use a unique key for each button based on the date string\r\n                            if st.button(\r\n                                \"Remove\", key=f\"remove_suspended_{date_to_display_str}\"\r\n                            ):\r\n                                # Resume arrangements using DataManager instance\r\n                                success = data_manager_instance.resume_arrangements(\r\n                                    school_id, date_to_display_str\r\n                                )\r\n                                if success:\r\n                                    st.success(\r\n                                        f\"Removed suspension for {date_to_display_str}\"\r\n                                    )\r\n                                else:\r\n                                    st.error(\r\n                                        f\"Failed to remove suspension for {date_to_display_str}\"\r\n                                    )\r\n                                st.rerun()  # Rerun after removal\r\n\r\n                else:\r\n                    st.info(\"No valid suspended dates to display.\")\r\n\r\n            else:\r\n                st.info(\"No dates are currently suspended.\")\r\n\r\n        except Exception as e:\r\n            st.error(f\"Error loading suspended dates from database: {str(e)}\")\r\n            st.warning(f\"Error loading suspended dates for Admin tab3: {e}\")\r\n\r\n        st.write(\"Add a new suspended date:\")\r\n\r\n        add_suspended_date = st.date_input(\r\n            \"Select Date to Suspend\", key=\"add_suspended_date_input\"\r\n        )\r\n\r\n        if st.button(\r\n            \"Suspend Arrangements for Selected Date\",\r\n            use_container_width=True,\r\n            key=\"suspend_date_button\",\r\n        ):\r\n            date_str = add_suspended_date.strftime(\"%Y-%m-%d\")\r\n\r\n            # Check if already suspended using DataManager instance\r\n            if data_manager_instance.is_arrangement_suspended(school_id, date_str):\r\n                st.warning(f\"Arrangements are already suspended for {date_str}\")\r\n            else:\r\n                # Suspend using DataManager instance\r\n                success = data_manager_instance.suspend_arrangements(\r\n                    school_id, date_str\r\n                )\r\n                if success:\r\n                    st.success(f\"Arrangements suspended for {date_str}\")\r\n                else:\r\n                    st.error(f\"Failed to suspend arrangements for {date_str}\")\r\n                st.rerun()  # Rerun after suspension\r\n\r\n        # --- Database backup/export (Updated for DB) ---\r\n        st.divider()\r\n        st.subheader(\"Data Export\")\r\n\r\n        export_type = st.selectbox(\r\n            \"Select Data to Export\",\r\n            [\"Attendance Records\", \"Teacher Information\", \"Arrangements\"],\r\n            key=\"export_data_type\",\r\n        )\r\n\r\n        if st.button(\"Export Data\", use_container_width=True, key=\"export_data_button\"):\r\n            try:\r\n                current_time = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\r\n                df_to_export = pd.DataFrame()\r\n                filename = f\"export_{current_time}.csv\"\r\n\r\n                if export_type == \"Attendance Records\":\r\n                    # Check if get_all_attendance method exists in your DataManager\r\n                    if hasattr(data_manager_instance, \"get_all_attendance\"):\r\n                        df_to_export = data_manager_instance.get_all_attendance(\r\n                            school_id\r\n                        )\r\n                        filename = f\"attendance_export_{current_time}.csv\"\r\n                    else:\r\n                        st.error(\"DataManager method 'get_all_attendance' not found.\")\r\n                        st.warning(\r\n                            \"Data export failed: get_all_attendance method missing.\"\r\n                        )\r\n                        df_to_export = pd.DataFrame()  # Ensure empty DF on error\r\n\r\n                elif export_type == \"Teacher Information\":\r\n                    # get_all_teachers exists\r\n                    df_to_export = data_manager_instance.get_all_teachers(school_id)\r\n                    # Convert list of dicts to DataFrame explicitly if get_all_teachers returns list\r\n                    if isinstance(df_to_export, list):\r\n                        df_to_export = pd.DataFrame(df_to_export)\r\n                    if \"password\" in df_to_export.columns:\r\n                        df_to_export = df_to_export.drop(columns=[\"password\"])\r\n                    # Remove 'id' column if it exists and is not needed for export\r\n                    if \"id\" in df_to_export.columns:\r\n                        try:\r\n                            df_to_export = df_to_export.drop(columns=[\"id\"])\r\n                        except ValueError:\r\n                            pass  # Ignore if 'id' wasn't there\r\n                    filename = f\"teachers_export_{current_time}.csv\"\r\n\r\n                elif export_type == \"Arrangements\":\r\n                    # Check if get_all_arrangements method exists\r\n                    if hasattr(data_manager_instance, \"get_all_arrangements\"):\r\n                        df_to_export = data_manager_instance.get_all_arrangements(\r\n                            school_id\r\n                        )\r\n                        filename = f\"arrangements_export_{current_time}.csv\"\r\n                    else:\r\n                        st.error(\"DataManager method 'get_all_arrangements' not found.\")\r\n                        st.warning(\r\n                            \"Data export failed: get_all_arrangements method missing.\"\r\n                        )\r\n                        df_to_export = pd.DataFrame()  # Ensure empty DF on error\r\n\r\n                if not df_to_export.empty:\r\n                    csv_string = df_to_export.to_csv(index=False).encode(\"utf-8\")\r\n\r\n                    # Use a more robust key for download button\r\n                    download_key = f\"download_button_{export_type}_{current_time}_{len(csv_string)}\"  # Add size to key\r\n\r\n                    st.download_button(\r\n                        label=\"Download CSV File\",\r\n                        data=csv_string,\r\n                        file_name=filename,\r\n                        mime=\"text/csv\",\r\n                        key=download_key,\r\n                    )\r\n                else:\r\n                    st.info(f\"No data available for export type: {export_type}\")\r\n\r\n            except Exception as e:\r\n                st.error(f\"Data Export failed: {str(e)}\")\r\n                st.warning(f\"Data export failed for {export_type} in Admin tab3: {e}\")","size_bytes":26488},"backend/existing_modules/components/arrangements.py":{"content":"# --- START OF FILE arrangements.py ---\n\nimport streamlit as st\nimport pandas as pd\nfrom datetime import datetime, date\n\n\ndef render_arrangements_page(\n    school_id, data_manager_instance  # Accept DataManager instance directly\n):\n    \"\"\"\n    Render the arrangements management page.\n    Args:\n        school_id: The ID of the logged-in school.\n        data_manager_instance: The initialized DataManager instance.\n    \"\"\"\n    # DataManager instance is passed as argument now, no need to fetch from session state again here\n    # data_manager_instance = st.session_state.data_manager # Removed this line\n\n    # Check if DataManager instance is available (should be, as it's passed)\n    if data_manager_instance is None:\n        st.error(\n            \"System error: DataManager instance not available for Arrangements page.\"\n        )\n        return  # Cannot proceed without DataManager instance\n\n    st.markdown(\n        \"\"\"<div class=\"card-title\" style=\"display: flex; align-items: center;color:#1e3a8a;\">\n        <h1><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" fill=\"currentColor\" viewBox=\"0 0 16 16\" style=\"margin-right: 5px;\">\n          <path d=\"M10 1.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-1Zm-5 0A1.5 1.5 0 0 1 6.5 0h3A1.5.5 0 0 1 11 1.5v1A1.5 1.5 0 0 1 9.5 4h-3A1.5 1.5 0 0 1 5 2.5v-1Zm-2 0h1v1A2.5 2.5 0 0 0 6.5 5h3A2.5 2.5 0 0 0 12 2.5v-1h1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-10a2 2 0 0 1 2-2Z\"/>\n          <path d=\"M4.5 8a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7Zm0 2.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7Z\"/>\n        </svg>\n        Arrangements</H1> <!-- Changed H! to H1 -->\n    </div>\"\"\",\n        unsafe_allow_html=True,\n    )\n\n    today = date.today()\n\n    # Check if arrangements are suspended - Use DataManager instance\n    # data_manager_instance.is_arrangement_suspended needs (school_id, date_obj)\n    # Assuming it returns True/False and handles its own connection\n    is_suspended = data_manager_instance.is_arrangement_suspended(school_id, today)\n\n    if is_suspended:\n        st.warning(f\"⚠️ Arrangements are currently suspended for today, {today}.\")\n\n    # Create tabs for different arrangement views\n    auto_tab, manual_tab = st.tabs([\"Auto Arrangements\", \"Manual Arrangements\"])\n\n    with auto_tab:\n        # Pass school_id, DataManager instance, today's date, and suspension status\n        display_auto_arrangements(\n            school_id,\n            data_manager_instance,\n            today,\n            is_suspended,\n        )\n\n    with manual_tab:\n        # Pass school_id, DataManager instance, today's date, and suspension status\n        create_manual_arrangements(\n            school_id,\n            data_manager_instance,\n            today,\n            is_suspended,\n        )\n\n\n# Modify helper functions to accept school_id, DataManager instance, etc.\n# Removed db_connection parameter.\ndef display_auto_arrangements(\n    school_id,\n    data_manager_instance,\n    today,  # Use date object\n    is_suspended,\n):\n    \"\"\"Display automatically generated arrangements\"\"\"\n\n    if is_suspended:\n        # Message already shown in main render function, but maybe repeat here?\n        # st.warning(\"⚠️ Arrangements are currently suspended for today\")\n        return  # Exit function if suspended\n\n    # Ensure DataManager instance is available\n    if data_manager_instance is None:\n        st.error(\n            \"System error: DataManager instance not available for Auto Arrangements.\"\n        )\n        return\n\n    # Get today's absent teachers - Use DataManager instance\n    # data_manager_instance.get_absent_teachers needs (school_id, date_str)\n    # Assuming it returns a list of teacher_ids (strings) or empty list []\n    absent_teachers_list = data_manager_instance.get_absent_teachers(\n        school_id, str(today)  # Pass date as string\n    )\n\n    if not absent_teachers_list:  # Check if the list is empty\n        st.info(\"No absences marked for today. No auto arrangements needed yet.\")\n        return  # Exit function if no absent teachers\n\n    # The list is not empty, proceed to show arrangements\n\n    st.subheader(\"Today's Arrangements\")\n\n    # Show current arrangements - Use DataManager instance\n    # data_manager_instance.get_todays_arrangements needs (school_id, date_obj)\n    # Assuming it returns a Pandas DataFrame or empty DataFrame pd.DataFrame()\n    arrangements_df = data_manager_instance.get_todays_arrangements(\n        school_id, today  # Pass date object\n    )\n\n    # Check if the DataFrame is empty using .empty property\n    if not arrangements_df.empty:\n        # DataFrame is not empty, display it\n\n        # Define custom formatting based on match quality (Keep as is)\n        # This function is correct for styling\n        def get_match_color(quality):\n            quality_lower = quality.lower() if isinstance(quality, str) else \"\"\n            if quality_lower == \"ideal\":\n                return \"#28a745\"  # Green\n            elif quality_lower == \"acceptable\":\n                return \"#ffc107\"  # Yellow\n            elif quality_lower in [\n                \"suboptimal\",\n                \"last resort\",\n            ]:  # Consider suboptimal and last resort as problematic\n                return \"#fd7e14\"  # Orange\n            elif quality_lower == \"manual\":  # Manual assignment style\n                return \"#007bff\"  # Blue\n            else:  # Includes \"unassigned\", None, empty, other statuses\n                return \"#dc3545\"  # Red\n\n        # Apply formatting to dataframe (Keep as is)\n        # Ensure column names match your DB table column names AND what get_todays_arrangements returns in the DataFrame.\n        # Based on previous fixes, DB columns use _id suffix and arrangement_date.\n        # DataManager read_query with dictionary=True should return these names.\n        st.dataframe(\n            arrangements_df,  # Use the DataFrame from DB data\n            column_config={\n                \"absent_teacher_id\": st.column_config.TextColumn(\n                    \"Absent ID\"\n                ),  # Use correct column name\n                \"absent_name\": st.column_config.TextColumn(\"Absent Name\"),\n                \"absent_category\": st.column_config.TextColumn(\"Absent Category\"),\n                \"replacement_teacher_id\": st.column_config.TextColumn(  # Use correct column name\n                    \"Replacement ID\"\n                ),\n                \"replacement_name\": st.column_config.TextColumn(\"Replacement Name\"),\n                \"replacement_category\": st.column_config.TextColumn(\n                    \"Replacement Category\"\n                ),\n                \"class\": st.column_config.TextColumn(\"Class\"),\n                \"period\": st.column_config.NumberColumn(\"Period\"),\n                \"match_quality\": st.column_config.TextColumn(\n                    \"Match Quality\",\n                    help=\"Quality of the replacement teacher match.\",\n                    width=\"medium\",\n                ),\n                \"status\": st.column_config.TextColumn(\"Status\"),\n                \"arrangement_date\": st.column_config.DateColumn(\n                    \"Date\"\n                ),  # Use correct column name\n                \"arrangement_id\": None,  # Hide the primary key ID column\n            },\n            hide_index=True,\n            use_container_width=True,\n            # Add styling for match quality if needed, e.g., via apply function before dataframe\n            # .style.apply(lambda row: ['background-color: %s' % get_match_color(row['match_quality'])] * len(row), axis=1)\n        )\n        # Match quality explanation markdown (Ensure it's placed here or nearby if desired)\n        st.markdown(\n            \"\"\"\n        <div style=\"font-size: 0.9em; color: #555; margin-top: 10px;\">\n        Match Quality: <span style=\"color: #28a745;\">Ideal</span>, <span style=\"color: #ffc107;\">Acceptable</span>, <span style=\"color: #fd7e14;\">Suboptimal/Last Resort</span>, <span style=\"color: #007bff;\">Manual</span>, <span style=\"color: #dc3545;\">Unassigned</span>\n        </div>\n        \"\"\",\n            unsafe_allow_html=True,\n        )\n        with st.expander(\"About Teacher Categories and Match Quality Criteria\"):\n            st.markdown(\n                \"\"\"\n             ### Teacher Categories\n             Teachers are categorized into three groups:\n             - **PGT**: Post Graduate Teachers\n             - **TGT**: Trained Graduate Teachers\n             - **PRT**: Primary Teachers\n\n             ### Match Quality Criteria (Based on Search Order)\n             The system prioritizes finding replacements in a specific order. The 'Match Quality' reflects the *type* of match found:\n             - **Ideal**: Usually same category, same subject.\n             - **Acceptable**: Could be same category different subject, or different category same subject (depending on hierarchy, e.g., TGT replacing PGT subject match).\n             - **Suboptimal**: Less ideal category/subject matches.\n             - **Last Resort**: Any available teacher when other criteria fail.\n             - **Manual**: Arrangement was created manually.\n             - **Unassigned**: No replacement found.\n\n             Exact criteria and priority depend on the system's configuration.\n             \"\"\",\n                unsafe_allow_html=True,\n            )  # Keep original markdown content and add details about types\n\n    else:\n        # If the DataFrame is empty\n        st.info(\"No arrangements have been made yet for today.\")\n\n\n# Modify helper functions to accept school_id, DataManager instance, etc.\n# Removed db_connection parameter.\ndef create_manual_arrangements(\n    school_id,\n    data_manager_instance,\n    today,  # Use date object\n    is_suspended,\n):\n    \"\"\"Create manual arrangements for teachers (e.g., half-day leave)\"\"\"\n\n    st.subheader(\"Create Manual Arrangement\")\n    st.markdown(\n        \"\"\"\n    Use this form to create manual arrangements for specific periods, such as when a teacher takes half-day leave or\n    needs to be absent for specific periods only.\n    \"\"\"\n    )\n\n    # Ensure DataManager instance is available\n    if data_manager_instance is None:\n        st.error(\n            \"System error: DataManager instance not available for Manual Arrangements.\"\n        )\n        return\n\n    # Get all teachers - Use DataManager instance\n    # data_manager_instance.get_all_teachers needs (school_id)\n    # Assuming it returns a list of dicts {teacher_id, name, category, ...} or empty list []\n    all_teachers_list = data_manager_instance.get_all_teachers(school_id)\n\n    if not all_teachers_list:\n        st.error(\"No teachers found for this school.\")\n        return  # Exit if no teachers\n\n    # Prepare options list with name and ID (Keep as is)\n    # Ensure handling potential None/NaN values in teacher data\n    teacher_options = [\"-- Select --\"] + [  # Add a default empty option\n        f\"{t.get('name', 'N/A')} ({t.get('teacher_id', 'N/A')}) - {t.get('category', 'N/A')}\"\n        for t in all_teachers_list\n        if t and t.get(\"teacher_id\")  # Only include if teacher_id exists\n    ]\n    teacher_ids_map = {  # Map display string to teacher_id\n        f\"{t.get('name', 'N/A')} ({t.get('teacher_id', 'N/A')}) - {t.get('category', 'N/A')}\": t.get(\n            \"teacher_id\"\n        )\n        for t in all_teachers_list\n        if t and t.get(\"teacher_id\")\n    }\n    teacher_details_map = {  # Map teacher_id to full details dict\n        t.get(\"teacher_id\"): t for t in all_teachers_list if t and t.get(\"teacher_id\")\n    }\n\n    # Define the periods (Keep as is)\n    periods = [1, 2, 3, 4, 5, 6, 7]\n\n    # Setup the form for manual arrangement (Keep form structure)\n    with st.form(\"manual_arrangement_form\"):\n        st.markdown(\"### Select Teachers and Period\")\n\n        col1, col2 = st.columns(2)\n\n        with col1:\n            # Absent Teacher Selection\n            # Ensure default \"-- Select --\" option is handled\n            absent_teacher_selection = st.selectbox(\n                \"Select Absent Teacher\",\n                options=teacher_options,\n                key=\"absent_teacher_select\",\n            )\n            # Get the actual teacher ID if an option is selected\n            absent_teacher_id = teacher_ids_map.get(absent_teacher_selection)\n\n            # Period Selection\n            period = st.selectbox(\n                \"Select Period\",\n                options=[\"-- Select --\"] + periods,\n                key=\"period_select\",  # Add default option\n            )\n\n    if is_suspended:\n        st.warning(\"⚠️ Arrangements are currently suspended for today\")\n\n    # Create tabs for different arrangement views\n    auto_tab, manual_tab = st.tabs([\"Auto Arrangements\", \"Manual Arrangements\"])\n\n    with auto_tab:\n        # Pass school_id, DataManager instance, today, is_suspended to helper function\n        display_auto_arrangements(\n            school_id,\n            data_manager_instance,\n            today,\n            is_suspended,\n        )\n\n    with manual_tab:\n        # Pass school_id, DataManager instance, today, is_suspended to helper function\n        create_manual_arrangements(\n            school_id,\n            data_manager_instance,\n            today,\n            is_suspended,\n        )\n\n\n# Modify helper functions to accept school_id, AND DataManager instance\ndef display_auto_arrangements(\n    school_id,\n    data_manager_instance,\n    today,\n    is_suspended,\n):\n    \"\"\"Display automatically generated arrangements\"\"\"\n\n    # Check if DataManager instance is available (safety check)\n    if data_manager_instance is None:\n        st.error(\"DataManager instance not available for auto arrangements display.\")\n        return\n\n    if is_suspended:\n        # Warning is already shown in render_arrangements_page, but show again here for clarity\n        st.warning(\"⚠️ Arrangements are currently suspended for today\")\n        return\n\n    # Get today's absent teachers - Use DataManager instance\n    # DataManager.get_absent_teachers handles its own connection\n    # It returns a list of teacher_ids or an empty list []\n    absent_teachers_list = data_manager_instance.get_absent_teachers(\n        school_id, str(today)  # Ensure date is passed as string\n    )\n\n    # Check if the list is empty\n    if not absent_teachers_list:\n        st.info(\"No absences marked for today, so no automatic arrangements needed.\")\n        return\n\n    # The list is not empty, proceed to show arrangements\n    st.subheader(\"Today's Arrangements\")\n\n    # Show current arrangements - Use DataManager instance\n    # DataManager.get_todays_arrangements handles its own connection\n    # It returns a Pandas DataFrame or an empty DataFrame\n    arrangements_df = data_manager_instance.get_todays_arrangements(\n        school_id, today  # Pass date object or compatible format\n    )\n\n    # Check if the returned DataFrame is empty\n    # <<< CORRECTED: Check if DataFrame is NOT empty using .empty property >>>\n    if not arrangements_df.empty:\n        # Define custom formatting based on match quality (Keep as is)\n        # This function will be applied later if needed, not directly in dataframe config\n        def get_match_color(quality):\n            quality_lower = quality.lower() if isinstance(quality, str) else \"\"\n            if quality_lower == \"ideal\":\n                return \"background-color: #d4edda; color: #155724;\"  # Green background\n            elif quality_lower == \"acceptable\":\n                return \"background-color: #fff3cd; color: #856404;\"  # Yellow background\n            elif quality_lower == \"suboptimal\":\n                return \"background-color: #f8d7da; color: #721c24;\"  # Red background\n            elif quality_lower == \"manual\":\n                return \"background-color: #cce5ff; color: #004085;\"  # Blue background\n            elif quality_lower == \"unassigned\":\n                return \"background-color: #e2e3e5; color: #383d41;\"  # Grey background\n            else:\n                return \"\"  # No special styling\n\n        # Apply formatting to dataframe (Keep as is, ensure column names match DB)\n        # Note: Styling applied using Styler later if needed, st.dataframe column_config is for display options\n        st.dataframe(\n            arrangements_df,  # Use the DataFrame from DB data\n            column_config={  # Ensure column names match your arrangements table in DB / query result\n                \"arrangement_id\": None,  # Hide auto-increment ID if it's in the dataframe\n                \"arrangement_date\": st.column_config.DateColumn(\n                    \"Date\"\n                ),  # Use arrangement_date\n                \"absent_teacher_id\": st.column_config.TextColumn(\n                    \"Absent Teacher ID\"\n                ),  # Use absent_teacher_id\n                \"absent_name\": st.column_config.TextColumn(\"Absent Teacher Name\"),\n                \"absent_category\": st.column_config.TextColumn(\"Absent Category\"),\n                \"replacement_teacher_id\": st.column_config.TextColumn(\n                    \"Replacement Teacher ID\"\n                ),  # Use replacement_teacher_id\n                \"replacement_name\": st.column_config.TextColumn(\n                    \"Replacement Teacher Name\"\n                ),\n                \"replacement_category\": st.column_config.TextColumn(\n                    \"Replacement Category\"\n                ),\n                \"class\": st.column_config.TextColumn(\"Class\"),\n                \"period\": st.column_config.NumberColumn(\"Period\"),\n                \"status\": st.column_config.TextColumn(\"Status\"),\n                \"match_quality\": st.column_config.TextColumn(\n                    \"Match Quality\",\n                    help=\"Quality of the replacement match.\",\n                    width=\"medium\",\n                ),\n                # \"date\": None, # Remove or hide if arrangement_date is used\n                # \"id\": None, # Hide auto-increment ID if name is 'id'\n            },\n            hide_index=True,\n            use_container_width=True,  # Use container width for better scaling\n        )\n\n        # Display explanation for match quality (Keep as is)\n        with st.expander(\"About Teacher Categories and Match Quality\"):\n            st.markdown(\n                \"\"\"\n            ### Teacher Categories\n            Teachers are categorized into three groups:\n            - **PGT**: Post Graduate Teachers\n            - **TGT**: Trained Graduate Teachers\n            - **PRT**: Primary Teachers\n\n            ### Match Quality Criteria (Based on Search Order)\n            - **Ideal**: Same category, same subject match.\n            - **Acceptable**: Lower/Higher category with same subject OR same category with different subject.\n            - **Suboptimal**: More distant category/subject matches.\n            - **Last Resort**: Any available teacher when others fail.\n            - **Manual**: Assigned manually by an administrator.\n            - **Unassigned**: No replacement found or explicitly left unassigned.\n\n            The system prioritizes finding replacements based on a defined order (Ideal > Acceptable > Suboptimal > Last Resort).\n            \"\"\",\n                unsafe_allow_html=True,  # Keep original markdown content\n            )\n    else:\n        st.info(\"No arrangements have been made yet for today.\")\n\n\n# Modify helper functions to accept school_id, AND DataManager instance\ndef create_manual_arrangements(\n    school_id,\n    data_manager_instance,\n    today,\n    is_suspended,\n):\n    \"\"\"Create manual arrangements for teachers (e.g., half-day leave)\"\"\"\n\n    st.subheader(\"Create Manual Arrangement\")\n    st.markdown(\n        \"\"\"\n    Use this form to create manual arrangements for specific periods, such as when a teacher takes half-day leave or\n    needs to be absent for specific periods only.\n    \"\"\"\n    )\n\n    # Check if DataManager instance is available (safety check)\n    if data_manager_instance is None:\n        st.error(\"DataManager instance not available for manual arrangements.\")\n        return\n\n    if is_suspended:\n        st.warning(\"⚠️ Arrangements are currently suspended for today\")\n        # Decide if you want to allow manual arrangements even if suspended\n        # For now, let's allow the form to show, but maybe add a note.\n        st.info(\n            \"Note: Arrangements are suspended, but you can still create manual assignments.\"\n        )\n\n    # Get all teachers - Use DataManager instance\n    # DataManager.get_all_teachers handles its own connection.\n    # It returns a list of dicts [{teacher_id, name, category, ...}] or [].\n    all_teachers_list = data_manager_instance.get_all_teachers(school_id)\n\n    if not all_teachers_list:\n        st.error(\"No teachers found for this school.\")\n        return\n\n    # Prepare options list with name and ID (Keep as is)\n    # Ensure teacher_id, name, category keys exist in the dictionaries returned by get_all_teachers\n    teacher_options = [\n        f\"{t.get('name', 'N/A')} ({t.get('teacher_id', 'N/A')}) - {t.get('category', 'N/A')}\"\n        for t in all_teachers_list\n    ]\n    # Create a map from the display string back to the teacher_id\n    teacher_ids_map = {\n        f\"{t.get('name', 'N/A')} ({t.get('teacher_id', 'N/A')}) - {t.get('category', 'N/A')}\": t.get(\n            \"teacher_id\"\n        )\n        for t in all_teachers_list\n    }\n    # Create a map from teacher_id to full details dictionary\n    teacher_details_map = {\n        t.get(\"teacher_id\"): t\n        for t in all_teachers_list\n        if t.get(\"teacher_id\") is not None  # Map only if teacher_id exists\n    }\n\n    # Define the periods (Keep as is)\n    periods = list(range(1, 8))  # Periods 1 to 7\n\n    # Setup the form for manual arrangement (Keep form structure)\n    with st.form(\"manual_arrangement_form\"):\n        st.markdown(\"### Select Teachers and Period\")\n\n        col1, col2 = st.columns(2)\n\n        with col1:\n            # Absent Teacher Selection\n            absent_teacher_selection = st.selectbox(\n                \"Select Absent Teacher\",\n                options=[\"\"] + teacher_options,  # Add empty option\n                key=\"absent_teacher_select\",\n                index=0,  # Default to empty option\n            )\n\n            # Extract teacher ID from selection string using the map\n            # Use get() safely, returns None if key not found (e.g., empty selection)\n            absent_teacher_id = teacher_ids_map.get(absent_teacher_selection)\n\n            # Period Selection\n            period = st.selectbox(\n                \"Select Period\",\n                options=[\"\"] + periods,\n                key=\"period_select\",\n                index=0,  # Add empty option\n            )\n\n            # Class Selection\n            class_name = st.text_input(\"Class Name/Section\", key=\"class_name_input\")\n\n        with col2:\n            # Replacement Teacher Selection\n            # Filter out the absent teacher from replacement options (Keep as is)\n            # Ensure absent_teacher_id is valid before filtering\n            replacement_options = [\"\"] + [  # Add empty option\n                opt\n                for opt in teacher_options\n                if absent_teacher_id is not None\n                and teacher_ids_map.get(opt) != absent_teacher_id\n            ]\n            # If no absent teacher is selected, replacement_options should probably be all teachers + unassigned option\n            if absent_teacher_id is None:\n                replacement_options = [\"\"] + teacher_options\n\n            # Add an explicit \"UNASSIGNED\" option for manual unassignment\n            replacement_options.append(\"UNASSIGNED (No Replacement)\")\n\n            replacement_teacher_selection = st.selectbox(\n                \"Select Replacement Teacher\",\n                options=replacement_options,\n                key=\"replacement_teacher_select\",\n                index=0,  # Default to empty\n            )\n\n            # Extract teacher ID from selection\n            # Use get() safely, returns None if key not found (e.g., empty or UNASSIGNED selection)\n            replacement_teacher_id = teacher_ids_map.get(replacement_teacher_selection)\n\n            # Handle the explicit \"UNASSIGNED\" selection\n            if replacement_teacher_selection == \"UNASSIGNED (No Replacement)\":\n                replacement_teacher_id = \"UNASSIGNED\"  # Use a specific string/value to indicate manual unassignment\n\n            # Optional date selection (defaults to today)\n            use_different_date = st.checkbox(\n                \"Use Different Date\", value=False, key=\"use_different_date_check\"\n            )\n            if use_different_date:\n                selected_date = st.date_input(\n                    \"Select Date\", value=today, key=\"selected_date_input\"\n                )\n            else:\n                selected_date = today\n\n        # Submit button\n        submitted = st.form_submit_button(\"Create Arrangement\")\n\n        if submitted:\n            # --- Validate Inputs ---\n            if (\n                not absent_teacher_id\n                or not class_name\n                or not selected_date\n                or period == \"\"\n            ):\n                st.error(\"Please select Absent Teacher, Period, Class Name, and Date.\")\n            elif (\n                replacement_teacher_id is None\n                and replacement_teacher_selection != \"UNASSIGNED (No Replacement)\"\n            ):\n                # This case happens if an option was selected but not found in map (shouldn't happen with correct map)\n                # Or if 'UNASSIGNED' wasn't specifically selected, but no teacher was picked\n                st.error(\"Please select a valid Replacement Teacher or 'UNASSIGNED'.\")\n            else:\n                # --- Inputs are Valid, Proceed to Create Arrangement ---\n\n                # Get full details for names and categories from the map fetched earlier\n                # Handle case where absent_teacher_id or replacement_teacher_id might be 'UNASSIGNED' or None\n                absent_teacher_details = teacher_details_map.get(absent_teacher_id)\n                replacement_teacher_details = teacher_details_map.get(\n                    replacement_teacher_id\n                )  # This will be None if replacement_teacher_id is 'UNASSIGNED' or None\n\n                # Get names and categories, handling potential None/missing details\n                absent_teacher_name = (\n                    absent_teacher_details.get(\"name\")\n                    if absent_teacher_details\n                    else absent_teacher_id\n                )  # Use ID if name missing\n                absent_category = (\n                    absent_teacher_details.get(\"category\")\n                    if absent_teacher_details\n                    else None\n                )\n\n                # Handle replacement details based on selection\n                if (\n                    replacement_teacher_id is None\n                    or replacement_teacher_id == \"UNASSIGNED\"\n                ):\n                    # Manual Unassignment\n                    replacement_teacher_id_to_pass = None  # Store as None in DB\n                    replacement_name_to_pass = \"UNASSIGNED\"\n                    replacement_category_to_pass = None\n                    status_to_pass = \"UNASSIGNED\"\n                    match_quality_to_pass = (\n                        \"Manual Unassigned\"  # Specific quality for manual unassigned\n                    )\n                else:\n                    # Manual Assignment with a replacement\n                    replacement_teacher_id_to_pass = (\n                        replacement_teacher_id  # Use the actual ID\n                    )\n                    replacement_name_to_pass = (\n                        replacement_teacher_details.get(\"name\")\n                        if replacement_teacher_details\n                        else replacement_teacher_id\n                    )  # Use ID if name missing\n                    replacement_category_to_pass = (\n                        replacement_teacher_details.get(\"category\")\n                        if replacement_teacher_details\n                        else None\n                    )\n                    status_to_pass = \"MANUAL\"  # Or \"ASSIGNED\" as per your status types\n                    match_quality_to_pass = \"Manual\"  # Quality for manual assignment\n\n                # Call the data_manager function to create the manual arrangement\n                # DataManager.create_manual_arrangement handles its own connection and saving\n                # Ensure it takes correct arguments\n                success = data_manager_instance.create_manual_arrangement(\n                    school_id=school_id,\n                    absent_teacher=absent_teacher_id,  # The original absent teacher ID\n                    absent_name=absent_teacher_name,\n                    absent_category=absent_category,\n                    replacement_teacher=replacement_teacher_id_to_pass,  # The chosen replacement ID (or None)\n                    replacement_name=replacement_name_to_pass,\n                    replacement_category=replacement_category_to_pass,\n                    period=period,  # Pass the integer period\n                    class_name=class_name,\n                    current_date=selected_date,  # Pass date object\n                    status=status_to_pass,\n                    match_quality=match_quality_to_pass,\n                )\n\n                # --- Process Save Result ---\n                if success:\n                    st.success(\n                        f\"Manual arrangement created successfully for period {period} on {selected_date}.\"\n                    )\n\n                    st.subheader(\n                        f\"Arrangements for {selected_date.strftime('%Y-%m-%d')}\"\n                    )\n                    # Fetch arrangements again - Use DataManager instance\n                    # DataManager.get_todays_arrangements should handle its own connection and return DataFrame\n                    all_arrangements_for_date_df = (\n                        data_manager_instance.get_todays_arrangements(\n                            school_id, selected_date  # Pass date object\n                        )\n                    )\n                    # <<< Use .empty check for DataFrame >>>\n                    if not all_arrangements_for_date_df.empty:\n                        # Display using st.dataframe\n                        st.dataframe(\n                            all_arrangements_for_date_df,\n                            column_config={  # Ensure column names match your arrangements table in DB / query result\n                                \"arrangement_id\": None,  # Hide if exists\n                                \"arrangement_date\": st.column_config.DateColumn(\"Date\"),\n                                \"absent_teacher_id\": st.column_config.TextColumn(\n                                    \"Absent Teacher ID\"\n                                ),\n                                \"absent_name\": st.column_config.TextColumn(\n                                    \"Absent Teacher Name\"\n                                ),\n                                \"absent_category\": st.column_config.TextColumn(\n                                    \"Absent Category\"\n                                ),\n                                \"replacement_teacher_id\": st.column_config.TextColumn(\n                                    \"Replacement Teacher ID\"\n                                ),\n                                \"replacement_name\": st.column_config.TextColumn(\n                                    \"Replacement Teacher Name\"\n                                ),\n                                \"replacement_category\": st.column_config.TextColumn(\n                                    \"Replacement Category\"\n                                ),\n                                \"class\": st.column_config.TextColumn(\"Class\"),\n                                \"period\": st.column_config.NumberColumn(\"Period\"),\n                                \"status\": st.column_config.TextColumn(\"Status\"),\n                                \"match_quality\": st.column_config.TextColumn(\n                                    \"Match Quality\"\n                                ),\n                            },\n                            hide_index=True,\n                            use_container_width=True,\n                        )\n                    else:\n                        st.info(\n                            f\"No arrangements found for {selected_date.strftime('%Y-%m-%d')}.\"\n                        )\n\n                else:\n                    st.error(\"Failed to create manual arrangement. Database error.\")\n# test line to trigger git","size_bytes":32589},"backend/existing_modules/components/billing.py":{"content":"import streamlit as st\r\nimport pandas as pd\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\nfrom datetime import datetime, timedelta\r\nimport data_manager\r\nimport time\r\n\r\ndef load_billing_css():\r\n    \"\"\"Load professional billing-specific CSS styling\"\"\"\r\n    st.markdown(\"\"\"\r\n    <style>\r\n    /* Billing Page Specific Styles */\r\n    .billing-header {\r\n        background: linear-gradient(135deg, #1e293b 0%, #334155 100%);\r\n        padding: 2rem;\r\n        border-radius: 20px;\r\n        text-align: center;\r\n        margin-bottom: 2rem;\r\n        border: 1px solid #475569;\r\n    }\r\n    \r\n    .plan-container {\r\n        display: flex;\r\n        justify-content: center;\r\n        gap: 2rem;\r\n        flex-wrap: wrap;\r\n        margin: 2rem 0;\r\n    }\r\n    \r\n    .plan-card {\r\n        background: linear-gradient(135deg, #1e293b 0%, #334155 100%);\r\n        border: 2px solid #475569;\r\n        border-radius: 20px;\r\n        padding: 2.5rem;\r\n        max-width: 400px;\r\n        min-width: 350px;\r\n        position: relative;\r\n        transition: all 0.4s ease;\r\n        overflow: hidden;\r\n    }\r\n    \r\n    .plan-card:hover {\r\n        transform: translateY(-10px);\r\n        border-color: #3b82f6;\r\n        box-shadow: 0 25px 50px rgba(59, 130, 246, 0.2);\r\n    }\r\n    \r\n    .plan-card.enterprise {\r\n        border-color: #3b82f6;\r\n        background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);\r\n        position: relative;\r\n    }\r\n    \r\n    .plan-card.enterprise::before {\r\n        content: \"POPULAR\";\r\n        position: absolute;\r\n        top: 15px;\r\n        right: -35px;\r\n        background: #ef4444;\r\n        color: white;\r\n        padding: 8px 40px;\r\n        transform: rotate(45deg);\r\n        font-size: 0.8rem;\r\n        font-weight: bold;\r\n        box-shadow: 0 4px 8px rgba(239, 68, 68, 0.3);\r\n    }\r\n    \r\n    .plan-title {\r\n        font-size: 1.8rem;\r\n        font-weight: 700;\r\n        color: white;\r\n        text-align: center;\r\n        margin-bottom: 1rem;\r\n    }\r\n    \r\n    .plan-price {\r\n        font-size: 3.5rem;\r\n        font-weight: 800;\r\n        color: #3b82f6;\r\n        text-align: center;\r\n        margin: 1.5rem 0;\r\n        text-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);\r\n    }\r\n    \r\n    .plan-duration {\r\n        color: #94a3b8;\r\n        text-align: center;\r\n        font-size: 1.1rem;\r\n        margin-bottom: 2rem;\r\n    }\r\n    \r\n    .feature-list {\r\n        list-style: none;\r\n        padding: 0;\r\n        margin: 1.5rem 0;\r\n    }\r\n    \r\n    .feature-list li {\r\n        padding: 0.7rem 0;\r\n        color: #e2e8f0;\r\n        position: relative;\r\n        padding-left: 2rem;\r\n    }\r\n    \r\n    .feature-list li::before {\r\n        content: \"✓\";\r\n        color: #10b981;\r\n        font-weight: bold;\r\n        font-size: 1.2rem;\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0.7rem;\r\n    }\r\n    \r\n    .premium-btn {\r\n        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);\r\n        color: white;\r\n        border: none;\r\n        padding: 1.2rem 2rem;\r\n        border-radius: 12px;\r\n        font-weight: 600;\r\n        font-size: 1.1rem;\r\n        cursor: pointer;\r\n        transition: all 0.3s ease;\r\n        width: 100%;\r\n        text-align: center;\r\n        margin-top: 1rem;\r\n    }\r\n    \r\n    .premium-btn:hover {\r\n        transform: translateY(-2px);\r\n        box-shadow: 0 15px 30px rgba(59, 130, 246, 0.4);\r\n        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);\r\n    }\r\n    \r\n    /* Payment Methods */\r\n    .payment-container {\r\n        background: linear-gradient(135deg, #1f2937 0%, #374151 100%);\r\n        border-radius: 20px;\r\n        padding: 2rem;\r\n        margin: 2rem 0;\r\n        border: 1px solid #4b5563;\r\n    }\r\n    \r\n    .payment-method {\r\n        background: linear-gradient(135deg, #374151 0%, #4b5563 100%);\r\n        border: 2px solid #6b7280;\r\n        border-radius: 16px;\r\n        padding: 1.8rem;\r\n        margin: 1.5rem 0;\r\n        transition: all 0.3s ease;\r\n        cursor: pointer;\r\n    }\r\n    \r\n    .payment-method:hover {\r\n        border-color: #3b82f6;\r\n        background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);\r\n        transform: translateY(-3px);\r\n        box-shadow: 0 10px 20px rgba(59, 130, 246, 0.2);\r\n    }\r\n    \r\n    .payment-title {\r\n        font-size: 1.3rem;\r\n        font-weight: 600;\r\n        color: white;\r\n        margin-bottom: 1rem;\r\n    }\r\n    \r\n    .payment-details {\r\n        color: #d1d5db;\r\n        line-height: 1.6;\r\n    }\r\n    \r\n    .payment-details strong {\r\n        color: #3b82f6;\r\n    }\r\n    \r\n    /* Success/Error Messages */\r\n    .success-message {\r\n        background: linear-gradient(135deg, #059669 0%, #10b981 100%);\r\n        color: white;\r\n        padding: 1.5rem;\r\n        border-radius: 16px;\r\n        margin: 1.5rem 0;\r\n        text-align: center;\r\n        font-weight: 500;\r\n    }\r\n    \r\n    .error-message {\r\n        background: linear-gradient(135deg, #dc2626 0%, #ef4444 100%);\r\n        color: white;\r\n        padding: 1.5rem;\r\n        border-radius: 16px;\r\n        margin: 1.5rem 0;\r\n        text-align: center;\r\n        font-weight: 500;\r\n    }\r\n    \r\n    /* Current Subscription Status */\r\n    .subscription-status {\r\n        background: linear-gradient(135deg, #059669 0%, #10b981 100%);\r\n        padding: 2rem;\r\n        border-radius: 20px;\r\n        margin: 2rem 0;\r\n        border: 2px solid #10b981;\r\n    }\r\n    \r\n    .subscription-status h4 {\r\n        color: white;\r\n        font-size: 1.4rem;\r\n        margin-bottom: 1rem;\r\n    }\r\n    \r\n    .subscription-status p {\r\n        color: #f0fdf4;\r\n        margin: 0.5rem 0;\r\n    }\r\n    \r\n    /* Icons */\r\n    .icon {\r\n        color: #3b82f6;\r\n        margin-right: 0.5rem;\r\n    }\r\n    \r\n    /* Responsive */\r\n    @media (max-width: 768px) {\r\n        .plan-container {\r\n            flex-direction: column;\r\n            align-items: center;\r\n        }\r\n        \r\n        .plan-card {\r\n            min-width: 280px;\r\n            max-width: 100%;\r\n        }\r\n    }\r\n    </style>\r\n    \"\"\", unsafe_allow_html=True)\r\n\r\ndef get_billing_plans():\r\n    \"\"\"Get available billing plans for schools\"\"\"\r\n    return [\r\n        {\r\n            'id': 1,\r\n            'name': 'Smart School',\r\n            'price_monthly': 2000,\r\n            'price_annual': 22000,\r\n            'price_usd_monthly': 24,\r\n            'price_usd_annual': 264,\r\n            'duration': 12,\r\n            'features': [\r\n                'Complete teacher management system',\r\n                'Automated substitute arrangements',\r\n                'WhatsApp notifications for all staff',\r\n                'Student attendance tracking',\r\n                'Basic analytics and reports',\r\n                'Email support during business hours',\r\n                'Secure data backup',\r\n                'Mobile-responsive design',\r\n                'Basic school customization'\r\n            ],\r\n            'popular': False\r\n        },\r\n        {\r\n            'id': 2,\r\n            'name': 'Premium School',\r\n            'price_monthly': 2500,\r\n            'price_annual': 27000,\r\n            'price_usd_monthly': 30,\r\n            'price_usd_annual': 324,\r\n            'duration': 12,\r\n            'features': [\r\n                'All Smart School features included',\r\n                'Advanced analytics dashboard',\r\n                'Priority 24/7 phone & WhatsApp support',\r\n                'Multi-campus management',\r\n                'Parent notification system',\r\n                'API access for school software',\r\n                'Advanced reporting & insights',\r\n                'Custom school branding',\r\n                'Dedicated account manager',\r\n                'Priority feature requests'\r\n            ],\r\n            'popular': True\r\n        }\r\n    ]\r\n\r\ndef get_subscription_status(school_id):\r\n    \"\"\"Get current subscription status for a school\"\"\"\r\n    try:\r\n        # Try to get from database first\r\n        connection = data_manager.get_connection()\r\n        if connection:\r\n            cursor = connection.cursor(dictionary=True)\r\n            cursor.execute(\"\"\"\r\n                SELECT * FROM subscriptions \r\n                WHERE school_id = %s AND status = 'active' \r\n                ORDER BY created_at DESC LIMIT 1\r\n            \"\"\", (school_id,))\r\n            subscription = cursor.fetchone()\r\n            cursor.close()\r\n            connection.close()\r\n            \r\n            if subscription:\r\n                return subscription\r\n    except Exception as e:\r\n        # Fallback for demo purposes\r\n        pass\r\n    \r\n    # # Demo subscription for S001\r\n    # if school_id == 'S001':\r\n    #     return {\r\n    #         'school_id': 'S001',\r\n    #         'plan_name': 'Professional',\r\n    #         'price': 2000.00,\r\n    #         'start_date': datetime.now().date(),\r\n    #         'end_date': datetime.now().date() + timedelta(days=365),\r\n    #         'status': 'active',\r\n    #         'payment_method': 'Bank Transfer'\r\n    #     }\r\n    \r\n    return None\r\n\r\ndef create_payment_record(school_id, plan_id, plan_name, amount, payment_method):\r\n    \"\"\"Create payment record and subscription\"\"\"\r\n    try:\r\n        connection = data_manager.get_connection()\r\n        if connection:\r\n            cursor = connection.cursor()\r\n            \r\n            transaction_id = f\"TXN{int(time.time())}\"\r\n            \r\n            # Create subscription record\r\n            cursor.execute(\"\"\"\r\n                INSERT INTO subscriptions \r\n                (school_id, plan_id, plan_name, amount, start_date, end_date, status, payment_method, transaction_id)\r\n                VALUES (%s, %s, %s, %s, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 12 MONTH), 'active', %s, %s)\r\n                ON DUPLICATE KEY UPDATE\r\n                plan_id = VALUES(plan_id),\r\n                plan_name = VALUES(plan_name),\r\n                amount = VALUES(amount),\r\n                end_date = DATE_ADD(CURDATE(), INTERVAL 12 MONTH),\r\n                status = 'active',\r\n                payment_method = VALUES(payment_method),\r\n                transaction_id = VALUES(transaction_id)\r\n            \"\"\", (school_id, plan_id, plan_name, amount, payment_method, transaction_id))\r\n            \r\n            connection.commit()\r\n            cursor.close()\r\n            connection.close()\r\n            return transaction_id\r\n    except Exception as e:\r\n        st.error(f\"Database error: {e}\")\r\n    \r\n    # Return demo transaction ID\r\n    return f\"DEMO_TXN_{int(time.time())}\"\r\n\r\ndef render_billing_page():\r\n    \"\"\"Render the professional billing and subscription page\"\"\"\r\n    \r\n    load_billing_css()\r\n    \r\n    # Header\r\n    st.markdown(\"\"\"\r\n    <div class=\"billing-header\">\r\n        <h1 style=\"color: white; margin: 0; font-size: 2.5rem;\">\r\n            <i class=\"fas fa-graduation-cap icon\"></i>\r\n            Choose Your School Plan\r\n        </h1>\r\n        <p style=\"color: #94a3b8; font-size: 1.2rem; margin: 1rem 0 0 0;\">\r\n            Select the perfect solution for your educational institution\r\n        </p>\r\n    </div>\r\n    \"\"\", unsafe_allow_html=True)\r\n    \r\n    # Check current subscription\r\n    school_id = st.session_state.get('current_school', 'S001')\r\n    current_subscription = get_subscription_status(school_id)\r\n    \r\n    if current_subscription:\r\n        st.markdown(f\"\"\"\r\n        <div style=\"background: linear-gradient(135deg, #059669 0%, #10b981 100%); \r\n                    padding: 2.5rem; border-radius: 20px; margin: 2rem 0; border: 2px solid #10b981;\r\n                    box-shadow: 0 20px 40px rgba(16, 185, 129, 0.15);\">\r\n            <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;\">\r\n                <h3 style=\"color: white; margin: 0; font-size: 1.6rem; font-weight: 700;\">\r\n                    <i class=\"fas fa-crown\" style=\"color: #fbbf24; margin-right: 0.5rem;\"></i>\r\n                    Active Plan: {current_subscription['plan_name']}\r\n                </h3>\r\n                <div style=\"background: rgba(255,255,255,0.2); padding: 0.5rem 1rem; border-radius: 8px;\">\r\n                    <span style=\"color: white; font-weight: 600; font-size: 0.9rem;\">ACTIVE</span>\r\n                </div>\r\n            </div>\r\n            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1.5rem;\">\r\n                <div style=\"background: rgba(255,255,255,0.1); padding: 1.2rem; border-radius: 12px;\">\r\n                    <p style=\"color: #f0fdf4; margin: 0; font-size: 0.9rem; margin-bottom: 0.3rem;\">Valid Until</p>\r\n                    <p style=\"color: white; margin: 0; font-size: 1.1rem; font-weight: 600;\">{current_subscription['end_date']}</p>\r\n                </div>\r\n                <div style=\"background: rgba(255,255,255,0.1); padding: 1.2rem; border-radius: 12px;\">\r\n                    <p style=\"color: #f0fdf4; margin: 0; font-size: 0.9rem; margin-bottom: 0.3rem;\">Annual Amount</p>\r\n                    <p style=\"color: white; margin: 0; font-size: 1.1rem; font-weight: 600;\">₹{current_subscription['price']}</p>\r\n                </div>\r\n                <div style=\"background: rgba(255,255,255,0.1); padding: 1.2rem; border-radius: 12px;\">\r\n                    <p style=\"color: #f0fdf4; margin: 0; font-size: 0.9rem; margin-bottom: 0.3rem;\">Payment Method</p>\r\n                    <p style=\"color: white; margin: 0; font-size: 1.1rem; font-weight: 600;\">{current_subscription.get('payment_method', 'Bank Transfer')}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \"\"\", unsafe_allow_html=True)\r\n    \r\n    # Display plans\r\n    plans = get_billing_plans()\r\n    \r\n    st.markdown(\"<div class='plan-container'>\", unsafe_allow_html=True)\r\n    \r\n    col1, col2 = st.columns(2, gap=\"large\")\r\n    \r\n    for i, plan in enumerate(plans):\r\n        with col1 if i == 0 else col2:\r\n            popular_class = \"enterprise\" if plan['popular'] else \"\"\r\n            features_html = \"\".join([f\"<li>{feature}</li>\" for feature in plan['features']])\r\n            \r\n            st.markdown(f\"\"\"\r\n            <div class=\"plan-card {popular_class}\">\r\n                <div class=\"plan-title\">\r\n                    <i class=\"fas fa-school\"></i>\r\n                    {plan['name']}\r\n                </div>\r\n                <div class=\"plan-price\">₹{plan['price_monthly']}</div>\r\n                <div class=\"plan-duration\">per month</div>\r\n                <div style=\"text-align: center; color: #94a3b8; margin-bottom: 1rem;\">\r\n                    Annual: ₹{plan['price_annual']} / ${plan['price_usd_annual']}\r\n                </div>\r\n                <ul class=\"feature-list\">\r\n                    {features_html}\r\n                </ul>\r\n            </div>\r\n            \"\"\", unsafe_allow_html=True)\r\n            \r\n            if st.button(f\"Choose {plan['name']} Plan\", key=f\"plan_{plan['id']}\", use_container_width=True):\r\n                st.session_state['selected_plan'] = plan\r\n                st.session_state['show_payment'] = True\r\n                st.rerun()\r\n    \r\n    st.markdown(\"</div>\", unsafe_allow_html=True)\r\n    \r\n    # Payment section\r\n    if st.session_state.get('show_payment'):\r\n        render_payment_section()\r\n\r\ndef render_payment_section():\r\n    \"\"\"Render payment options section\"\"\"\r\n    \r\n    if 'selected_plan' not in st.session_state:\r\n        return\r\n    \r\n    plan = st.session_state['selected_plan']\r\n    price_to_display = plan.get('price_annual', plan.get('price_monthly', 0))\r\n    \r\n    st.markdown(f\"\"\"\r\n<div style=\"background: linear-gradient(135deg, #1e293b 0%, #334155 100%); \r\n            padding: 2rem; border-radius: 16px; margin-bottom: 2rem; text-align: center;\">\r\n    <h3 style=\"color: white;\">Order Summary</h3>\r\n    <p style=\"color: #94a3b8;\"><strong>Plan:</strong> {plan['name']}</p>\r\n    <p style=\"color: #94a3b8;\"><strong>Duration:</strong> {plan['duration']} months</p>\r\n    <p style=\"color: white; font-size: 2rem; font-weight: bold;\">\r\n        Total: <span style=\"color: #3b82f6;\">₹{price_to_display}</span>\r\n    </p>\r\n</div>\r\n\"\"\", unsafe_allow_html=True)\r\n    \r\n    st.markdown(\"### Select Payment Method\")\r\n    \r\n    # UPI Payment Options\r\n    with st.expander(\"💳 UPI Payment (Recommended)\", expanded=True):\r\n        col1, col2 = st.columns(2)\r\n        \r\n        with col1:\r\n            st.markdown(\"\"\"\r\n            <div class=\"payment-method\">\r\n                <div class=\"payment-title\">\r\n                    <i class=\"fas fa-mobile-alt icon\"></i>PhonePe / Google Pay\r\n                </div>\r\n                <div class=\"payment-details\">\r\n                    <strong>UPI ID:</strong> 9520496351@ptaxis<br>\r\n                    <strong>Merchant:</strong> RK Coders<br>\r\n                    <strong>Amount:</strong> $\"\"\" + str(plan['price']) + \"\"\"\r\n                </div>\r\n            </div>\r\n            \"\"\", unsafe_allow_html=True)\r\n            \r\n            if st.button(\"Pay with PhonePe/GPay\", key=\"upi_ptaxis\", use_container_width=True):\r\n                process_payment(plan, 'UPI - PhonePe/GPay')\r\n        \r\n        with col2:\r\n            st.markdown(\"\"\"\r\n            <div class=\"payment-method\">\r\n                <div class=\"payment-title\">\r\n                    <i class=\"fas fa-university icon\"></i>UPI (IBL Bank)\r\n                </div>\r\n                <div class=\"payment-details\">\r\n                    <strong>UPI ID:</strong> 9520496351@ibl<br>\r\n                    <strong>Merchant:</strong> RK Coders<br>\r\n                    <strong>Amount:</strong> $\"\"\" + str(plan['price']) + \"\"\"\r\n                </div>\r\n            </div>\r\n            \"\"\", unsafe_allow_html=True)\r\n            \r\n            if st.button(\"Pay with UPI (IBL)\", key=\"upi_ibl\", use_container_width=True):\r\n                process_payment(plan, 'UPI - IBL Bank')\r\n    \r\n    # Bank Transfer\r\n    with st.expander(\"🏦 Direct Bank Transfer\"):\r\n        st.markdown(\"\"\"\r\n        <div class=\"payment-method\">\r\n            <div class=\"payment-title\">\r\n                <i class=\"fas fa-university icon\"></i>Bank of Baroda Transfer\r\n            </div>\r\n            <div class=\"payment-details\">\r\n                <strong>Account Number:</strong> 33880100003230<br>\r\n                <strong>Account Holder:</strong> Banti Birla<br>\r\n                <strong>Bank:</strong> Bank of Baroda<br>\r\n                <strong>Company:</strong> RK Coders<br>\r\n                <strong>Amount to Transfer:</strong> $\"\"\" + str(plan['price']) + \"\"\"<br>\r\n                <br>\r\n                <em>Please include your school ID (\"\"\" + st.session_state.get('current_school', 'S001') + \"\"\") in the transfer reference.</em>\r\n            </div>\r\n        </div>\r\n        \"\"\", unsafe_allow_html=True)\r\n        \r\n        if st.button(\"Confirm Bank Transfer Payment\", key=\"bank_transfer\", use_container_width=True):\r\n            process_payment(plan, 'Bank Transfer')\r\n    \r\n    # Card Payment (Display Only)\r\n    with st.expander(\"💳 Debit/Credit Card\"):\r\n        st.markdown(\"\"\"\r\n        <div class=\"payment-method\">\r\n            <div class=\"payment-title\">\r\n                <i class=\"fas fa-credit-card icon\"></i>Card Payment Details\r\n            </div>\r\n            <div class=\"payment-details\">\r\n                <strong>Card Number:</strong> 6522 9445 1254 1686<br>\r\n                <strong>Card Holder:</strong> Krishna Birla<br>\r\n                <strong>Company:</strong> RK Coders<br>\r\n                <br>\r\n                <em style=\"color: #ef4444;\">Note: For security, actual card payments would be processed through a secure payment gateway in production.</em>\r\n            </div>\r\n        </div>\r\n        \"\"\", unsafe_allow_html=True)\r\n        \r\n        if st.button(\"Process Card Payment\", key=\"card_payment\", use_container_width=True):\r\n            process_payment(plan, 'Debit Card')\r\n    \r\n    # Back button\r\n    if st.button(\"← Back to Plans\", use_container_width=True):\r\n        st.session_state.pop('selected_plan', None)\r\n        st.session_state.pop('show_payment', None)\r\n        st.experimental_rerun()\r\n\r\ndef process_payment(plan, payment_method):\r\n    \"\"\"Process the payment and create subscription\"\"\"\r\n    \r\n    school_id = st.session_state.get('current_school', 'S001')\r\n    \r\n    # Create payment record\r\n    transaction_id = create_payment_record(\r\n        school_id, \r\n        plan['id'], \r\n        plan['name'], \r\n        plan['price'], \r\n        payment_method\r\n    )\r\n    \r\n    if transaction_id:\r\n        st.markdown(f\"\"\"\r\n        <div class=\"success-message\">\r\n            <h3><i class=\"fas fa-check-circle\"></i> Payment Successful!</h3>\r\n            <p><strong>Transaction ID:</strong> {transaction_id}</p>\r\n            <p><strong>Plan:</strong> {plan['name']}</p>\r\n            <p><strong>Amount:</strong> ${plan['price']}</p>\r\n            <p><strong>Valid for:</strong> 12 months from today</p>\r\n            <p>Your subscription has been activated successfully!</p>\r\n        </div>\r\n        \"\"\", unsafe_allow_html=True)\r\n        \r\n        st.balloons()\r\n        \r\n        # Clear session state\r\n        time.sleep(2)\r\n        st.session_state.pop('selected_plan', None)\r\n        st.session_state.pop('show_payment', None)\r\n        st.experimental_rerun()\r\n    else:\r\n        st.markdown(\"\"\"\r\n        <div class=\"error-message\">\r\n            <h3><i class=\"fas fa-exclamation-triangle\"></i> Payment Failed</h3>\r\n            <p>There was an issue processing your payment. Please try again or contact support.</p>\r\n        </div>\r\n        \"\"\", unsafe_allow_html=True)\r\n\r\ndef render_subscription_analytics():\r\n    \"\"\"Render subscription analytics for admin\"\"\"\r\n    \r\n    st.subheader(\"📊 Subscription Analytics\")\r\n    \r\n    # Sample data for demonstration\r\n    subscription_data = {\r\n        'Plan': ['Professional', 'Enterprise'],\r\n        'Active Subscriptions': [45, 23],\r\n        'Monthly Revenue': [90000, 57500]\r\n    }\r\n    \r\n    col1, col2 = st.columns(2)\r\n    \r\n    with col1:\r\n        fig = px.pie(\r\n            values=subscription_data['Active Subscriptions'], \r\n            names=subscription_data['Plan'],\r\n            title=\"Subscription Distribution\",\r\n            color_discrete_sequence=['#3b82f6', '#8b5cf6']\r\n        )\r\n        fig.update_layout(\r\n            plot_bgcolor='rgba(0,0,0,0)',\r\n            paper_bgcolor='rgba(0,0,0,0)',\r\n            font_color='white'\r\n        )\r\n        st.plotly_chart(fig, use_container_width=True)\r\n    \r\n    with col2:\r\n        fig = px.bar(\r\n            x=subscription_data['Plan'],\r\n            y=subscription_data['Monthly Revenue'],\r\n            title=\"Revenue by Plan\",\r\n            color=subscription_data['Plan'],\r\n            color_discrete_sequence=['#3b82f6', '#8b5cf6']\r\n        )\r\n        fig.update_layout(\r\n            plot_bgcolor='rgba(0,0,0,0)',\r\n            paper_bgcolor='rgba(0,0,0,0)',\r\n            font_color='white',\r\n            xaxis=dict(color='white'),\r\n            yaxis=dict(color='white')\r\n        )\r\n        st.plotly_chart(fig, use_container_width=True)","size_bytes":22872},"backend/existing_modules/components/coverage_tracking.py":{"content":"import streamlit as st\r\nimport pandas as pd\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\nfrom datetime import datetime, timedelta\r\nimport os\r\n\r\n\r\ndef render_coverage_tracking_page(school_id, data_manager):\r\n    \"\"\"Render the class coverage tracking page\"\"\"\r\n    st.markdown(\r\n        \"\"\"<div style=\"margin-right: 5px;color:#1e3a8a;\"class=\"card-title\">\r\n           <H1> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" fill=\"currentColor\" viewBox=\"0 0 24 24\" style=\"margin-right: 10px;\">\r\n                <path d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01\"/>\r\n                <path d=\"M12 12v.01M12 16v.01M12 8v.01M16 12v.01M16 16v.01M16 8v.01M8 12v.01M8 16v.01M8 8v.01\"/>\r\n            </svg>\r\n            <span>Class Coverage Tracking</span></h!>\r\n        </div>\"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    # Create tabs for different sections\r\n    tab1, tab2, tab3 = st.tabs(\r\n        [\"Coverage Dashboard\", \"Record Coverage\", \"Historical Analysis\"]\r\n    )\r\n\r\n    # Function to load coverage data\r\n    def load_coverage_data():\r\n        if os.path.exists(\"coverage_tracking.csv\"):\r\n            try:\r\n                df = pd.read_csv(\"coverage_tracking.csv\")\r\n                # Convert date column to datetime if it exists\r\n                if \"date\" in df.columns:\r\n                    df[\"date\"] = pd.to_datetime(df[\"date\"])\r\n                return df\r\n            except Exception as e:\r\n                st.error(f\"Error loading coverage data: {str(e)}\")\r\n                return pd.DataFrame()\r\n        else:\r\n            # Create default structure if file doesn't exist\r\n            df = pd.DataFrame(\r\n                {\r\n                    \"date\": [],\r\n                    \"period\": [],\r\n                    \"class_name\": [],\r\n                    \"section\": [],\r\n                    \"subject\": [],\r\n                    \"original_teacher_id\": [],\r\n                    \"replacement_teacher_id\": [],\r\n                    \"status\": [],\r\n                    \"notes\": [],\r\n                }\r\n            )\r\n            df.to_csv(\"coverage_tracking.csv\", index=False)\r\n            return df\r\n\r\n    # Function to save coverage data\r\n    def save_coverage_data(df):\r\n        df.to_csv(\"coverage_tracking.csv\", index=False)\r\n\r\n    # Load coverage data\r\n    coverage_df = load_coverage_data()\r\n\r\n    # Tab 1: Coverage Dashboard\r\n    with tab1:\r\n        st.markdown(\"### Class Coverage Overview\")\r\n\r\n        # Date filter\r\n        col1, col2 = st.columns(2)\r\n        with col1:\r\n            start_date = st.date_input(\r\n                \"Start Date\", value=(datetime.now() - timedelta(days=7)).date()\r\n            )\r\n        with col2:\r\n            end_date = st.date_input(\"End Date\", value=datetime.now().date())\r\n\r\n        # Filter by date range\r\n        filtered_df = coverage_df.copy()\r\n        if not filtered_df.empty and \"date\" in filtered_df.columns:\r\n            filtered_df = filtered_df[\r\n                (filtered_df[\"date\"].dt.date >= start_date)\r\n                & (filtered_df[\"date\"].dt.date <= end_date)\r\n            ]\r\n\r\n        if filtered_df.empty:\r\n            st.info(\"No coverage data available for the selected date range.\")\r\n        else:\r\n            # Summary statistics\r\n            covered_count = len(filtered_df[filtered_df[\"status\"] == \"Covered\"])\r\n            uncovered_count = len(filtered_df[filtered_df[\"status\"] == \"Uncovered\"])\r\n            total_classes = len(filtered_df)\r\n            coverage_rate = (\r\n                (covered_count / total_classes * 100) if total_classes > 0 else 0\r\n            )\r\n\r\n            # Display summary metrics in cards\r\n            st.markdown(\r\n                \"\"\"\r\n            <style>\r\n            .metric-container {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                gap: 20px;\r\n                margin-bottom: 25px;\r\n            }\r\n            .metric-card {\r\n                background: linear-gradient(135deg, #ffffff, #f0f9ff);\r\n                border-radius: 16px;\r\n                padding: 20px;\r\n                flex: 1;\r\n                box-shadow: 0 6px 16px rgba(0,0,0,0.1);\r\n                border: 1px solid rgba(209, 217, 230, 0.5);\r\n                text-align: center;\r\n                transition: transform 0.3s ease;\r\n            }\r\n            .metric-card:hover {\r\n                transform: translateY(-5px);\r\n            }\r\n            .metric-value {\r\n                font-size: 32px;\r\n                font-weight: 700;\r\n                margin: 10px 0;\r\n            }\r\n            .metric-label {\r\n                font-size: 16px;\r\n                color: #6b7280;\r\n                margin-bottom: 5px;\r\n            }\r\n            .coverage-good {\r\n                color: #059669;\r\n            }\r\n            .coverage-medium {\r\n                color: #d97706;\r\n            }\r\n            .coverage-poor {\r\n                color: #dc2626;\r\n            }\r\n            </style>\r\n            \"\"\",\r\n                unsafe_allow_html=True,\r\n            )\r\n\r\n            coverage_class = (\r\n                \"coverage-good\"\r\n                if coverage_rate >= 90\r\n                else \"coverage-medium\" if coverage_rate >= 75 else \"coverage-poor\"\r\n            )\r\n\r\n            st.markdown(\r\n                f\"\"\"\r\n            <div class=\"metric-container\">\r\n                <div class=\"metric-card\">\r\n                    <div class=\"metric-label\">Total Classes</div>\r\n                    <div class=\"metric-value\">{total_classes}</div>\r\n                </div>\r\n                <div class=\"metric-card\">\r\n                    <div class=\"metric-label\">Covered Classes</div>\r\n                    <div class=\"metric-value\" style=\"color: #059669;\">{covered_count}</div>\r\n                </div>\r\n                <div class=\"metric-card\">\r\n                    <div class=\"metric-label\">Uncovered Classes</div>\r\n                    <div class=\"metric-value\" style=\"color: #dc2626;\">{uncovered_count}</div>\r\n                </div>\r\n                <div class=\"metric-card\">\r\n                    <div class=\"metric-label\">Coverage Rate</div>\r\n                    <div class=\"metric-value {coverage_class}\">{coverage_rate:.1f}%</div>\r\n                </div>\r\n            </div>\r\n            \"\"\",\r\n                unsafe_allow_html=True,\r\n            )\r\n\r\n            # Coverage by period\r\n            st.subheader(\"Coverage by Period\")\r\n\r\n            period_coverage = filtered_df.pivot_table(\r\n                index=\"period\", columns=\"status\", aggfunc=\"size\", fill_value=0\r\n            ).reset_index()\r\n\r\n            # Calculate total and coverage percentage\r\n            if (\r\n                \"Covered\" in period_coverage.columns\r\n                and \"Uncovered\" in period_coverage.columns\r\n            ):\r\n                period_coverage[\"Total\"] = (\r\n                    period_coverage[\"Covered\"] + period_coverage[\"Uncovered\"]\r\n                )\r\n                period_coverage[\"Coverage %\"] = (\r\n                    period_coverage[\"Covered\"] / period_coverage[\"Total\"] * 100\r\n                ).round(1)\r\n            elif \"Covered\" in period_coverage.columns:\r\n                period_coverage[\"Total\"] = period_coverage[\"Covered\"]\r\n                period_coverage[\"Coverage %\"] = 100.0\r\n            elif \"Uncovered\" in period_coverage.columns:\r\n                period_coverage[\"Total\"] = period_coverage[\"Uncovered\"]\r\n                period_coverage[\"Coverage %\"] = 0.0\r\n\r\n            # Create the bar chart\r\n            fig = px.bar(\r\n                period_coverage,\r\n                x=\"period\",\r\n                y=(\r\n                    [\"Covered\", \"Uncovered\"]\r\n                    if \"Covered\" in period_coverage.columns\r\n                    and \"Uncovered\" in period_coverage.columns\r\n                    else (\r\n                        [\"Covered\"]\r\n                        if \"Covered\" in period_coverage.columns\r\n                        else [\"Uncovered\"]\r\n                    )\r\n                ),\r\n                title=\"Class Coverage by Period\",\r\n                labels={\r\n                    \"period\": \"Period\",\r\n                    \"value\": \"Number of Classes\",\r\n                    \"variable\": \"Status\",\r\n                },\r\n                color_discrete_map={\"Covered\": \"#10b981\", \"Uncovered\": \"#ef4444\"},\r\n            )\r\n\r\n            fig.update_layout(barmode=\"stack\")\r\n\r\n            st.plotly_chart(fig, use_container_width=True)\r\n\r\n            # Add line chart for coverage percentage\r\n            if \"Coverage %\" in period_coverage.columns:\r\n                fig2 = px.line(\r\n                    period_coverage,\r\n                    x=\"period\",\r\n                    y=\"Coverage %\",\r\n                    markers=True,\r\n                    title=\"Coverage Percentage by Period\",\r\n                    labels={\"period\": \"Period\", \"Coverage %\": \"Coverage Rate (%)\"},\r\n                )\r\n\r\n                fig2.update_traces(\r\n                    line=dict(color=\"#3b82f6\", width=3), marker=dict(size=10)\r\n                )\r\n\r\n                st.plotly_chart(fig2, use_container_width=True)\r\n\r\n            # Coverage by subject\r\n            st.subheader(\"Coverage by Subject\")\r\n\r\n            subject_coverage = filtered_df.pivot_table(\r\n                index=\"subject\", columns=\"status\", aggfunc=\"size\", fill_value=0\r\n            ).reset_index()\r\n\r\n            # Calculate total and coverage percentage\r\n            if (\r\n                \"Covered\" in subject_coverage.columns\r\n                and \"Uncovered\" in subject_coverage.columns\r\n            ):\r\n                subject_coverage[\"Total\"] = (\r\n                    subject_coverage[\"Covered\"] + subject_coverage[\"Uncovered\"]\r\n                )\r\n                subject_coverage[\"Coverage %\"] = (\r\n                    subject_coverage[\"Covered\"] / subject_coverage[\"Total\"] * 100\r\n                ).round(1)\r\n\r\n                # Sort by coverage percentage\r\n                subject_coverage = subject_coverage.sort_values(\r\n                    \"Coverage %\", ascending=False\r\n                )\r\n\r\n                # Create the horizontal bar chart\r\n                fig3 = px.bar(\r\n                    subject_coverage,\r\n                    y=\"subject\",\r\n                    x=[\"Covered\", \"Uncovered\"],\r\n                    title=\"Class Coverage by Subject\",\r\n                    labels={\r\n                        \"subject\": \"Subject\",\r\n                        \"value\": \"Number of Classes\",\r\n                        \"variable\": \"Status\",\r\n                    },\r\n                    color_discrete_map={\"Covered\": \"#10b981\", \"Uncovered\": \"#ef4444\"},\r\n                    orientation=\"h\",\r\n                )\r\n\r\n                fig3.update_layout(barmode=\"stack\")\r\n\r\n                st.plotly_chart(fig3, use_container_width=True)\r\n\r\n            # Recent uncovered classes\r\n            st.subheader(\"Recent Uncovered Classes\")\r\n\r\n            uncovered_classes = filtered_df[\r\n                filtered_df[\"status\"] == \"Uncovered\"\r\n            ].sort_values(\"date\", ascending=False)\r\n\r\n            if uncovered_classes.empty:\r\n                st.success(\"No uncovered classes in the selected date range! 🎉\")\r\n            else:\r\n                # Display in a formatted table with custom styles\r\n                st.markdown(\r\n                    \"\"\"\r\n                <style>\r\n                .uncovered-table {\r\n                    width: 100%;\r\n                    border-collapse: collapse;\r\n                    margin: 20px 0;\r\n                    border-radius: 10px;\r\n                    overflow: hidden;\r\n                    box-shadow: 0 4px 12px rgba(0,0,0,0.08);\r\n                }\r\n                .uncovered-table th {\r\n                    background-color: #f43f5e;\r\n                    color: white;\r\n                    text-align: left;\r\n                    padding: 12px 15px;\r\n                    font-weight: 600;\r\n                }\r\n                .uncovered-table td {\r\n                    padding: 10px 15px;\r\n                    border-bottom: 1px solid #e5e7eb;\r\n                }\r\n                .uncovered-table tr:nth-child(even) {\r\n                    background-color: #fef2f2;\r\n                }\r\n                .uncovered-table tr:hover {\r\n                    background-color: #fee2e2;\r\n                }\r\n                .uncovered-table tr:last-child td {\r\n                    border-bottom: none;\r\n                }\r\n                </style>\r\n                \"\"\",\r\n                    unsafe_allow_html=True,\r\n                )\r\n\r\n                # Display only first 10 records\r\n                uncovered_display = uncovered_classes.head(10)\r\n\r\n                # Format date for display\r\n                uncovered_display[\"date\"] = uncovered_display[\"date\"].dt.strftime(\r\n                    \"%Y-%m-%d\"\r\n                )\r\n\r\n                # Select and rename columns for display\r\n                display_cols = [\r\n                    \"date\",\r\n                    \"period\",\r\n                    \"class_name\",\r\n                    \"section\",\r\n                    \"subject\",\r\n                    \"original_teacher_id\",\r\n                ]\r\n                display_names = [\r\n                    \"Date\",\r\n                    \"Period\",\r\n                    \"Class\",\r\n                    \"Section\",\r\n                    \"Subject\",\r\n                    \"Original Teacher\",\r\n                ]\r\n\r\n                if len(uncovered_display) > 0:\r\n                    table_html = \"<table class='uncovered-table'><thead><tr>\"\r\n\r\n                    # Add headers\r\n                    for col_name in display_names:\r\n                        table_html += f\"<th>{col_name}</th>\"\r\n\r\n                    table_html += \"</tr></thead><tbody>\"\r\n\r\n                    # Add rows\r\n                    for _, row in uncovered_display.iterrows():\r\n                        table_html += \"<tr>\"\r\n                        for col in display_cols:\r\n                            table_html += f\"<td>{row[col]}</td>\"\r\n                        table_html += \"</tr>\"\r\n\r\n                    table_html += \"</tbody></table>\"\r\n\r\n                    st.markdown(table_html, unsafe_allow_html=True)\r\n\r\n                    if len(uncovered_classes) > 10:\r\n                        st.caption(\r\n                            f\"Showing 10 out of {len(uncovered_classes)} uncovered classes.\"\r\n                        )\r\n\r\n    # Tab 2: Record Coverage\r\n    with tab2:\r\n        st.markdown(\"### Record Class Coverage\")\r\n\r\n        # Get teacher list from users.csv\r\n        users_df = (\r\n            pd.read_csv(\"users.csv\") if os.path.exists(\"users.csv\") else pd.DataFrame()\r\n        )\r\n\r\n        # Check if we're in edit mode\r\n        if \"edit_coverage_index\" not in st.session_state:\r\n            st.session_state.edit_coverage_index = None\r\n\r\n        # Edit mode selector\r\n        edit_mode = st.checkbox(\"Edit Existing Coverage Record\")\r\n\r\n        if edit_mode and not coverage_df.empty:\r\n            # Format date for display\r\n            if \"date\" in coverage_df.columns:\r\n                display_df = coverage_df.copy()\r\n                display_df[\"date_str\"] = display_df[\"date\"].dt.strftime(\"%Y-%m-%d\")\r\n                display_options = [\r\n                    f\"{row['date_str']} - Period {row['period']} - {row['class_name']}{row['section']} - {row['subject']}\"\r\n                    for _, row in display_df.iterrows()\r\n                ]\r\n\r\n                coverage_selection = st.selectbox(\r\n                    \"Select Record to Edit\",\r\n                    options=range(len(display_options)),\r\n                    format_func=lambda x: display_options[x],\r\n                )\r\n\r\n                # Load the selected coverage data\r\n                selected_row = display_df.iloc[coverage_selection]\r\n                st.session_state.edit_coverage_index = coverage_selection\r\n            else:\r\n                st.warning(\"No valid coverage data available to edit.\")\r\n                selected_row = pd.Series()\r\n                st.session_state.edit_coverage_index = None\r\n        else:\r\n            selected_row = pd.Series(\r\n                {\r\n                    \"date\": pd.Timestamp(datetime.now().date()),\r\n                    \"period\": 1,\r\n                    \"class_name\": \"\",\r\n                    \"section\": \"\",\r\n                    \"subject\": \"\",\r\n                    \"original_teacher_id\": \"\",\r\n                    \"replacement_teacher_id\": None,\r\n                    \"status\": \"Uncovered\",\r\n                    \"notes\": \"\",\r\n                }\r\n            )\r\n            st.session_state.edit_coverage_index = None\r\n\r\n        # Create form for adding/editing\r\n        with st.form(\"coverage_form\"):\r\n            col1, col2 = st.columns(2)\r\n\r\n            with col1:\r\n                if isinstance(selected_row.get(\"date\"), pd.Timestamp):\r\n                    default_date = selected_row.get(\"date\").date()\r\n                else:\r\n                    default_date = datetime.now().date()\r\n\r\n                record_date = st.date_input(\"Date\", value=default_date)\r\n\r\n                period = st.number_input(\r\n                    \"Period\",\r\n                    min_value=1,\r\n                    max_value=8,\r\n                    value=int(selected_row.get(\"period\", 1)),\r\n                )\r\n\r\n                class_name = st.text_input(\r\n                    \"Class Name\", value=selected_row.get(\"class_name\", \"\")\r\n                )\r\n\r\n                section = st.text_input(\r\n                    \"Section\", value=selected_row.get(\"section\", \"\")\r\n                )\r\n\r\n            with col2:\r\n                subject = st.text_input(\r\n                    \"Subject\", value=selected_row.get(\"subject\", \"\")\r\n                )\r\n\r\n                # Create teacher options for selection\r\n                if (\r\n                    not users_df.empty\r\n                    and \"teacher_id\" in users_df.columns\r\n                    and \"name\" in users_df.columns\r\n                ):\r\n                    teacher_options = [\r\n                        {\"id\": row[\"teacher_id\"], \"name\": row[\"name\"]}\r\n                        for _, row in users_df.iterrows()\r\n                        if \"teacher_id\" in row and \"name\" in row\r\n                    ]\r\n\r\n                    teacher_ids = [t[\"id\"] for t in teacher_options]\r\n                    teacher_display = {\r\n                        t[\"id\"]: f\"{t['name']} ({t['id']})\" for t in teacher_options\r\n                    }\r\n\r\n                    # Default to first teacher if none selected\r\n                    default_teacher_index = 0\r\n                    if selected_row.get(\"original_teacher_id\") in teacher_ids:\r\n                        default_teacher_index = teacher_ids.index(\r\n                            selected_row.get(\"original_teacher_id\")\r\n                        )\r\n\r\n                    original_teacher_id = st.selectbox(\r\n                        \"Original Teacher\",\r\n                        options=teacher_ids,\r\n                        format_func=lambda x: teacher_display.get(x, x),\r\n                        index=default_teacher_index,\r\n                    )\r\n\r\n                    # For replacement teacher, add \"None\" option\r\n                    replacement_options = [\"None\"] + teacher_ids\r\n                    replacement_display = {\"None\": \"None (Uncovered)\"}\r\n                    replacement_display.update(teacher_display)\r\n\r\n                    # Default to \"None\" if no replacement\r\n                    default_replacement_index = 0\r\n                    if selected_row.get(\"replacement_teacher_id\") in teacher_ids:\r\n                        default_replacement_index = (\r\n                            teacher_ids.index(\r\n                                selected_row.get(\"replacement_teacher_id\")\r\n                            )\r\n                            + 1\r\n                        )\r\n\r\n                    replacement_selection = st.selectbox(\r\n                        \"Replacement Teacher\",\r\n                        options=replacement_options,\r\n                        format_func=lambda x: replacement_display.get(x, x),\r\n                        index=default_replacement_index,\r\n                    )\r\n\r\n                    replacement_teacher_id = (\r\n                        None\r\n                        if replacement_selection == \"None\"\r\n                        else replacement_selection\r\n                    )\r\n                else:\r\n                    original_teacher_id = st.text_input(\r\n                        \"Original Teacher ID\",\r\n                        value=selected_row.get(\"original_teacher_id\", \"\"),\r\n                    )\r\n\r\n                    replacement_input = st.text_input(\r\n                        \"Replacement Teacher ID (leave blank if uncovered)\",\r\n                        value=(\r\n                            \"\"\r\n                            if pd.isna(selected_row.get(\"replacement_teacher_id\"))\r\n                            else selected_row.get(\"replacement_teacher_id\", \"\")\r\n                        ),\r\n                    )\r\n\r\n                    replacement_teacher_id = (\r\n                        None if replacement_input == \"\" else replacement_input\r\n                    )\r\n\r\n                status = (\r\n                    \"Covered\" if replacement_teacher_id is not None else \"Uncovered\"\r\n                )\r\n\r\n            notes = st.text_area(\"Notes\", value=selected_row.get(\"notes\", \"\"))\r\n\r\n            submitted = st.form_submit_button(\"Save Coverage Record\")\r\n\r\n            if submitted:\r\n                if (\r\n                    not class_name\r\n                    or not section\r\n                    or not subject\r\n                    or not original_teacher_id\r\n                ):\r\n                    st.error(\r\n                        \"Class Name, Section, Subject, and Original Teacher are required fields.\"\r\n                    )\r\n                else:\r\n                    # Prepare new data\r\n                    new_data = {\r\n                        \"date\": pd.Timestamp(record_date),\r\n                        \"period\": period,\r\n                        \"class_name\": class_name,\r\n                        \"section\": section,\r\n                        \"subject\": subject,\r\n                        \"original_teacher_id\": original_teacher_id,\r\n                        \"replacement_teacher_id\": replacement_teacher_id,\r\n                        \"status\": status,\r\n                        \"notes\": notes,\r\n                    }\r\n\r\n                    # Update or add new record\r\n                    if st.session_state.edit_coverage_index is not None:\r\n                        # Update existing\r\n                        coverage_df.iloc[st.session_state.edit_coverage_index] = (\r\n                            new_data\r\n                        )\r\n                        success_msg = f\"Updated coverage record for {class_name}{section} period {period}\"\r\n                    else:\r\n                        # Add new\r\n                        coverage_df = pd.concat(\r\n                            [coverage_df, pd.DataFrame([new_data])], ignore_index=True\r\n                        )\r\n                        success_msg = f\"Added new coverage record for {class_name}{section} period {period}\"\r\n\r\n                    # Save back to CSV\r\n                    save_coverage_data(coverage_df)\r\n                    st.success(success_msg)\r\n\r\n                    # Reset edit state\r\n                    st.session_state.edit_coverage_index = None\r\n\r\n                    # Refresh the form\r\n                    st.rerun()\r\n\r\n    # Tab 3: Historical Analysis\r\n    with tab3:\r\n        st.markdown(\"### Historical Coverage Analysis\")\r\n\r\n        if coverage_df.empty or \"date\" not in coverage_df.columns:\r\n            st.info(\"Not enough historical data available for analysis.\")\r\n        else:\r\n            # Convert date to datetime for analysis\r\n            coverage_df[\"date\"] = pd.to_datetime(coverage_df[\"date\"])\r\n\r\n            # Weekly analysis\r\n            st.subheader(\"Weekly Coverage Trend\")\r\n\r\n            # Group by week and calculate coverage metrics\r\n            coverage_df[\"week\"] = coverage_df[\"date\"].dt.isocalendar().week\r\n            coverage_df[\"year\"] = coverage_df[\"date\"].dt.isocalendar().year\r\n\r\n            weekly_data = (\r\n                coverage_df.groupby([\"year\", \"week\"])\r\n                .agg(\r\n                    total=(\"status\", \"count\"),\r\n                    covered=(\"status\", lambda x: (x == \"Covered\").sum()),\r\n                    week_start=(\"date\", \"min\"),\r\n                )\r\n                .reset_index()\r\n            )\r\n\r\n            weekly_data[\"coverage_rate\"] = (\r\n                weekly_data[\"covered\"] / weekly_data[\"total\"] * 100\r\n            ).round(1)\r\n            weekly_data[\"week_label\"] = weekly_data[\"week_start\"].dt.strftime(\"%b %d\")\r\n\r\n            # Sort by date\r\n            weekly_data = weekly_data.sort_values(\"week_start\")\r\n\r\n            # Create the combined chart\r\n            fig4 = go.Figure()\r\n\r\n            # Add bar chart for total classes\r\n            fig4.add_trace(\r\n                go.Bar(\r\n                    x=weekly_data[\"week_label\"],\r\n                    y=weekly_data[\"total\"],\r\n                    name=\"Total Classes\",\r\n                    marker_color=\"#94a3b8\",\r\n                )\r\n            )\r\n\r\n            # Add bar chart for covered classes\r\n            fig4.add_trace(\r\n                go.Bar(\r\n                    x=weekly_data[\"week_label\"],\r\n                    y=weekly_data[\"covered\"],\r\n                    name=\"Covered Classes\",\r\n                    marker_color=\"#10b981\",\r\n                )\r\n            )\r\n\r\n            # Add line chart for coverage rate\r\n            fig4.add_trace(\r\n                go.Scatter(\r\n                    x=weekly_data[\"week_label\"],\r\n                    y=weekly_data[\"coverage_rate\"],\r\n                    name=\"Coverage Rate (%)\",\r\n                    yaxis=\"y2\",\r\n                    line=dict(color=\"#3b82f6\", width=3),\r\n                    marker=dict(size=8),\r\n                )\r\n            )\r\n\r\n            # Update layout\r\n            fig4.update_layout(\r\n                title=\"Weekly Coverage Trend\",\r\n                xaxis_title=\"Week Starting\",\r\n                yaxis_title=\"Number of Classes\",\r\n                yaxis2=dict(\r\n                    title=\"Coverage Rate (%)\",\r\n                    title_font=dict(color=\"#3b82f6\"),\r\n                    tickfont=dict(color=\"#3b82f6\"),\r\n                    overlaying=\"y\",\r\n                    side=\"right\",\r\n                    range=[0, 100],\r\n                ),\r\n                legend=dict(\r\n                    orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1\r\n                ),\r\n                barmode=\"group\",\r\n            )\r\n\r\n            st.plotly_chart(fig4, use_container_width=True)\r\n\r\n            # Day of week analysis\r\n            st.subheader(\"Coverage by Day of Week\")\r\n\r\n            # Add day of week\r\n            coverage_df[\"day_of_week\"] = coverage_df[\"date\"].dt.day_name()\r\n\r\n            # Correct order for days of week\r\n            day_order = [\r\n                \"Monday\",\r\n                \"Tuesday\",\r\n                \"Wednesday\",\r\n                \"Thursday\",\r\n                \"Friday\",\r\n                \"Saturday\",\r\n                \"Sunday\",\r\n            ]\r\n\r\n            # Group by day of week\r\n            day_data = (\r\n                coverage_df.groupby(\"day_of_week\")\r\n                .agg(\r\n                    total=(\"status\", \"count\"),\r\n                    covered=(\"status\", lambda x: (x == \"Covered\").sum()),\r\n                )\r\n                .reset_index()\r\n            )\r\n\r\n            # Calculate coverage rate\r\n            day_data[\"coverage_rate\"] = (\r\n                day_data[\"covered\"] / day_data[\"total\"] * 100\r\n            ).round(1)\r\n\r\n            # Sort by day of week\r\n            day_data[\"day_order\"] = day_data[\"day_of_week\"].apply(\r\n                lambda x: day_order.index(x) if x in day_order else 999\r\n            )\r\n            day_data = day_data.sort_values(\"day_order\")\r\n\r\n            # Create the chart\r\n            fig5 = px.bar(\r\n                day_data,\r\n                x=\"day_of_week\",\r\n                y=[\"covered\", \"total\"],\r\n                barmode=\"group\",\r\n                title=\"Coverage by Day of Week\",\r\n                labels={\r\n                    \"day_of_week\": \"Day\",\r\n                    \"value\": \"Number of Classes\",\r\n                    \"variable\": \"Type\",\r\n                },\r\n                color_discrete_map={\"covered\": \"#10b981\", \"total\": \"#94a3b8\"},\r\n            )\r\n\r\n            # Add coverage rate line\r\n            fig5.add_scatter(\r\n                x=day_data[\"day_of_week\"],\r\n                y=day_data[\"coverage_rate\"],\r\n                mode=\"lines+markers\",\r\n                name=\"Coverage Rate (%)\",\r\n                yaxis=\"y2\",\r\n                line=dict(color=\"#3b82f6\", width=3),\r\n                marker=dict(size=10),\r\n            )\r\n\r\n            # Update layout\r\n            fig5.update_layout(\r\n                xaxis_title=\"Day of Week\",\r\n                yaxis_title=\"Number of Classes\",\r\n                yaxis2=dict(\r\n                    title=\"Coverage Rate (%)\",\r\n                    title_font=dict(color=\"#3b82f6\"),\r\n                    tickfont=dict(color=\"#3b82f6\"),\r\n                    overlaying=\"y\",\r\n                    side=\"right\",\r\n                    range=[0, 100],\r\n                ),\r\n            )\r\n\r\n            st.plotly_chart(fig5, use_container_width=True)\r\n\r\n            # Class coverage heatmap\r\n            st.subheader(\"Class Period Coverage Heatmap\")\r\n\r\n            # Create pivot table for heatmap\r\n            heatmap_data = pd.pivot_table(\r\n                coverage_df,\r\n                values=\"status\",\r\n                index=\"class_name\",\r\n                columns=\"period\",\r\n                aggfunc=lambda x: (x == \"Covered\").mean() * 100,\r\n                fill_value=0,\r\n            )\r\n\r\n            # Sort classes by overall coverage\r\n            heatmap_data[\"total\"] = heatmap_data.mean(axis=1)\r\n            heatmap_data = heatmap_data.sort_values(\"total\", ascending=False)\r\n            heatmap_data = heatmap_data.drop(columns=[\"total\"])\r\n\r\n            # Create heatmap\r\n            fig6 = px.imshow(\r\n                heatmap_data,\r\n                labels=dict(x=\"Period\", y=\"Class\", color=\"Coverage %\"),\r\n                x=[f\"Period {i}\" for i in heatmap_data.columns],\r\n                y=heatmap_data.index,\r\n                color_continuous_scale=\"RdYlGn\",\r\n                range_color=[0, 100],\r\n                title=\"Class Coverage Rate by Period (%)\",\r\n            )\r\n\r\n            # Update layout\r\n            fig6.update_layout(\r\n                xaxis_title=\"Period\",\r\n                yaxis_title=\"Class\",\r\n                coloraxis_colorbar=dict(title=\"Coverage %\", ticksuffix=\"%\"),\r\n            )\r\n\r\n            st.plotly_chart(fig6, use_container_width=True)\r\n# test line to trigger git","size_bytes":31016},"backend/existing_modules/components/dashboard.py":{"content":"import streamlit as st\nfrom data_manager import DataManager\nimport pandas as pd\nfrom datetime import datetime, date, time\nimport json\nimport streamlit.components.v1 as components\nfrom streamlit.components.v1 import html\nimport os\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport calendar\nfrom streamlit_lottie import st_lottie\nfrom utils import get_ist_today\n\ndef get_calendar_dates():\n    if \"calendar_date\" not in st.session_state:\n        st.session_state.calendar_date = datetime.now()\n    return st.session_state.calendar_date\n\n\ndef change_month(delta):\n    current = get_calendar_dates()\n    new_date = current.replace(day=1)\n    if delta > 0:\n        # Move to next month\n        if new_date.month == 12:\n            new_date = new_date.replace(year=new_date.year + 1, month=1)\n        else:\n            new_date = new_date.replace(month=new_date.month + 1)\n    else:\n        # Move to previous month\n        if new_date.month == 1:\n            new_date = new_date.replace(year=new_date.year - 1, month=12)\n        else:\n            new_date = new_date.replace(month=new_date.month - 1)\n    st.session_state.calendar_date = new_date\n\n\ndef generate_calendar_days(current_date):\n    cal = calendar.monthcalendar(current_date.year, current_date.month)\n    html = \"\"\n    today = datetime.now().day\n    current_month = datetime.now().month\n    current_year = datetime.now().year\n\n    # First add weekday headers\n    weekdays = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n    for weekday in weekdays:\n        html += f'<div class=\"calendar-weekday\">{weekday}</div>'\n\n    # Then add days\n    for week in cal:\n        for day in week:\n            if day == 0:\n                html += '<div class=\"calendar-day empty\"></div>'\n            elif (\n                day == today\n                and current_date.month == current_month\n                and current_date.year == current_year\n            ):\n                html += f'<div class=\"calendar-day today\">{day}</div>'\n            else:\n                html += f'<div class=\"calendar-day\">{day}</div>'\n\n    return html\n\n\ndef render_dashboard(school_id, data_manager):\n    \"\"\"\n    Render the dashboard page, fetching data from the database.\n    \"\"\"\n\n    user_details = st.session_state.get(\"user_details\")\n    if not user_details:\n        st.error(\"Logged-in user details not found in session state.\")\n        st.warning(\"Dashboard render failed: user_details missing in session state.\")\n        # This might indicate a problem in the login process if authentication was successful\n        return  # Exit if user details not available\n\n    today = get_ist_today()\n    data_manager_instance = st.session_state.data_manager\n    auto_timing_data = data_manager_instance.get_arrangement_time(\n        school_id\n    )  # This returns a dict {\"hour\": h, \"minute\": m, \"enabled\": b}\n\n    def load_lottie_file(filepath: str):\n        with open(filepath, \"r\") as f:\n            return json.load(f)\n\n    # Safely extract hour, minute, enabled\n    auto_hour = auto_timing_data.get(\"hour\", 10)\n    auto_minute = auto_timing_data.get(\"minute\", 30)\n    auto_absent_enabled = auto_timing_data.get(\n        \"enabled\", True\n    )  # Default to True if not in DB\n\n    # Today's date string for display\n    today_date_display = datetime.now().strftime(\"%A, %B %d, %Y\")\n    col_welcome, col_animation = st.columns([3, 1])\n    with col_welcome:\n        st.markdown(\n            f\"\"\"\n        <style>\n        .logo-container {{\n            display: flex;\n            align-items: center;\n            text-align:left;\n            margin-top: -100px;\n            animation: fadeInUp 0.8s ease-out forwards;\n        }}\n        @keyframes fadeInUp {{\n            from {{\n                opacity: 0;\n                transform: translateY(20px);\n            }}\n            to {{\n                opacity: 1;\n                transform: translateY(0);\n            }}\n        }}\n        .logo-container img {{\n            width: 50px;\n            height: 50px;\n            margin-right: 10px;\n        }}\n        .welcome-text {{\n            font-size: 2.2rem;\n            font-weight: 700;\n            background: linear-gradient(90deg, #1E3A8A, #3B82F6);\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            margin-bottom: 5px;\n        }}\n        iframe.st-emotion-cache-1tvzk6f.e1begtbc0 {{\n        /* margin-top: -130px !important; /* Isko abhi comment karte hain */\n        transform: translateY(-110px) !important; /* Iski jagah yeh try karein */\n        margin-bottom: -150px !important; /* Yeh theek hai agar neeche ka space kam kar raha hai */\n        padding-right: 0 !important; /* \"none\" ki jagah \"0\" use karein */\n        display: block !important; /* Ensures it behaves like a block, helps with margins */\n        position: relative; /* Can help ensure transform and margins behave as expected */\n        z-index: 1;\n        \n        }}\n        .welcome-subtext {{\n            font-weight: 600;\n            color: #6c7293;\n            font-size: 1.1rem;\n        }}\n        </style>\n        <div class=\"logo-container\">\n            <div>\n                <h1 class=\"welcome-text\">Hi, welcome back!</h1>\n                <p class=\"welcome-subtext\">Your teacher analytics dashboard - {today.strftime('%A, %d %B %Y')}</p>\n            </div>\n        </div>\n        \"\"\",\n            unsafe_allow_html=True,\n        )\n\n    with col_animation:\n        try:\n            lottie_animation = load_lottie_file(\n                \"attached_assets/lottie_animation2.json\"\n            )\n            st_lottie(lottie_animation, height=170, width=170, key=\"dashboard_lottie2\")\n        except Exception as e:\n            st.write(\"🏫\")\n\n    # Get current user's details\n\n    stat_styles = \"\"\"\n      <style>\n    /* Common Card Styles */\n     @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n    .stat-card {\n        text-align: left;\n        box-shadow: 0 8px 16px rgba(0,0,0,0.15);\n        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n        padding: 1.8rem;\n        display: flex;\n        justify-content: space-between;\n        font-weight: 600;\n        # border-radius: 1rem;\n        margin-bottom: 25px;\n        opacity: 1;\n        transform: translateY(0);\n        overflow: hidden;\n        position: relative;\n    }\n    \n    .stat-card:before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(255, 255, 255, 0);\n        transition: all 0.3s ease;\n        z-index: 1;\n    }\n    \n    .stat-card:hover {\n        transform: translateY(-10px);\n        box-shadow: 0 15px 30px rgba(0,0,0,0.25);\n    }\n    \n    .stat-card:hover:before {\n        background: rgba(255, 255, 255, 0.1);\n    }\n    \n    .stat-content {\n        flex-grow: 1;\n        position: relative;\n        z-index: 2;\n    }\n    \n    .stat-icon {\n        width: 60px;\n        height: 60px;\n        border-radius: 50%;\n        background-color: rgba(255, 255, 255, 0.2);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        position: relative;\n        z-index: 2;\n        transition: all 0.3s ease;\n    }\n    \n    .stat-card:hover .stat-icon {\n        transform: scale(1.1) rotate(10deg);\n        background-color: rgba(255, 255, 255, 0.3);\n    }\n    \n    .card-title {\n        font-size: 32px;\n        font-weight: 700;\n        margin-bottom: 30px;\n        margin-top: 40px;\n    }\n\n    /* Animation Effects with enhanced gradients */\n    .total-teachers {\n        background: linear-gradient(135deg, #FF8F00, #FFC107);\n        animation: pulse 2s infinite alternate;\n    }\n\n    .present-today {\n        background: linear-gradient(135deg, #E91E63, #F06292);\n        animation: pulse 2.3s infinite alternate;\n    }\n\n    .absent-today {\n        background: linear-gradient(135deg, #2196F3, #64B5F6);\n        animation: pulse 2.6s infinite alternate;\n    }\n    div[data-testid=\"stHorizontalBlock\"] > div[data-testid=\"stColumn\"]:nth-of-type(2) {\n        # background-color: white !important;\n        box-sizing: border-box !important;\n        /* Resetting potential Streamlit margins/paddings that interfere */\n         /* Adjust if there's unwanted external spacing */\n        # margin-right: -50px !important;\n        margin-left:10px !important;\n        boarder-radius:none !important;\n    }\n  \n       \n        \n        /* Animation keyframes */\n        @keyframes fadeIn {\n            from { opacity: 0; }\n            to { opacity: 1; }\n        }\n        \n        @keyframes slideInFromLeft {\n            from { transform: translateX(-30px); opacity: 0; }\n            to { transform: translateX(0); opacity: 1; }\n        }\n        \n        @keyframes slideInFromRight {\n            from { transform: translateX(30px); opacity: 0; }\n            to { transform: translateX(0); opacity: 1; }\n        }\n        \n        @keyframes float {\n            0% { transform: translateY(0px); }\n            50% { transform: translateY(-10px); }\n            100% { transform: translateY(0px); }\n        }\n        \n        @keyframes pulse {\n            0% { box-shadow: 0 8px 16px rgba(0,0,0,0.15); }\n            100% { box-shadow: 0 12px 24px rgba(0,0,0,0.25); }\n        }\n    .feature1-card {\n            background: white;\n            border-radius: 16px; \n            padding: 25px;\n            margin: 15px 0;\n            box-shadow: \n                0 10px 15px -3px rgba(0, 0, 0, 0.1),\n                0 4px 6px -2px rgba(0, 0, 0, 0.05);\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n            transform-style: preserve-3d;\n            perspective: 1000px;\n            position: relative;\n            border: 1px solid rgba(209, 213, 219, 0.3);\n        }\n        \n        .feature1-card:hover {\n            transform: translateY(-10px) rotateX(5deg) rotateY(5deg);\n            box-shadow: \n                0 20px 25px -5px rgba(0, 0, 0, 0.1),\n                0 10px 10px -5px rgba(0, 0, 0, 0.04);\n        }\n        \n        .feature1-card::after {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            border-radius: 16px;\n            background: linear-gradient(\n                135deg, \n                rgba(255, 255, 255, 0.3) 0%, \n                rgba(255, 255, 255, 0) 50%\n            );\n            z-index: 1;\n            pointer-events: none;\n        }\n        \n        .feature1-icon {\n            background: linear-gradient(135deg, #667eea, #764ba2);\n            width: 60px;\n            height: 60px;\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-bottom: 15px;\n            box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n        }\n        \n        .feature1-title {\n            font-size: 20px;\n            font-weight: 600;\n            margin-bottom: 10px;\n            color: #1a202c;\n            position: relative;\n            z-index: 2;\n        }\n        \n        .feature1-description {\n            line-height: 1.6;\n            position: relative;\n            z-index: 2;\n            font-weight: 600;\n            color: #6c7293;\n            font-size: 1.1rem;\"\n        }\n          /* Attendance timing notification */\n        .auto-absent-notice {\n            background: linear-gradient(135deg, #FEF3C7, #FEF9C3);\n            border-left: 5px solid #F59E0B;\n            padding: 16px 20px;\n            border-radius: 8px;\n            margin: 30px 0;\n            display: flex;\n            align-items: center;\n        }\n        \n        .notice-icon {\n            min-width: 40px;\n            height: 40px;\n            border-radius: 50%;\n            background: #FEF3C7;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-right: 16px;\n            border: 2px solid #F59E0B;\n        }\n        \n        .notice-content {\n            flex: 1;\n        }\n        \n        .notice-title {\n            font-size: 1.1rem;\n            font-weight: 600;\n            color: #92400E;\n            margin: 0 0 5px 0;\n        }\n        \n        .notice-text {\n            font-size: 0.95rem;\n            color: #92400E;\n            margin: 0;\n            opacity: 0.9;\n        }\n</style>\n    \"\"\"\n    st.markdown(stat_styles, unsafe_allow_html=True)\n    timing_settings = data_manager_instance.get_auto_marking_timing(school_id)\n    reminder_time_str = \"N/A\"\n    # Check karo ki settings mili ya nahi\n    if timing_settings and \"hour\" in timing_settings and \"minute\" in timing_settings:\n        db_hour = timing_settings.get(\"hour\")\n        db_minute = timing_settings.get(\"minute\")\n        db_enabled = timing_settings.get(\n            \"enabled\", False\n        )  # Default to False if 'enabled' key missing\n\n        print(\n            f\"DEBUG Dashboard: Fetched timing - {db_hour}:{db_minute}, Enabled={db_enabled}\"\n        )\n\n        if db_enabled:\n            try:\n                reminder_time_obj = time(db_hour, db_minute)\n                reminder_time_str = reminder_time_obj.strftime(\n                    \"%I:%M %p\"\n                )  # Format: HH:MM AM/PM (e.g., 10:00 AM)\n            except ValueError:\n                # Agar invalid hour/minute save hua hai database mein\n                print(\n                    f\"ERROR Dashboard: Invalid time fetched from DB: {db_hour}:{db_minute}\"\n                )\n                reminder_time_str = (\n                    f\"{db_hour:02d}:{db_minute:02d}\"  # Fallback to HH:MM format\n                )\n    st.markdown(\n        f\"\"\"\n        <div class=\"auto-absent-notice\">\n            <div class=\"notice-icon\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"#F59E0B\" viewBox=\"0 0 16 16\">\n                  <path d=\"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z\"/>\n                </svg>\n            </div>\n            <div class=\"notice-content\">\n                <h3 class=\"notice-title\">Auto-Absent Marking Reminder</h3>\n                <p class=\"notice-text\">\n                     Teachers who have not marked their attendance by <b>{reminder_time_str}</b> will be automatically marked as absent.\n                                Please ensure all staff members record their attendance before this time.\n                </p>\n            </div>\n        </div>\n    \"\"\",\n        unsafe_allow_html=True,\n    )\n    # Statistics\n    (\n        col1,\n        col2,\n    ) = st.columns({1.6, 3})\n    data_manager_instance = st.session_state.data_manager\n    all_teachers_list = data_manager_instance.get_all_teachers(school_id)\n    total_teachers = len(all_teachers_list) if all_teachers_list else 0\n    present_today_list = data_manager_instance.get_present_teachers(school_id, today)\n    present_today = len(present_today_list) if present_today_list else 0\n\n    absent_today_list = data_manager_instance.get_absent_teachers(school_id, today)\n    absent_today = len(absent_today_list) if absent_today_list else 0\n\n    with col1:\n        # This CSS block contains all the new styling for the cards\n        st.markdown(\n            \"\"\"\n        <style>\n            @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap');\n            \n            .stat-v2-card {\n                font-family: 'Poppins', sans-serif;\n                color: white;\n                padding: 25px;\n                border-radius: 16px;\n                position: relative;\n                overflow: hidden;\n                transition: transform 0.3s ease, box-shadow 0.3s ease;\n                margin-bottom: 25px;\n                box-shadow: 0 10px 20px rgba(0,0,0,0.1);\n            }\n            .stat-v2-card:hover {\n                transform: translateY(-10px);\n                box-shadow: 0 15px 30px rgba(0,0,0,0.2);\n            }\n            .stat-v2-card .icon-bg {\n                position: absolute;\n                top: -20px;\n                right: -20px;\n                font-size: 100px;\n                opacity: 0.15;\n                transform: rotate(-20deg);\n                pointer-events: none;\n            }\n            .stat-v2-card .title {\n                font-weight: 600;\n                font-size: 1.1rem;\n                margin: 0 0 5px 0;\n            }\n            .stat-v2-card .value {\n                font-weight: 700;\n                font-size: 3rem;\n                line-height: 1;\n                margin: 0;\n            }\n            .stat-v2-card .subtitle {\n                font-weight: 400;\n                font-size: 0.9rem;\n                opacity: 0.8;\n                margin-top: 8px;\n            }\n            \n            /* Card Specific Gradients */\n            .total-teachers-v2 { background: linear-gradient(135deg, #4f46e5, #7c3aed); }\n            .present-today-v2 { background: linear-gradient(135deg, #059669, #10b981); }\n            .absent-today-v2 { background: linear-gradient(135deg, #dc2626, #ef4444); }\n        </style>\n        \"\"\",\n            unsafe_allow_html=True,\n        )\n\n        # Card 1: Total Teachers\n        st.markdown(\n            f\"\"\"\n        <div class=\"stat-v2-card total-teachers-v2\">\n            <div class=\"icon-bg\">👥</div>\n            <div class=\"title\">Total Teachers</div>\n            <div class=\"value\">{total_teachers}</div>\n            <div class=\"subtitle\">Registered in the school</div>\n        </div>\n        \"\"\",\n            unsafe_allow_html=True,\n        )\n\n        # Card 2: Present Today\n        st.markdown(\n            f\"\"\"\n        <div class=\"stat-v2-card present-today-v2\">\n            <div class=\"icon-bg\">✅</div>\n            <div class=\"title\">Present Today</div>\n            <div class=\"value\">{present_today}</div>\n            <div class=\"subtitle\">Marked as present</div>\n        </div>\n        \"\"\",\n            unsafe_allow_html=True,\n        )\n\n        # Card 3: Absent Today\n        st.markdown(\n            f\"\"\"\n        <div class=\"stat-v2-card absent-today-v2\">\n            <div class=\"icon-bg\">❌</div>\n            <div class=\"title\">Absent Today</div>\n            <div class=\"value\">{absent_today}</div>\n            <div class=\"subtitle\">Marked as absent</div>\n        </div>\n        \"\"\",\n            unsafe_allow_html=True,\n        )\n\n    def load_lottie_file(filepath: str):\n        with open(filepath, \"r\") as f:\n            return json.load(f)\n\n    with col2:\n        st.markdown(\n            \"<div style='margin-top: 79px;'></div>\", unsafe_allow_html=True\n        )  # Add vertical space\n\n        try:\n            lottie_animation = load_lottie_file(\"attached_assets/lottie_animation.json\")\n            st_lottie(lottie_animation, height=580, width=620, key=\"dashboard_lottie\")\n        except Exception as e:\n            st.write(\"🏫\")\n\n    st.markdown(\n        \"<h2 style='margin-top: 40px; margin-bottom: 20px; font-size: 24px;'>Management Features</h2>\",\n        unsafe_allow_html=True,\n    )\n    col1, col2, col3 = st.columns(3)\n\n    with col1:\n        st.markdown(\n            \"\"\"\n            <div class=\"feature1-card\">\n                <div class=\"feature1-icon\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"white\" viewBox=\"0 0 16 16\">\n                        <path d=\"M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4Zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10Z\"/>\n                    </svg>\n                </div>\n                <h3 class=\"feature1-title\">Teacher Attendance</h3>\n                <p class=\"feature1-description\">\n                    Mark and track teacher attendance with real-time updates.\n                    View historical attendance patterns and identify trends.\n                </p>\n            </div>\n            \"\"\",\n            unsafe_allow_html=True,\n        )\n\n    with col2:\n        st.markdown(\n            \"\"\"\n            <div class=\"feature1-card\">\n                <div class=\"feature1-icon\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"white\" viewBox=\"0 0 16 16\">\n                        <path d=\"M0 5a5.002 5.002 0 0 0 4.027 4.905 6.46 6.46 0 0 1 .544-2.073C3.695 7.536 3.132 6.864 3 5.91h-.5v-.426h.466V5.05c0-.046 0-.093.004-.135H2.5v-.427h.511C3.236 3.24 4.213 2.5 5.681 2.5c.316 0 .59.031.819.085v.733a3.46 3.46 0 0 0-.815-.082c-.919 0-1.538.466-1.734 1.252h1.917v.427h-1.98c-.003.046-.003.097-.003.147v.422h1.983v.427H3.93c.118.602.468 1.03 1.005 1.229a6.5 6.5 0 0 1 4.97-3.113A5.002 5.002 0 0 0 0 5zm16 5.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0zm-7.75 1.322c.069.835.746 1.485 1.964 1.562V14h.54v-.62c1.259-.086 1.996-.74 1.996-1.69 0-.865-.563-1.31-1.57-1.54l-.426-.1V8.374c.54.06.884.347.966.745h.948c-.07-.804-.779-1.433-1.914-1.502V7h-.54v.629c-1.076.103-1.808.732-1.808 1.622 0 .787.544 1.288 1.45 1.493l.358.085v1.78c-.554-.08-.92-.376-1.003-.787H8.25zm1.96-1.895c-.532-.12-.82-.364-.82-.732 0-.41.311-.719.824-.809v1.54h-.005zm.622 1.044c.645.145.943.38.943.796 0 .474-.37.8-1.02.86v-1.674l.077.018z\"/>\n                    </svg>\n                </div>\n                <h3 class=\"feature1-title\">Class Arrangements</h3>\n                <p class=\"feature1-description\">\n                    Automatically generate intelligent class arrangements for absent teachers.\n                    Ensure no class goes uncovered with smart teacher selection.\n                </p>\n            </div>\n            \"\"\",\n            unsafe_allow_html=True,\n        )\n\n    with col3:\n        st.markdown(\n            \"\"\"\n            <div class=\"feature1-card\">\n                <div class=\"feature1-icon\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"white\" viewBox=\"0 0 16 16\">\n                        <path d=\"M14.5 3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h13zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13z\"/>\n                        <path d=\"M7 5.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 1 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0zM7 9.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 0 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0z\"/>\n                    </svg>\n                </div>\n                <h3 class=\"feature1-title\">SMS Notifications</h3>\n                <p style=\"margin-top:10px;\"class=\"feature1-description\">\n                    Automatically notify teachers about their attendance status and arrangements.\n                    Real-time communication ensures everyone stays informed.\n                </p>\n            </div>\n            \"\"\",\n            unsafe_allow_html=True,\n        )\n    if \"data_manager\" not in st.session_state:\n        st.session_state.data_manager = DataManager()\n\n    st.markdown(\n        \"\"\"<div class=\"card-title\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" viewBox=\"0 0 16 16\" style=\"margin-right: 5px;\">\n                <path d=\"M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8Zm-7.978-1A.261.261 0 0 1 7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002a.274.274 0 0 1-.014.002H7.022ZM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM6.936 9.28a5.88 5.88 0 0 0-1.23-.247A7.35 7.35 0 0 0 5 9c-4 0-5 3-5 4 0 .667.333 1 1 1h4.216A2.238 2.238 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816ZM4.92 10A5.493 5.493 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275ZM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0Zm3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4Z\"/>\n            </svg>\n            Arrangements\n        </div>\"\"\",\n        unsafe_allow_html=True,\n    )\n\n    if not data_manager_instance.is_arrangement_suspended(school_id, today):\n        arrangements = data_manager_instance.get_todays_arrangements(school_id, today)\n        if not arrangements.empty:\n            st.dataframe(\n                arrangements,\n                column_config={\n                    \"absent_teacher\": \"Absent Teacher\",\n                    \"replacement_teacher\": \"Replacement Teacher\",\n                    \"class\": \"Class\",\n                    \"period\": \"Period\",\n                    \"status\": \"Status\",\n                },\n                hide_index=True,\n            )\n        else:\n            st.info(\"No arrangements required\")\n    else:\n        st.warning\n\n    # Weekly attendance summary (for admins)\n    col1, col2 = st.columns(2)\n    with col1:\n        # if st.session_state.role == \"admin\":\n        st.markdown(\n            \"\"\"<div class=\"card-title\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" viewBox=\"0 0 16 16\" style=\"margin-right: 5px;\">\n                    <path d=\"M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z\"/>\n                    <path d=\"M6.854 8.146a.5.5 0 1 0-.708.708L7.293 10H4.5a.5.5 0 0 0 0 1h2.793l-1.147 1.146a.5.5 0 0 0 .708.708l2-2a.5.5 0 0 0 0-.708l-2-2M8 13a1 1 0 1 1 0-2 1 1 0 0 1 0 2z\"/>\n                </svg>\n                Weekly Summary\n            </div>\"\"\",\n            unsafe_allow_html=True,\n        )\n\n        # Get data for the past week\n        end_date = today  # Assuming 'today' is defined\n        start_date = end_date - pd.Timedelta(days=6)\n\n        # CORRECTED CALL: Pass db_connection and school_id first\n        weekly_data = data_manager_instance.get_attendance_report(\n            school_id,\n            start_date=str(start_date),\n            end_date=str(end_date),  # <-- Corrected call\n        )\n\n        if not weekly_data.empty:\n            # Group by date and status (Pandas logic remains)\n            summary = (\n                weekly_data.groupby([\"date\", \"status\"]).size().reset_index(name=\"count\")\n            )\n            pivot_data = summary.pivot(\n                index=\"date\", columns=\"status\", values=\"count\"\n            ).reset_index()\n\n            # Fill NaN with 0\n            if \"present\" not in pivot_data.columns:\n                pivot_data[\"present\"] = 0\n            if \"absent\" not in pivot_data.columns:\n                pivot_data[\"absent\"] = 0\n\n            pivot_data = pivot_data.fillna(0)\n\n            # Create a bar chart (Plotly logic remains)\n            fig = go.Figure()\n\n            fig.add_trace(\n                go.Bar(\n                    x=pivot_data[\"date\"],\n                    y=pivot_data[\"present\"],\n                    name=\"Present\",\n                    marker_color=\"#2e7d32\",\n                )\n            )\n\n            fig.add_trace(\n                go.Bar(\n                    x=pivot_data[\"date\"],\n                    y=pivot_data[\"absent\"],\n                    name=\"Absent\",\n                    marker_color=\"#d32f2f\",\n                )\n            )\n\n            fig.update_layout(\n                barmode=\"stack\",\n                title=\"Weekly Attendance\",\n                xaxis_title=\"Date\",\n                yaxis_title=\"Number of Teachers\",\n                legend=dict(\n                    orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1\n                ),\n                margin=dict(l=0, r=0, t=40, b=0),\n                height=350,\n            )\n\n            st.plotly_chart(fig, use_container_width=True)\n        else:\n            st.info(\"No data available for the past week.\")\n    with col2:\n        # if st.session_state.role == \"admin\":\n        st.markdown(\n            \"\"\"<div class=\"card-title\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" viewBox=\"0 0 16 16\" style=\"margin-right: 5px; vertical-align: middle;\">\n       <path d=\"M1 11a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-3zm5-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7zm5-5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V2z\"/>\n        </svg>\n                Manual Vs Auto Absent\n            </div>\"\"\",\n            unsafe_allow_html=True,\n        )\n        data_manager_instance = st.session_state.data_manager  # Get the instance\n\n        end_date_chart = today  # Assuming 'today' is already defined as get_ist_today()\n        start_date_chart = end_date_chart - pd.Timedelta(days=30)\n        attendance_df_chart = data_manager_instance.get_attendance_report(\n            school_id, str(start_date_chart), str(end_date_chart)\n        )\n        if not attendance_df_chart.empty:\n            # --- Data Validation ---\n            # Check for required columns before proceeding\n            if (\n                \"is_auto\" not in attendance_df_chart.columns\n                or \"date\" not in attendance_df_chart.columns\n                or \"status\"\n                not in attendance_df_chart.columns  # Status is needed for filtering 'absent'\n            ):\n                st.error(\n                    \"⚠️ Required columns ('is_auto', 'date', 'status') missing from attendance data for chart.\"\n                )\n                st.warning(\n                    \"Missing required columns in attendance data fetched for col2 chart\"\n                )\n                marking_df = (\n                    pd.DataFrame()\n                )  # Ensure marking_df exists but is empty on error\n            else:\n                # Ensure 'is_auto' is boolean\n                try:\n                    # Convert 'is_auto' column to boolean, handling potential missing/malformed values\n                    attendance_df_chart[\"is_auto\"] = attendance_df_chart[\n                        \"is_auto\"\n                    ].astype(bool)\n                except Exception as e:\n                    st.warning(\n                        f\"⚠️ Issue converting 'is_auto' to boolean for chart: {e}\"\n                    )\n                    # Fallback conversion if direct cast fails\n                    attendance_df_chart[\"is_auto\"] = attendance_df_chart[\n                        \"is_auto\"\n                    ].apply(\n                        lambda x: (\n                            str(x).strip().lower() == \"true\" if pd.notna(x) else False\n                        )  # Handle potential NaN/None\n                    )\n\n                # Filter for only 'absent' records as the chart is Manual vs Auto Absent\n                absent_records_chart = attendance_df_chart[\n                    attendance_df_chart[\"status\"] == \"absent\"\n                ].copy()  # Use .copy() to avoid SettingWithCopyWarning\n\n                # --- Aggregation ---\n                # Group by date and is_auto status for absent records\n                if not absent_records_chart.empty:\n                    summary_chart = (\n                        absent_records_chart.groupby([\"date\", \"is_auto\"])\n                        .size()\n                        .reset_index(name=\"count\")\n                    )\n                    pivot_data_chart = summary_chart.pivot(\n                        index=\"date\", columns=\"is_auto\", values=\"count\"\n                    ).reset_index()\n\n                    # Rename columns 0=False (Manual), 1=True (Auto)\n                    pivot_data_chart.rename(\n                        columns={False: \"manual_marked\", True: \"auto_marked\"},\n                        inplace=True,\n                    )\n\n                    # Fill NaN with 0\n                    if \"manual_marked\" not in pivot_data_chart.columns:\n                        pivot_data_chart[\"manual_marked\"] = 0\n                    if \"auto_marked\" not in pivot_data_chart.columns:\n                        pivot_data_chart[\"auto_marked\"] = 0\n\n                    marking_df = pivot_data_chart.fillna(0)\n\n                    # Ensure counts are integers\n                    marking_df[[\"auto_marked\", \"manual_marked\"]] = marking_df[\n                        [\"auto_marked\", \"manual_marked\"]\n                    ].astype(int)\n\n                    # Convert date to datetime and sort\n                    try:\n                        marking_df[\"date\"] = pd.to_datetime(marking_df[\"date\"])\n                        marking_df = marking_df.sort_values(by=\"date\")\n                    except Exception as e:\n                        st.warning(f\"⚠️ Date parsing issue for chart: {e}.\")\n                        st.warning(f\"Date parsing error in col2 chart: {e}\")\n\n                else:\n                    marking_df = (\n                        pd.DataFrame()\n                    )  # Empty if no absent records in the range\n\n        else:\n            # Display message if attendance_df_chart was empty from DB\n            st.info(\n                \"ℹ️ No attendance data available in the selected range for Manual vs Auto-Marked chart.\"\n            )\n            marking_df = (\n                pd.DataFrame()\n            )  # Ensure marking_df is defined as empty even if initial fetch failed\n        if not marking_df.empty:\n            # Create Plotly figure (Keep Plotly logic)\n            fig1 = px.bar(\n                marking_df,\n                x=\"date\",\n                y=[\"manual_marked\", \"auto_marked\"],\n                labels={\"value\": \"Number of Records\", \"variable\": \"Marking Type\"},\n                color_discrete_map={\n                    \"manual_marked\": \"#0ea5e9\",  # Blueish\n                    \"auto_marked\": \"#f59e0b\",  # Orange\n                },\n                barmode=\"stack\",\n            )\n\n            # Update layout (Keep layout)\n            fig1.update_layout(\n                xaxis_title=\"Date\",\n                yaxis_title=\"Number of Records\",\n                legend_title=\"Marking Type\",\n                height=350,\n                margin=dict(t=30, l=0, r=0, b=0),\n                xaxis=dict(tickformat=\"%b %d, %Y\"),\n                legend=dict(\n                    orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1\n                ),\n            )\n\n            # Display chart *inside* the column (Keep)\n            st.plotly_chart(fig1, use_container_width=True)\n        else:\n            # Display message *inside* the column if no data\n            st.info(\"ℹ️ Not enough data for Manual vs Auto-Marked chart.\")\n\n    # Custom CSS for the teacher attendance table\n    st.markdown(\n        \"\"\"\n<style>\n    .teacher-card {\n        background: linear-gradient(135deg, #ffffff, #e3f2fd);\n        border-radius: 16px;\n        padding: 18px;\n        margin: 15px 0;\n        border: 1px solid rgba(209, 217, 230, 0.5);\n        box-shadow: 0 6px 16px rgba(0,0,0,0.1);\n        display: flex;\n        align-items: center;\n        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n        position: relative;\n        overflow: hidden;\n        z-index: 1;\n    }\n    \n    .teacher-card:before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: linear-gradient(135deg, rgba(59, 130, 246, 0.05), rgba(147, 197, 253, 0.1));\n        opacity: 0;\n        transition: opacity 0.4s ease;\n        z-index: -1;\n    }\n    \n    .teacher-card:hover {\n        transform: translateY(-8px) scale(1.02);\n        box-shadow: 0 12px 24px rgba(0,0,0,0.15);\n        border-color: rgba(59, 130, 246, 0.3);\n    }\n    \n    .teacher-card:hover:before {\n        opacity: 1;\n    }\n    \n    .teacher-checkbox {\n        margin-right: 18px;\n        transform: scale(1.2);\n    }\n    \n    .teacher-info {\n        flex-grow: 1;\n        padding-right: 15px;\n        transition: all 0.3s ease;\n    }\n    \n    .teacher-card:hover .teacher-info {\n        transform: translateX(5px);\n    }\n    \n    .teacher-name {\n        font-weight: 700;\n        font-size: 18px;\n        color: #2c3e50;\n        margin-bottom: 4px;\n        position: relative;\n        display: inline-block;\n    }\n    \n    .teacher-name:after {\n        content: '';\n        position: absolute;\n        bottom: -2px;\n        left: 0;\n        width: 0;\n        height: 2px;\n        background: linear-gradient(90deg, #3b82f6, #93c5fd);\n        transition: width 0.3s ease;\n    }\n    \n    .teacher-card:hover .teacher-name:after {\n        width: 100%;\n    }\n    \n    .teacher-id {\n        color: #64748b;\n        font-size: 14px;\n        margin-top: 4px;\n        display: flex;\n        align-items: center;\n    }\n    \n    .teacher-id:before {\n        content: '🆔';\n        margin-right: 5px;\n        font-size: 12px;\n        opacity: 0.7;\n    }\n    \n    .teacher-status {\n        padding: 8px 16px;\n        border-radius: 12px;\n        font-size: 14px;\n        font-weight: 600;\n        transition: all 0.3s ease;\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        min-width: 100px;\n        box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n    }\n    \n    .status-present {\n        background: linear-gradient(135deg, #10b981, #34d399);\n        color: white;\n    }\n    \n    .status-present:hover {\n        background: linear-gradient(135deg, #059669, #10b981);\n        transform: scale(1.05);\n        box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3);\n    }\n    \n    .status-absent {\n        background: linear-gradient(135deg, #ef4444, #f87171);\n        color: white;\n    }\n    \n    .status-absent:hover {\n        background: linear-gradient(135deg, #dc2626, #ef4444);\n        transform: scale(1.05);\n        box-shadow: 0 4px 8px rgba(239, 68, 68, 0.3);\n    }\n    \n    .status-unmarked {\n        background: linear-gradient(135deg, #9ca3af, #d1d5db);\n        color: #1f2937;\n    }\n    \n    .status-unmarked:hover {\n        background: linear-gradient(135deg, #6b7280, #9ca3af);\n        color: white;\n        transform: scale(1.05);\n        box-shadow: 0 4px 8px rgba(156, 163, 175, 0.3);\n    }\n    .section-header {\n        background: linear-gradient(90deg, #ff6f61, #de425b);\n        color: white;\n        padding: 12px 20px;\n        border-radius: 10px;\n        margin: 20px 0 15px 0;\n        font-weight: 700;\n        font-size:20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n    }\n    .select-all-btn {\n        background: #66bb6a;\n        color: white;\n        border: none;\n        padding: 7px 14px;\n        border-radius: 6px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background 0.3s ease-in-out;\n    }\n    .select-all-btn:hover {\n        background: #43a047;\n\n    }\n    #  .scroll-container {\n    #     max-height: 400px;\n    #     overflow-y: auto;\n    # }\n    /* Calendar Styles */\n        .calendar-container {\n            background: white;\n            border-radius: 12px;\n            padding: 20px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n            overflow: hidden;\n        }\n        \n        .calendar-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 15px;\n        }\n        \n        .calendar-title {\n            font-size: 18px;\n            font-weight: 600;\n            color: #1a202c;\n        }\n        \n        .calendar-nav {\n            display: flex;\n            gap: 10px;\n        }\n        \n        .calendar-btn {\n            background: #f3f4f6;\n            border: none;\n            border-radius: 8px;\n            padding: 8px 12px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            transition: all 0.2s ease;\n        }\n        \n        .calendar-btn:hover {\n            background: #e5e7eb;\n        }\n        \n        .calendar-grid {\n            display: grid;\n            grid-template-columns: repeat(7, 1fr);\n            gap: 8px;\n        }\n        \n        .calendar-weekday {\n            text-align: center;\n            font-weight: 600;\n            color: #6b7280;\n            padding: 8px 0;\n            font-size: 14px;\n        }\n        \n        .calendar-day {\n            text-align: center;\n            padding: 10px 0;\n            border-radius: 8px;\n            transition: all 0.2s ease;\n            cursor: pointer;\n        }\n        \n        .calendar-day:hover {\n            background: #f3f4f6;\n        }\n        \n        .calendar-day.today {\n            background: #e0e7ff;\n            color: #4338ca;\n            font-weight: 600;\n        }\n        \n        .calendar-day.empty {\n            visibility: hidden;\n        }\n    </style>\n    \"\"\",\n        unsafe_allow_html=True,\n    )\n\n    current_date = get_calendar_dates()\n    month_name = current_date.strftime(\"%B %Y\")\n    calendar_days = generate_calendar_days(current_date)\n\n    st.markdown(\n        f\"\"\"\n        <div class=\"dashboard-card\">\n            <div class=\"calendar-container\">\n                <div class=\"calendar-header\">\n                    <div class=\"calendar-title\">{month_name}</div>\n                    <div class=\"calendar-nav\">\n                        <button class=\"calendar-btn\" onclick=\"prevMonth()\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                                <path fill-rule=\"evenodd\" d=\"M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"/>\n                            </svg>\n                        </button>\n                        <button class=\"calendar-btn\" onclick=\"nextMonth()\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                                <path fill-rule=\"evenodd\" d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z\"/>\n                            </svg>\n                        </button>\n                    </div>\n                </div>\n                <div class=\"calendar-grid\">\n                    {calendar_days}\n                </div>\n            </div>\n        </div>\n        \"\"\",\n        unsafe_allow_html=True,\n    )\n\n    # Calendar navigation buttons JavaScript\n    st.markdown(\n        \"\"\"\n        <script>\n            function prevMonth() {\n                window.parent.postMessage({type: 'streamlit:setComponentValue', value: -1}, '*');\n            }\n            \n            function nextMonth() {\n                window.parent.postMessage({type: 'streamlit:setComponentValue', value: 1}, '*');\n            }\n        </script>\n        \"\"\",\n        unsafe_allow_html=True,\n    )\n    data_manager_instance = st.session_state.data_manager\n\n    # Ensure 'today' date is defined if needed (should be defined at the top of render_dashboard)\n    today = get_ist_today()\n    all_teachers_list_for_form = data_manager_instance.get_all_teachers(school_id)\n    users_df = pd.DataFrame(all_teachers_list_for_form)\n    attendance_today_df_form = data_manager_instance.get_attendance_report(\n        school_id, start_date=today, end_date=today\n    )\n    marked_teachers_status = {}\n    marked_teachers = []  # Initialize marked_teachers list\n\n    if not attendance_today_df_form.empty:\n        if (\n            \"teacher_id\" in attendance_today_df_form.columns\n            and \"status\" in attendance_today_df_form.columns\n        ):\n            marked_teachers_status = attendance_today_df_form.set_index(\"teacher_id\")[\n                \"status\"\n            ].to_dict()\n            # Also populate marked_teachers list for the logic that uses it\n            marked_teachers = attendance_today_df_form[\"teacher_id\"].tolist()\n\n    # Create time objects for comparison\n    # Assuming auto_hour and auto_minute are defined\n    AUTO_ABSENT_TIME_OBJ = datetime.strptime(\n        f\"{auto_hour}:{auto_minute}\", \"%H:%M\"\n    ).time()\n    current_system_time = datetime.now().time()\n\n    # Initialize 'attendance_data' in session state if it doesn't exist\n    if \"attendance_data\" not in st.session_state:\n        st.session_state.attendance_data = {}\n\n    # Initialize select all checkbox state\n    if \"mark_all_present\" not in st.session_state:\n        st.session_state.mark_all_present = False\n\n    # Select all checkbox (Affects initial state on render)\n    all_present = st.checkbox(\n        \" Mark all as present\",\n        value=st.session_state.mark_all_present,\n        key=\"mark_all_present\",\n    )\n\n    if not all_teachers_list_for_form:\n        st.info(\"No teachers found for marking attendance.\")\n    else:\n        # Create a form for marking attendance (Keep form structure)\n        with st.form(\"admin_attendance_form\"):\n            st.markdown(\n                \"\"\"<div class='section-header'> \n            <div class=\"stat-icoon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"white\" viewBox=\"0 0 16 16\">\n                    <path d=\"M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4Zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10Z\"/>\n                </svg></div>\n                <b>Teacher Attendance</B></div>\"\"\",\n                unsafe_allow_html=True,\n            )\n            attendance_data_to_save = {}\n\n            for teacher in all_teachers_list_for_form:\n                teacher_id = teacher.get(\"teacher_id\")\n                teacher_name = teacher.get(\"name\")\n\n                if not teacher_id:\n                    continue\n\n                status = marked_teachers_status.get(teacher_id, \"unmarked\")\n                initial_checkbox_state = all_present or (status == \"present\")\n\n                st.markdown(\n                    f\"\"\"\n                <div class='teacher-card'>\n                    <div class='teacher-info'>\n                        <div class='teacher-name'>{teacher_name}</div>\n                        <div class='teacher-id'>ID: {teacher_id}</div>\n                    </div>\n                    <div class='teacher-status status-{status}'>\n                        {status.capitalize()}\n                    </div>\n                </div>\n                \"\"\",\n                    unsafe_allow_html=True,\n                )\n\n                is_present = st.checkbox(\n                    f\"Present\",\n                    value=initial_checkbox_state,\n                    key=f\"teacher_{teacher_id}_present_checkbox_form\",\n                )\n\n                if is_present:\n                    attendance_data_to_save[teacher_id] = \"present\"\n                else:\n                    attendance_data_to_save[teacher_id] = \"absent\"\n\n            # --- Validation based on Auto-Absent Time (Keep this logic) ---\n\n            submitted = st.form_submit_button(\n                \"Save Attendance\", use_container_width=True\n            )\n\n            if submitted:\n                # --- FINAL LOGIC FOR ATTENDANCE UPDATE ---\n                \n                # attendance_data_to_save mein har teacher ke liye checkbox ki current state hai ('present' ya 'absent')\n                \n                attendance_to_update_list = []\n\n                for teacher_id, desired_status_from_checkbox in attendance_data_to_save.items():\n                    \n                    # Database mein teacher ka purana (original) status kya tha?\n                    # marked_teachers_status humne form ke upar pehle hi fetch kar liya tha.\n                    original_db_status = marked_teachers_status.get(teacher_id, \"unmarked\")\n\n                    # Sirf unhi records ko update list mein daalo jinka status sach mein badla hai.\n                    # Yeh logic bilkul sahi hai.\n                    if original_db_status != desired_status_from_checkbox:\n                        print(f\"CHANGE DETECTED for {teacher_id}: From '{original_db_status}' -> To '{desired_status_from_checkbox}'\")\n                        attendance_to_update_list.append(\n                            (teacher_id, desired_status_from_checkbox)\n                        )\n\n                # Agar update list mein kuch hai, tabhi database operation karo.\n                if attendance_to_update_list:\n                    print(f\"INFO: Found {len(attendance_to_update_list)} teachers with status changes. Updating them in bulk.\")\n\n                    # data_manager_instance.bulk_update_attendance ab sahi se kaam karega\n                    # kyunki database mein UNIQUE KEY constraint hai.\n                    success_count = data_manager_instance.bulk_update_attendance(\n                        school_id, attendance_to_update_list\n                    )\n\n                    # success_count ab actual updated records ki sankhya return karega.\n                    if success_count > 0:\n                        st.success(f\"✅ Attendance updated for {success_count} teachers.\")\n                        # Page ko turant refresh karo taaki naya data dikhe.\n                        st.rerun() \n                    else:\n                        st.error(\"❌ Failed to update attendance. A database error may have occurred. Please check server logs.\")\n                else:\n                    # Agar koi badlaav nahi hua, to user ko batao.\n                    st.info(\"ℹ️ No changes were made to the attendance.\")\n\n    st.markdown(\n        \"\"\"\n        <div style=\" \n             padding: 10px 20px; border-radius: 10px; margin: 25px 0 15px 0; \n             color:#1e3a8a; font-weight: 600; font-size: 20px; \n             box-shadow: 0 4px 10px rgba(0,0,0,0.1);\">\n            <div style=\"display: flex; align-items: center;color:#1e3a8a;\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"white\" style=\"margin-right: 10px;\" viewBox=\"0 0 16 16\">\n                    <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"/>\n                    <path d=\"M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z\"/>\n                </svg>\n                Detailed Attendance\n            </div>\n        </div>\n        \"\"\",\n        unsafe_allow_html=True,\n    )\n\n    # Get attendance data for today from database\n    data_manager_instance = st.session_state.data_manager  # Get the instance\n    attendance_for_table_df = data_manager_instance.get_attendance_report(\n        school_id, start_date=today, end_date=today\n    )\n\n    # Fetch all teachers' names to merge\n    all_teachers_list_names = data_manager_instance.get_all_teachers(\n        school_id\n    )  # Use instance\n    teachers_names_df = pd.DataFrame(all_teachers_list_names)\n\n    # Merge attendance data with teacher names\n    if not attendance_for_table_df.empty and not teachers_names_df.empty:\n        merged_df = pd.merge(\n            attendance_for_table_df,\n            teachers_names_df[[\"teacher_id\", \"name\"]],\n            on=\"teacher_id\",\n            how=\"left\",\n        )\n    else:\n        merged_df = pd.DataFrame()\n\n    # Filter out unmarked teachers - only show present or absent in the table\n    if not merged_df.empty:\n        if \"status\" in merged_df.columns:\n            filtered_df = merged_df[merged_df[\"status\"].isin([\"present\", \"absent\"])]\n        else:\n            filtered_df = pd.DataFrame()\n            st.warning(\"Status column missing in attendance data for table.\")\n    else:\n        filtered_df = pd.DataFrame()\n\n    if not filtered_df.empty:\n        # Select and rename columns for display\n        display_cols = [\"date\", \"name\", \"teacher_id\", \"status\", \"timestamp\"]\n        existing_display_cols = [\n            col for col in display_cols if col in filtered_df.columns\n        ]\n\n        display_df = filtered_df[existing_display_cols].copy()\n\n        col_rename_map = {\n            \"date\": \"Date\",\n            \"name\": \"Name\",\n            \"teacher_id\": \"Teacher ID\",\n            \"status\": \"Status\",\n            \"timestamp\": \"Timestamp\",\n        }\n        display_df.rename(columns=col_rename_map, inplace=True)\n\n        # Display the dataframe\n        st.dataframe(display_df, use_container_width=True)\n    else:\n        st.info(\n            \"No attendance data (Present or Absent) available to display for today.\"\n        )\n# test line to trigger git","size_bytes":52810},"backend/existing_modules/components/legal_pages.py":{"content":"import streamlit as st\r\nimport datetime\r\nimport json\r\nimport random\r\nfrom streamlit.components.v1 import html\r\nimport streamlit.components.v1 as components\r\n\r\n\r\nst.markdown(\r\n    \"\"\"\r\n    <style>\r\n        /* Base Styles and Animations */\r\n        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');\r\n\r\n        .terms-premium-container {\r\n            font-family: 'Poppins', sans-serif;\r\n            max-width: 1200px;\r\n            margin: 0 auto;\r\n            animation: fadeIn 0.8s ease-in-out;\r\n        }\r\n\r\n        @keyframes fadeIn {\r\n            from { opacity: 0; transform: translateY(20px); }\r\n            to { opacity: 1; transform: translateY(0); }\r\n        }\r\n\r\n        @keyframes slideRight {\r\n            from { opacity: 0; transform: translateX(-20px); }\r\n            to { opacity: 1; transform: translateX(0); }\r\n        }\r\n\r\n        @keyframes pulse {\r\n            0% { transform: scale(1); }\r\n            50% { transform: scale(1.03); }\r\n            100% { transform: scale(1); }\r\n        }\r\n\r\n        /* Premium Headers */\r\n        .premium-header {\r\n            text-align: center;\r\n            margin-bottom: 40px;\r\n            position: relative;\r\n        }\r\n\r\n        .premium-title {\r\n            font-size: 3rem;\r\n            font-weight: 700;\r\n            color: #1E3A8A;\r\n            margin-bottom: 15px;\r\n            text-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\r\n            position: relative;\r\n        }\r\n\r\n        .premium-title::after {\r\n            content: '';\r\n            display: block;\r\n            width: 100px;\r\n            height: 5px;\r\n            background: linear-gradient(90deg, #3B82F6, #1E40AF);\r\n            margin: 15px auto 0;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .premium-subtitle {\r\n            font-size: 1.2rem;\r\n            color: #64748B;\r\n            margin-bottom: 20px;\r\n            max-width: 800px;\r\n            margin-left: auto;\r\n            margin-right: auto;\r\n        }\r\n\r\n        /* Premium Section Cards */\r\n        .premium-section {\r\n            background: white;\r\n            border-radius: 16px;\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);\r\n            padding: 30px;\r\n            margin-bottom: 30px;\r\n            border-left: 5px solid #3B82F6;\r\n            position: relative;\r\n            overflow: hidden;\r\n            transition: all 0.3s ease;\r\n        }\r\n\r\n        .premium-section:hover {\r\n            transform: translateY(-5px);\r\n            box-shadow: 0 15px 35px rgba(59, 130, 246, 0.15);\r\n        }\r\n\r\n        .premium-section::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            width: 150px;\r\n            height: 150px;\r\n            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(59, 130, 246, 0));\r\n            border-radius: 0 0 0 100%;\r\n            z-index: 0;\r\n        }\r\n\r\n        .premium-section-header {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-bottom: 20px;\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .premium-section-icon {\r\n            width: 50px;\r\n            height: 50px;\r\n            border-radius: 12px;\r\n            background: linear-gradient(135deg, #3B82F6, #1E40AF);\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            margin-right: 15px;\r\n            box-shadow: 0 4px 10px rgba(59, 130, 246, 0.3);\r\n            font-size: 24px;\r\n        }\r\n\r\n        .premium-section-title {\r\n            font-size: 1.6rem;\r\n            font-weight: 700;\r\n            color: #1E3A8A;\r\n            margin: 0;\r\n        }\r\n\r\n        .premium-section-content {\r\n            position: relative;\r\n            z-index: 1;\r\n            color: #334155;\r\n            font-size: 1.05rem;\r\n            line-height: 1.7;\r\n        }\r\n\r\n        .premium-section-content ul {\r\n            padding-left: 20px;\r\n        }\r\n\r\n        .premium-section-content li {\r\n            margin-bottom: 12px;\r\n            position: relative;\r\n            padding-left: 10px;\r\n        }\r\n\r\n        .premium-section-content li strong {\r\n            color: #1E3A8A;\r\n            font-weight: 600;\r\n        }\r\n\r\n        /* Premium Call-to-Action */\r\n        .premium-cta {\r\n            background: linear-gradient(135deg, #1E3A8A, #3B82F6);\r\n            border-radius: 16px;\r\n            padding: 40px;\r\n            color: white;\r\n            text-align: center;\r\n            margin: 50px 0;\r\n            box-shadow: 0 15px 35px rgba(30, 58, 138, 0.3);\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .premium-cta::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: -50%;\r\n            left: -50%;\r\n            width: 200%;\r\n            height: 200%;\r\n            background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0) 70%);\r\n            animation: rotateGradient 10s linear infinite;\r\n            z-index: 0;\r\n        }\r\n\r\n        @keyframes rotateGradient {\r\n            from { transform: rotate(0deg); }\r\n            to { transform: rotate(360deg); }\r\n        }\r\n\r\n        .premium-cta-title {\r\n            font-size: 2rem;\r\n            font-weight: 700;\r\n            margin-bottom: 15px;\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .premium-cta-text {\r\n            font-size: 1.1rem;\r\n            margin-bottom: 30px;\r\n            max-width: 700px;\r\n            margin-left: auto;\r\n            margin-right: auto;\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .premium-cta-button {\r\n            background: white;\r\n            color: #1E3A8A;\r\n            font-weight: 700;\r\n            font-size: 1.1rem;\r\n            padding: 15px 30px;\r\n            border-radius: 50px;\r\n            text-decoration: none;\r\n            transition: all 0.3s ease;\r\n            display: inline-block;\r\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .premium-cta-button:hover {\r\n            transform: translateY(-3px);\r\n            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);\r\n        }\r\n\r\n        /* Premium Footer */\r\n        .premium-footer {\r\n            text-align: center;\r\n            margin-top: 70px;\r\n            padding-top: 40px;\r\n            border-top: 1px solid #E2E8F0;\r\n            position: relative;\r\n        }\r\n\r\n        .premium-footer-logo {\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        .premium-footer-text {\r\n            color: #64748B;\r\n            margin-bottom: 5px;\r\n            font-size: 0.95rem;\r\n        }\r\n\r\n        .premium-copyright {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        .premium-copyright-icon {\r\n            margin-right: 10px;\r\n        }\r\n\r\n        .premium-social-icons {\r\n            display: flex;\r\n            justify-content: center;\r\n            margin-top: 20px;\r\n            gap: 15px;\r\n        }\r\n\r\n        .premium-social-icon {\r\n            width: 40px;\r\n            height: 40px;\r\n            border-radius: 50%;\r\n            background: linear-gradient(135deg, #3B82F6, #1E40AF);\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            transition: all 0.3s ease;\r\n            box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);\r\n        }\r\n\r\n        .premium-social-icon:hover {\r\n            transform: translateY(-5px) scale(1.1);\r\n            box-shadow: 0 6px 10px rgba(59, 130, 246, 0.4);\r\n        }\r\n\r\n        /* Additional Premium Elements */\r\n        .animated-number {\r\n            font-size: 2.5rem;\r\n            font-weight: 700;\r\n            color: #1E3A8A;\r\n            display: inline-block;\r\n            margin-right: 5px;\r\n        }\r\n\r\n        .premium-badge {\r\n            display: inline-block;\r\n            padding: 5px 12px;\r\n            background: linear-gradient(135deg, #3B82F6, #1E40AF);\r\n            color: white;\r\n            border-radius: 20px;\r\n            font-size: 0.8rem;\r\n            font-weight: 600;\r\n            margin-left: 10px;\r\n            box-shadow: 0 2px 5px rgba(59, 130, 246, 0.3);\r\n        }\r\n\r\n        .premium-list-item {\r\n            display: flex;\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        .premium-list-icon {\r\n            min-width: 22px;\r\n            margin-right: 10px;\r\n            color: #3B82F6;\r\n        }\r\n\r\n        .protection-list {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n            gap: 20px;\r\n            margin-top: 20px;\r\n        }\r\n\r\n        .protection-item {\r\n            background: white;\r\n            padding: 20px;\r\n            border-radius: 12px;\r\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);\r\n            transition: all 0.3s ease;\r\n            border-left: 3px solid #3B82F6;\r\n        }\r\n\r\n        .protection-item:hover {\r\n            transform: translateY(-5px);\r\n            box-shadow: 0 8px 20px rgba(59, 130, 246, 0.15);\r\n        }\r\n\r\n        .protection-icon {\r\n            font-size: 1.5rem;\r\n            margin-bottom: 10px;\r\n            color: #3B82F6;\r\n        }\r\n\r\n        .protection-title {\r\n            font-weight: 600;\r\n            color: #1E3A8A;\r\n            margin-bottom: 8px;\r\n            font-size: 1.1rem;\r\n        }\r\n\r\n        .protection-text {\r\n            color: #64748B;\r\n            font-size: 0.95rem;\r\n            line-height: 1.5;\r\n        }\r\n\r\n        .last-updated {\r\n            display: inline-block;\r\n            padding: 8px 15px;\r\n            background: #F1F5F9;\r\n            border-radius: 20px;\r\n            font-size: 0.9rem;\r\n            color: #64748B;\r\n            margin-top: 10px;\r\n        }\r\n\r\n        .highlight-text {\r\n            font-weight: 500;\r\n            color: #1E3A8A;\r\n        }\r\n\r\n        /* Responsive Adjustments */\r\n        @media (max-width: 768px) {\r\n            .premium-title {\r\n                font-size: 2.2rem;\r\n            }\r\n\r\n            .premium-section {\r\n                padding: 25px;\r\n            }\r\n\r\n            .premium-section-title {\r\n                font-size: 1.4rem;\r\n            }\r\n\r\n            .premium-cta {\r\n                padding: 30px;\r\n            }\r\n\r\n            .premium-cta-title {\r\n                font-size: 1.8rem;\r\n            }\r\n        }\r\n    </style>\r\n    \"\"\",\r\n    unsafe_allow_html=True,\r\n)\r\n\r\n\r\ndef render_terms_and_conditions(school_id, data_manager):\r\n    \"\"\"Render the Terms & Conditions page with professional styling\"\"\"\r\n\r\n    # Page Title\r\n    # st.title(\"Terms & Conditions\")\r\n\r\n    # # Introduction\r\n    # st.info(\r\n    #     \"Please read these Terms & Conditions carefully. By accessing or using the \"\r\n    #     \"**Teacher Attendance System**, you agree to be bound by these terms.\"\r\n    # )\r\n    st.markdown(\r\n        \"\"\"\r\n    <div style=\"margin-right: 5px;color:#1e3a8a;\" class=\"terms-premium-container\">\r\n        <div class=\"premium-header\">\r\n            <h1 class=\"premium-title\">Terms & Conditions</h1>\r\n            \r\n    \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    sections = [\r\n        {\r\n            \"title\": \"Ownership & Intellectual Property\",\r\n            \"icon\": \"💼\",\r\n            \"content\": \"\"\"\r\n            This software and its entire contents including but not limited to its:\r\n            \r\n            * **Source code & binary forms** - All programming code, compiled applications and associated files\r\n            * **User interface design** - All visual elements, layouts, and design patterns\r\n            * **Documentation** - All manuals, guides, and supporting materials\r\n            * **Branding elements** - Logos, icons, color schemes and other visual identifiers\r\n            \r\n            are the **exclusive intellectual property** of RK Coders. The software is protected by Indian copyright laws and international treaty provisions.\r\n            \r\n            Any reproduction, modification, or distribution of this software without express written consent from RK Coders is **strictly prohibited** and constitutes a violation of copyright law.\r\n            \"\"\",\r\n        },\r\n        {\r\n            \"title\": \"License & Usage Restrictions\",\r\n            \"icon\": \"🔐\",\r\n            \"content\": \"\"\"\r\n            This software is **licensed, not sold**. The license granted herein is:\r\n            \r\n            * **Non-exclusive** - RK Coders may license the software to others\r\n            * **Non-transferable** - You may not transfer or sublicense to others\r\n            * **Limited** - For internal administrative use only\r\n            * **Revocable** - Can be terminated upon violation of these terms\r\n            \r\n            You are **expressly prohibited** from:\r\n            \r\n            * Reverse engineering, decompiling, or disassembling the software\r\n            * Removing or altering any copyright notices or proprietary markings\r\n            * Using the software to develop competing products\r\n            * Distributing, leasing, renting, or sublicensing the software\r\n            * Using the software in any manner that violates applicable laws\r\n            \r\n            Violation of these restrictions will result in automatic license termination and may lead to legal action.\r\n            \"\"\",\r\n        },\r\n        {\r\n            \"title\": \"Data Privacy & Security\",\r\n            \"icon\": \"🔒\",\r\n            \"content\": \"\"\"\r\n            RK Coders is committed to protecting your data with industry-standard security measures.\r\n\r\n            * **Data Ownership** - All data entered into the system remains your property\r\n            * **Confidentiality** - We treat your data with the highest level of confidentiality\r\n            * **No Data Sharing** - We do not share, sell, or distribute user data to third parties without consent\r\n            * **Data Security** - We implement technical and organizational measures to protect your data\r\n\r\n            While we take extensive measures to protect your data, RK Coders shall not be liable for data loss, cyber-attacks, or unauthorized access resulting from user negligence, third-party vulnerabilities, or forces beyond our reasonable control.\r\n            \"\"\",\r\n        },\r\n        {\r\n            \"title\": \"Service Availability & Maintenance\",\r\n            \"icon\": \"⚙️\",\r\n            \"content\": \"\"\"\r\n            RK Coders strives to provide maximum uptime and performance, but cannot guarantee 100% service availability.\r\n\r\n            * **Scheduled Maintenance** - System may be periodically unavailable for updates and improvements\r\n            * **Notification** - We will provide advance notice for scheduled maintenance whenever possible\r\n            * **Emergency Maintenance** - May be performed without notice to address critical issues\r\n            * **External Factors** - Service availability may be impacted by factors beyond our control\r\n\r\n            RK Coders reserves the right to modify, suspend, or discontinue any aspect of the software with or without notice.\r\n            \"\"\",\r\n        },\r\n        {\r\n            \"title\": \"Subscription & Payment Terms\",\r\n            \"icon\": \"💰\",\r\n            \"content\": \"\"\"\r\n            Continued access to the Teacher Attendance System requires an active subscription.\r\n\r\n            * **Payment Terms** - Subscription fees are due in advance on a monthly/annual basis\r\n            * **Late Payment** - Failure to pay on time may result in account suspension or termination\r\n            * **No Refunds** - All payments are non-refundable, including in cases of early termination\r\n            * **Price Changes** - RK Coders reserves the right to modify pricing with 30 days prior notice\r\n\r\n            You are responsible for all taxes and fees associated with your subscription unless explicitly stated otherwise.\r\n            \"\"\",\r\n        },\r\n        {\r\n            \"title\": \"Liability Disclaimer\",\r\n            \"icon\": \"⚠️\",\r\n            \"content\": \"\"\"\r\n            To the maximum extent permitted by applicable law:\r\n\r\n            * The software is provided \"as is\" without warranties of any kind, either express or implied\r\n            * RK Coders disclaims all warranties including but not limited to merchantability, fitness for a particular purpose, and non-infringement\r\n            * RK Coders is not responsible for any direct, indirect, incidental, special, consequential, or exemplary damages\r\n            * Users are solely responsible for ensuring data accuracy and compliance with educational regulations\r\n\r\n            In no event shall RK Coders' total liability exceed the amount paid by you for the software in the 12 months preceding any claim.\r\n            \"\"\",\r\n        },\r\n        {\r\n            \"title\": \"Termination of Access\",\r\n            \"icon\": \"🚫\",\r\n            \"content\": \"\"\"\r\n            RK Coders reserves the right to suspend or terminate your access to the software if:\r\n\r\n            * You breach any provision of these Terms & Conditions\r\n            * You fail to make timely payment of subscription fees\r\n            * You engage in fraudulent, illegal, or unauthorized activities\r\n            * You misuse system resources or attempt to gain unauthorized access\r\n\r\n            Upon termination, you must cease all use of the software and destroy all copies in your possession.\r\n            \"\"\",\r\n        },\r\n        {\r\n            \"title\": \"Updates & Modifications\",\r\n            \"icon\": \"🔄\",\r\n            \"content\": \"\"\"\r\n            RK Coders may release updates, bug fixes, or feature improvements at any time.\r\n\r\n            * **Automatic Updates** - Software may automatically download and install updates\r\n            * **Version Support** - Only the latest version of the software is fully supported\r\n            * **Terms Updates** - These Terms & Conditions may be updated periodically\r\n            * **Notification** - We will make reasonable efforts to notify you of significant changes\r\n\r\n            Continued use of the software after an update implies acceptance of any new terms.\r\n            \"\"\",\r\n        },\r\n        {\r\n            \"title\": \"Governing Law & Jurisdiction\",\r\n            \"icon\": \"⚖️\",\r\n            \"content\": \"\"\"\r\n            These Terms & Conditions shall be governed by the laws of India, without regard to its conflict of law principles.\r\n\r\n            * Any legal disputes arising from the use of this software will be resolved exclusively in the courts of Sadabad (Hathras), Uttar Pradesh, India\r\n            * You consent to the personal jurisdiction of such courts\r\n            * If any provision of these terms is found to be unenforceable, the remaining provisions will remain in full force and effect\r\n\r\n            These Terms & Conditions constitute the entire agreement between you and RK Coders regarding your use of the software.\r\n            \"\"\",\r\n        },\r\n        {\r\n            \"title\": \"Acceptance of Terms\",\r\n            \"icon\": \"✅\",\r\n            \"content\": \"\"\"\r\n            By using this software, you acknowledge that:\r\n\r\n            * You have read and understood these Terms & Conditions\r\n            * You agree to be bound by these terms in their entirety\r\n            * You have the authority to accept these terms on behalf of your organization\r\n            * If you do not agree with any of these terms, you must discontinue use of the software immediately\r\n\r\n            Your continued use of the Teacher Attendance System constitutes your ongoing acceptance of these terms.\r\n            \"\"\",\r\n        },\r\n    ]\r\n\r\n    # Render each section with professional styling\r\n    for i, section in enumerate(sections):\r\n        # Create a section with header\r\n        st.subheader(f\"{i+1}. {section['icon']} {section['title']}\")\r\n\r\n        # Section content\r\n        st.markdown(section[\"content\"])\r\n        st.divider()\r\n\r\n    # Additional protection measures\r\n    st.subheader(\"🛡️ Additional Protection Measures\")\r\n    st.write(\r\n        \"In addition to these Terms & Conditions, RK Coders implements the following measures to protect our intellectual property:\"\r\n    )\r\n\r\n    protection_measures = [\r\n        \"**End-User License Agreement (EULA)** - A comprehensive agreement that specifically defines the permitted uses and restrictions of our software.\",\r\n        \"**Copyright Registration** - Our software is officially registered with the Indian Copyright Office to ensure maximum legal protection.\",\r\n        \"**License Key System** - Sophisticated authentication mechanisms ensure only authorized users can access our software.\",\r\n        \"**Code Obfuscation & Encryption** - Advanced techniques to prevent unauthorized access to source code and protect our intellectual property.\",\r\n        \"**Data Encryption** - Industry-standard encryption to protect all sensitive school and user data.\",\r\n    ]\r\n\r\n    for measure in protection_measures:\r\n        st.success(measure)\r\n\r\n    # Document footer with last updated date and copyright notice\r\n    current_year = datetime.datetime.now().year\r\n\r\n    st.divider()\r\n    st.caption(f\"This document was last updated on April 01, {current_year}\")\r\n    st.caption(f\"© {current_year} RK Coders. All Rights Reserved.\")\r\n    st.caption(\r\n        \"Teacher Attendance System by Rishi Agrawal, son of Late Devendra Agrawal\"\r\n    )\r\n\r\n\r\ndef render_contact_page(school_id, data_manager):\r\n    \"\"\"Render the Contact page with social media icons and modern design\"\"\"\r\n    st.markdown(\r\n        \"\"\"\r\n<style>\r\n    /* Base Styles and Fonts */\r\n    @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700;800&display=swap');\r\n    \r\n    :root {\r\n        --primary-gradient: linear-gradient(135deg, #4F46E5, #7C3AED);\r\n        --secondary-gradient: linear-gradient(135deg, #3B82F6, #2563EB);\r\n        --accent-gradient: linear-gradient(135deg, #F59E0B, #D97706);\r\n        --success-gradient: linear-gradient(135deg, #10B981, #059669);\r\n        --error-gradient: linear-gradient(135deg, #EF4444, #DC2626);\r\n        --primary-color: #4F46E5;\r\n        --text-primary: #1E293B;\r\n        --text-secondary: #475569;\r\n        --text-light: #94A3B8;\r\n        --card-bg: #FFFFFF;\r\n        --card-border: #E2E8F0;\r\n        --card-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);\r\n        --card-hover-shadow: 0 20px 40px rgba(0, 0, 0, 0.12);\r\n    }\r\n    .ultra-contact-container {\r\n        font-family: 'Montserrat', sans-serif;\r\n        max-width: 1200px;\r\n        margin: 0 auto;\r\n        position: relative;\r\n        overflow-x: hidden;\r\n    }\r\n    \r\n    /* Advanced Animations */\r\n    @keyframes fadeIn {\r\n        from { opacity: 0; transform: translateY(30px); }\r\n        to { opacity: 1; transform: translateY(0); }\r\n    }\r\n    \r\n    @keyframes zoomIn {\r\n        from { opacity: 0; transform: scale(0.8); }\r\n        to { opacity: 1; transform: scale(1); }\r\n    }\r\n    \r\n    @keyframes slideInLeft {\r\n        from { opacity: 0; transform: translateX(-50px); }\r\n        to { opacity: 1; transform: translateX(0); }\r\n    }\r\n    \r\n    @keyframes slideInRight {\r\n        from { opacity: 0; transform: translateX(50px); }\r\n        to { opacity: 1; transform: translateX(0); }\r\n    }\r\n    \r\n    @keyframes float {\r\n        0% { transform: translateY(0px); }\r\n        50% { transform: translateY(-15px); }\r\n        100% { transform: translateY(0px); }\r\n    }\r\n    \r\n    @keyframes pulse {\r\n        0% { transform: scale(1); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2); }\r\n        50% { transform: scale(1.05); box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3); }\r\n        100% { transform: scale(1); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2); }\r\n    }\r\n    \r\n    @keyframes glowing {\r\n        0% { box-shadow: 0 0 5px rgba(79, 70, 229, 0.5); }\r\n        50% { box-shadow: 0 0 20px rgba(79, 70, 229, 0.8); }\r\n        100% { box-shadow: 0 0 5px rgba(79, 70, 229, 0.5); }\r\n    }\r\n    \r\n    @keyframes spin {\r\n        from { transform: rotate(0deg); }\r\n        to { transform: rotate(360deg); }\r\n    }\r\n    \r\n    @keyframes gradientBG {\r\n        0% { background-position: 0% 50%; }\r\n        50% { background-position: 100% 50%; }\r\n        100% { background-position: 0% 50%; }\r\n    }\r\n    \r\n    /* Ultra-premium Hero Section */\r\n    .contact-hero {\r\n        position: relative;\r\n        padding: 120px 0 140px;\r\n        text-align: center;\r\n        overflow: hidden;\r\n        border-radius: 0 0 30px 30px;\r\n        background: var(--primary-gradient);\r\n        margin-bottom: 80px;\r\n    }\r\n    \r\n    .contact-hero::before {\r\n        content: '';\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background-image: url('https://cdn.pixabay.com/photo/2018/03/24/08/56/background-3257024_1280.jpg');\r\n        background-size: cover;\r\n        background-position: center;\r\n        mix-blend-mode: overlay;\r\n        opacity: 0.1;\r\n    }\r\n    \r\n    .hero-shapes {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        overflow: hidden;\r\n        z-index: 0;\r\n    }\r\n    \r\n    .hero-shape {\r\n        position: absolute;\r\n        background: rgba(255, 255, 255, 0.1);\r\n        border-radius: 50%;\r\n    }\r\n    \r\n    .hero-shape-1 {\r\n        width: 150px;\r\n        height: 150px;\r\n        top: 20%;\r\n        left: 10%;\r\n        animation: float 8s ease-in-out infinite;\r\n    }\r\n    \r\n    .hero-shape-2 {\r\n        width: 80px;\r\n        height: 80px;\r\n        bottom: 20%;\r\n        right: 10%;\r\n        animation: float 6s ease-in-out infinite;\r\n        animation-delay: 1s;\r\n    }\r\n    \r\n    .hero-shape-3 {\r\n        width: 120px;\r\n        height: 120px;\r\n        top: 60%;\r\n        left: 20%;\r\n        animation: float 7s ease-in-out infinite;\r\n        animation-delay: 2s;\r\n    }\r\n    \r\n    .hero-content {\r\n        position: relative;\r\n        z-index: 1;\r\n    }\r\n    \r\n    .hero-title {\r\n        font-size: 3.5rem;\r\n        font-weight: 800;\r\n        color: white;\r\n        margin-bottom: 20px;\r\n        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n        letter-spacing: -0.5px;\r\n        animation: zoomIn 1s ease-out forwards;\r\n    }\r\n    \r\n    .hero-title span {\r\n        background: linear-gradient(to right, #FFD700, #FFA500);\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        position: relative;\r\n        display: inline-block;\r\n    }\r\n    \r\n    .hero-title span::after {\r\n        content: '';\r\n        position: absolute;\r\n        left: 0;\r\n        bottom: 5px;\r\n        width: 100%;\r\n        height: 4px;\r\n        background: linear-gradient(to right, #FFD700, #FFA500);\r\n        border-radius: 2px;\r\n    }\r\n    \r\n    .hero-subtitle {\r\n        font-size: 1.4rem;\r\n        color: rgba(255, 255, 255, 0.9);\r\n        margin-bottom: 40px;\r\n        max-width: 700px;\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n        line-height: 1.6;\r\n        animation: fadeIn 1s ease-out forwards;\r\n        animation-delay: 0.3s;\r\n        opacity: 0;\r\n    }\r\n    \r\n    .hero-buttons {\r\n        display: flex;\r\n        justify-content: center;\r\n        gap: 20px;\r\n        margin-top: 40px;\r\n        animation: fadeIn 1s ease-out forwards;\r\n        animation-delay: 0.6s;\r\n        opacity: 0;\r\n    }\r\n    \r\n    .hero-button {\r\n        padding: 16px 32px;\r\n        font-size: 1rem;\r\n        font-weight: 600;\r\n        border-radius: 50px;\r\n        border: none;\r\n        cursor: pointer;\r\n        transition: all 0.3s ease;\r\n        display: inline-flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        gap: 10px;\r\n        text-decoration: none;\r\n    }\r\n    \r\n    .hero-button-primary {\r\n        background: white;\r\n        color: var(--primary-color);\r\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\r\n    }\r\n    \r\n    .hero-button-primary:hover {\r\n        transform: translateY(-5px);\r\n        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);\r\n    }\r\n    \r\n    .hero-button-secondary {\r\n        background: rgba(255, 255, 255, 0.15);\r\n        backdrop-filter: blur(10px);\r\n        color: white;\r\n        border: 1px solid rgba(255, 255, 255, 0.3);\r\n    }\r\n    \r\n    .hero-button-secondary:hover {\r\n        background: rgba(255, 255, 255, 0.25);\r\n        transform: translateY(-5px);\r\n    }\r\n    \r\n    .hero-wave {\r\n        position: absolute;\r\n        bottom: -2px;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 80px;\r\n    }\r\n    \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n    # Page Title with decorative elements\r\n    st.markdown(\r\n        \"\"\"\r\n    <div style=\"text-align: center; margin-bottom: 10px;\">\r\n        <h1 style=\"color: #1E3A8A; font-size: 2.8rem; font-weight: 700;\">Contact Us</h1>\r\n        <div style=\"width: 80px; height: 4px; background: linear-gradient(90deg, #3B82F6, #1E40AF); margin: 5px auto 30px;\"></div>\r\n    </div>\r\n    \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    # Hero section with gradient background\r\n    st.markdown(\r\n        \"\"\"\r\n<div class=\"ultra-contact-container\">\r\n    <div class=\"contact-hero\">\r\n        <div class=\"hero-shapes\">\r\n            <div class=\"hero-shape hero-shape-1\"></div>\r\n            <div class=\"hero-shape hero-shape-2\"></div>\r\n            <div class=\"hero-shape hero-shape-3\"></div>\r\n        </div>\r\n        <div class=\"hero-content\">\r\n            <h1 class=\"hero-title\">Get in Touch <span>With Us</span></h1>\r\n            <p style=\"margin-left:110px;\"class=\"hero-subtitle\">\r\n                We're here to help! Reach out for support, inquiries, or to explore how our \r\n                Teacher Attendance System can transform your school's operations.\r\n            </p>\r\n            <div class=\"hero-buttons\">\r\n                <a href=\"#contact-form\" class=\"hero-button hero-button-primary\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n                        <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"/>\r\n                        <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\"/>\r\n                    </svg>\r\n                    Send Message\r\n                </a>\r\n                <a href=\"#social-connect\" class=\"hero-button hero-button-secondary\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n                        <path d=\"M6.5 1A1.5 1.5 0 0 0 5 2.5V3H1.5A1.5 1.5 0 0 0 0 4.5v8A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-8A1.5 1.5 0 0 0 14.5 3H11v-.5A1.5 1.5 0 0 0 9.5 1h-3zm0 1h3a.5.5 0 0 1 .5.5V3H6v-.5a.5.5 0 0 1 .5-.5zm1.886 6.914L15 7.151V12.5a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5V7.15l6.614 1.764a1.5 1.5 0 0 0 .772 0zM1.5 4h13a.5.5 0 0 1 .5.5v1.616L8.129 7.948a.5.5 0 0 1-.258 0L1 6.116V4.5a.5.5 0 0 1 .5-.5z\"/>\r\n                    </svg>\r\n                    Connect with Us\r\n                </a>\r\n            </div>\r\n        </div>\r\n        <div class=\"hero-wave\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 100\" fill=\"#ffffff\">\r\n                <path d=\"M0,96L48,85.3C96,75,192,53,288,42.7C384,32,480,32,576,42.7C672,53,768,75,864,74.7C960,75,1056,53,1152,48C1248,43,1344,53,1392,58.7L1440,64L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"></path>\r\n            </svg>\r\n        </div>\r\n    </div>\r\n\"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    # Main content in two columns for better layout\r\n\r\n    # Developer Information Section with cards\r\n    st.markdown(\r\n        \"\"\"\r\n    <div style=\"display: flex; justify-content: center; align-items: center; margin-bottom: 20px;\">\r\n        <h1 style=\"color: #1E3A8A; font-size: 1.8rem; text-align: center;\">\r\n            👨‍💻 Contact Information\r\n        </h1>\r\n    </div>\r\n    \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    # Modern contact cards with icons\r\n    contact_info = [\r\n        {\r\n            \"icon\": \"https://cdn-icons-png.flaticon.com/512/1077/1077114.png\",\r\n            \"title\": \"Name\",\r\n            \"value\": \"Rishi Agrawal\",\r\n            \"color\": \"#4F46E5\",\r\n        },\r\n        {\r\n            \"icon\": \"https://cdn-icons-png.flaticon.com/512/455/455705.png\",\r\n            \"title\": \"Phone\",\r\n            \"value\": \"+91 9520496351\",\r\n            \"color\": \"#2563EB\",\r\n        },\r\n        {\r\n            \"icon\": \"https://cdn-icons-png.flaticon.com/512/732/732200.png\",\r\n            \"title\": \"Email\",\r\n            \"value\": \"rishiagrawal45202@gmail.com\",\r\n            \"color\": \"#DB2777\",\r\n        },\r\n        {\r\n            \"icon\": \"https://cdn-icons-png.flaticon.com/512/220/220236.png\",\r\n            \"title\": \"WhatsApp\",\r\n            \"value\": \"+91 8954730444\",\r\n            \"color\": \"#10B981\",\r\n        },\r\n        {\r\n            \"icon\": \"https://cdn-icons-png.flaticon.com/512/927/927667.png\",\r\n            \"title\": \"Address\",\r\n            \"value\": \"Jawahar Bajar, Sadabad (Hathras), Uttar Pradesh, India - 281306\",\r\n            \"color\": \"#F59E0B\",\r\n        },\r\n    ]\r\n\r\n    # Create 2 columns for contact cards\r\n    cont_col1, cont_col2 = st.columns(2)\r\n\r\n    for i, info in enumerate(contact_info):\r\n        # Address card in full width\r\n        if i == 4:  # Address\r\n            st.markdown(\r\n                f\"\"\"\r\n                <div style=\"background: white; padding: 20px; border-radius: 10px; \r\n                          margin-bottom: 20px; box-shadow: 0 4px 6px rgba(0,0,0,0.05);\r\n                          border-left: 4px solid {info['color']};\">\r\n                    <div style=\"display: flex; align-items: center;\">\r\n                        <img src=\"{info['icon']}\" width=\"32\" style=\"margin-right: 15px;\">\r\n                        <div>\r\n                            <div style=\"font-size: 14px; color: #64748B;\">{info['title']}</div>\r\n                            <div style=\"font-weight: 600; color: #1E293B; font-size: 16px;\">{info['value']}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \"\"\",\r\n                unsafe_allow_html=True,\r\n            )\r\n        else:\r\n            with cont_col1 if i % 2 == 0 else cont_col2:\r\n                st.markdown(\r\n                    f\"\"\"\r\n                    <div style=\"background: white; padding: 20px; border-radius: 10px; \r\n                              margin-bottom: 20px; box-shadow: 0 4px 6px rgba(0,0,0,0.05);\r\n                              border-left: 4px solid {info['color']};\">\r\n                        <div style=\"display: flex; align-items: center;\">\r\n                            <img src=\"{info['icon']}\" width=\"32\" style=\"margin-right: 15px;\">\r\n                            <div>\r\n                                <div style=\"font-size: 14px; color: #64748B;\">{info['title']}</div>\r\n                                <div style=\"font-weight: 600; color: #1E293B; font-size: 16px;\">{info['value']}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \"\"\",\r\n                    unsafe_allow_html=True,\r\n                )\r\n\r\n    # Business Hours with elegant design\r\n    business_hours_html = \"\"\"\r\n    <div style=\"\r\n        background: white; \r\n        padding: 25px; \r\n        border-radius: 10px; \r\n        margin-bottom: 25px; \r\n        box-shadow: 0 4px 6px rgba(0,0,0,0.05);\r\n        border-top: 4px solid #3B82F6;\r\n    \">\r\n        <h3 style=\"\r\n            color: #1E3A8A; \r\n            margin-top: 0; \r\n            display: flex; \r\n            align-items: center; \r\n            margin-bottom: 20px;\r\n        \">\r\n            <span style=\"font-size: 1.5rem; margin-right: 10px;\">⏰</span> \r\n            Business Hours\r\n        </h3>\r\n        \r\n        <div style=\"display: flex; justify-content: space-between; margin-bottom: 12px; padding-bottom: 12px; border-bottom: 1px dashed #E2E8F0;\">\r\n            <div style=\"font-weight: 500; color: #475569;\">Monday - Friday</div>\r\n            <div style=\"color: #1E293B; font-weight: 600;\">9:00 AM - 6:00 PM</div>\r\n        </div>\r\n\r\n        <div style=\"display: flex; justify-content: space-between; margin-bottom: 12px; padding-bottom: 12px; border-bottom: 1px dashed #E2E8F0;\">\r\n            <div style=\"font-weight: 500; color: #475569;\">Saturday</div>\r\n            <div style=\"color: #1E293B; font-weight: 600;\">10:00 AM - 4:00 PM</div>\r\n        </div>\r\n\r\n        <div style=\"display: flex; justify-content: space-between; margin-bottom: 12px; padding-bottom: 12px; border-bottom: 1px dashed #E2E8F0;\">\r\n            <div style=\"font-weight: 500; color: #475569;\">Sunday</div>\r\n            <div style=\"color: #1E293B; font-weight: 600;\">Closed</div>\r\n        </div>\r\n\r\n        <div style=\"display: flex; justify-content: space-between;\">\r\n            <div style=\"font-weight: 500; color: #475569;\">Response Time</div>\r\n            <div style=\"color: #10B981; font-weight: 600;\">Within 24 hours</div>\r\n        </div>\r\n    </div>\r\n\"\"\"\r\n\r\n    components.html(business_hours_html, height=300)\r\n\r\n    qc_col1, qc_col2 = st.columns(2)\r\n\r\n    with qc_col1:\r\n        st.markdown(\r\n            \"\"\"\r\n            <a href=\"mailto:rishiagrawal45202@gmail.com\" style=\"text-decoration: none;\">\r\n                <div style=\"background: linear-gradient(135deg, #3B82F6, #1E40AF); \r\n                          color: white; padding: 15px; margin-top:-30px;\r\n                           margin-left:8px; border-radius: 10px; text-align: center; \r\n                          font-weight: 600; box-shadow: 0 4px 6px rgba(37, 99, 235, 0.3);\r\n                          transition: transform 0.3s;\">\r\n                    <div style=\"display: flex; align-items: center; justify-content: center;\">\r\n                        <img src=\"https://cdn-icons-png.flaticon.com/512/732/732200.png\" width=\"20\" \r\n                             style=\"filter: brightness(0) invert(1); margin-right: 10px;\">\r\n                        Email Us\r\n                    </div>\r\n                </div>\r\n            </a>\r\n            \"\"\",\r\n            unsafe_allow_html=True,\r\n        )\r\n\r\n    with qc_col2:\r\n        st.markdown(\r\n            \"\"\"\r\n            <a href=\"tel:+919520496351\" style=\"text-decoration: none;\">\r\n                <div style=\"background: linear-gradient(135deg, #10B981, #047857); \r\n                          color: white;margin-right:8px; padding: 15px; margin-top:-30px;border-radius: 10px; text-align: center; \r\n                          font-weight: 600; box-shadow: 0 4px 6px rgba(5, 150, 105, 0.3);\r\n                          transition: transform 0.3s;\">\r\n                    <div style=\"display: flex; align-items: center; justify-content: center;\">\r\n                        <img src=\"https://cdn-icons-png.flaticon.com/512/455/455705.png\" width=\"20\" \r\n                             style=\"filter: brightness(0) invert(1); margin-right: 10px;\">\r\n                        Call Us\r\n                    </div>\r\n                </div>\r\n            </a>\r\n            \"\"\",\r\n            unsafe_allow_html=True,\r\n        )\r\n\r\n    # Social Media Section with elegant card layout\r\n    st.markdown(\r\n        \"\"\"\r\n    <div style=\"text-align: center; margin: 50px 0 30px;\">\r\n        <h2 style=\"color: #1E3A8A;font-size: 1.8rem; font-weight: 700; margin-bottom: 5px;\">Connect With Us</h2>\r\n        <p style=\"color: #475569; margin-bottom: 30px; font-size: 1.1rem;\">\r\n            Follow us on social media to stay updated with our latest news and updates\r\n        </p>\r\n    </div>\r\n    \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    social_media = [\r\n        {\r\n            \"name\": \"LinkedIn\",\r\n            \"icon\": \"https://cdn-icons-png.flaticon.com/512/3536/3536505.png\",\r\n            \"url\": \"https://www.linkedin.com/in/rishi-agrawal-994a42253\",\r\n            \"color\": \"#0A66C2\",\r\n            \"bg\": \"#E7F0FF\",\r\n        },\r\n        {\r\n            \"name\": \"Instagram\",\r\n            \"icon\": \"https://cdn-icons-png.flaticon.com/512/3955/3955024.png\",\r\n            \"url\": \"https://www.instagram.com/rishiagrawal45202/\",\r\n            \"color\": \"#E4405F\",\r\n            \"bg\": \"#FFEBEE\",\r\n        },\r\n        {\r\n            \"name\": \"Telegram\",\r\n            \"icon\": \"https://cdn-icons-png.flaticon.com/512/5968/5968804.png\",\r\n            \"url\": \"https://t.me/Rishi_agrawal\",\r\n            \"color\": \"#0088CC\",\r\n            \"bg\": \"#E3F2FD\",\r\n        },\r\n        {\r\n            \"name\": \"YouTube\",\r\n            \"icon\": \"https://cdn-icons-png.flaticon.com/512/3670/3670147.png\",\r\n            \"url\": \"https://youtube.com/@softcode21?si=jll8Hxsu-dvkN74T\",\r\n            \"color\": \"#FF0000\",\r\n            \"bg\": \"#FFEBEE\",\r\n        },\r\n        {\r\n            \"name\": \"WhatsApp\",\r\n            \"icon\": \"https://cdn-icons-png.flaticon.com/512/3670/3670051.png\",\r\n            \"url\": \"https://wa.me/8954730444\",\r\n            \"color\": \"#25D366\",\r\n            \"bg\": \"#E8F5E9\",\r\n        },\r\n    ]\r\n\r\n    # Display social media in a single st.markdown\r\n\r\n    social_cards_html = \"\"\"\r\n<div style=\"display: flex; justify-content: center; gap: 40px; flex-wrap: wrap; margin-bottom: 40px;\">\r\n\"\"\"\r\n\r\n    for social in social_media:\r\n        social_cards_html += f\"\"\"\r\n    <a href=\"{social['url']}\" target=\"_blank\" style=\"text-decoration: none;\">\r\n        <div style=\"width: 120px; background: white; padding: 25px 15px; border-radius: 10px; \r\n                  display: flex; flex-direction: column; align-items: center; justify-content: center; \r\n                  box-shadow: 0 8px 20px rgba(0,0,0,0.05); transition: all 0.3s ease;\r\n                  border-bottom: 4px solid {social['color']};\">\r\n            <div style=\"width: 60px; height: 60px; border-radius: 50%; background: {social['bg']}; \r\n                      display: flex; align-items: center; justify-content: center; margin-bottom: 12px;\">\r\n                <img src=\"{social['icon']}\" width=\"36\">\r\n            </div>\r\n            <div style=\"font-weight: 600; color: {social['color']}; font-size: 16px;\">{social['name']}</div>\r\n        </div>\r\n    </a>\r\n    \"\"\"\r\n\r\n    social_cards_html += \"</div>\"\r\n    components.html(social_cards_html, height=300)\r\n    # ✅ FIX: Adding unsafe_allow_html=True to properly render HTML\r\n    # Map and location\r\n    st.markdown(\r\n        \"\"\"\r\n    <div style=\"background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.05); margin-top:-60px ;\">\r\n        <h2 style=\"color: #1E3A8A; font-size: 1.5rem; display: flex; align-items: center; margin-bottom: 20px;\">\r\n            <span style=\"font-size: 1.8rem; margin-right: 10px;\">📍</span> Our Location\r\n        </h2>\r\n        <div style=\"border-radius: 10px; overflow: hidden; margin-bottom: 20px;\">\r\n            <iframe width=\"100%\" height=\"400\" src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d14057.058795243926!2d78.3839!3d27.39!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x397474e94fffffa1%3A0xd2855f8ebb006bf5!2sSadabad%2C%20Uttar%20Pradesh!5e0!3m2!1sen!2sin!4v1743499257162!5m2!1sen!2sin\" \r\n                    style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>\r\n        </div>\r\n        <p style=\"color: #475569; font-size: 1rem; margin-bottom: 0;\">\r\n            Visit us at our office in Sadabad to discuss your needs in person. We're open during business hours and look forward to meeting you!\r\n        </p>\r\n    </div>\r\n    \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    # FAQ Section\r\n    st.markdown(\r\n        \"\"\"\r\n    <div style=\"margin: 50px 0;\">\r\n        <div style=\"text-align: center; margin-bottom: 30px;\">\r\n            <h2 style=\"color: #1E3A8A; font-size: 1.8rem; font-weight: 700; margin-bottom: 5px;\">Frequently Asked Questions</h2>\r\n            <p style=\"color: #475569; margin-bottom: 0; font-size: 1.1rem;\">\r\n                Find quick answers to common questions about our services\r\n            </p>\r\n        </div>\r\n    \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    # Create expandable FAQs with Streamlit\r\n    with st.expander(\r\n        \"How can I get technical support for the Teacher Attendance System?\"\r\n    ):\r\n        st.write(\r\n            \"\"\"\r\n        You can reach our technical support team through multiple channels:\r\n        * Email us at rishiagrawal45202@gmail.com\r\n        * Call our support line at +91 9520496351\r\n        * Connect on WhatsApp at +91 8954730444\r\n        \r\n        Our team aims to respond to all inquiries within 24 hours during business days.\r\n        \"\"\"\r\n        )\r\n\r\n    with st.expander(\r\n        \"Do you offer customization services for the Teacher Attendance System?\"\r\n    ):\r\n        st.write(\r\n            \"\"\"\r\n        Yes, we offer customization services to meet the specific needs of your school or educational institution. \r\n        Our team can add custom features, integrate with your existing systems, or modify the interface to match your requirements.\r\n        \r\n        Contact us with your specific needs for a customized solution and pricing quote.\r\n        \"\"\"\r\n        )\r\n\r\n    with st.expander(\"What training and support options are available for new users?\"):\r\n        st.write(\r\n            \"\"\"\r\n        We provide comprehensive training and support for all new users:\r\n        * Initial setup and configuration assistance\r\n        * User training sessions (remote or on-site)\r\n        * Detailed documentation and user manuals\r\n        * Video tutorials for key features\r\n        * Ongoing technical support\r\n        \r\n        Our goal is to ensure a smooth transition and successful implementation of the system.\r\n        \"\"\"\r\n        )\r\n\r\n    with st.expander(\"How secure is the data in the Teacher Attendance System?\"):\r\n        st.write(\r\n            \"\"\"\r\n        Data security is our top priority:\r\n        * All data is encrypted both in transit and at rest\r\n        * Regular security audits and updates\r\n        * Role-based access controls\r\n        * Secure authentication mechanisms\r\n        * Regular automated backups\r\n        \r\n        We comply with industry best practices to ensure your school's data remains secure and confidential.\r\n        \"\"\"\r\n        )\r\n\r\n    st.markdown(\"</div>\", unsafe_allow_html=True)\r\n\r\n    # Contact form - teaser (since we can't actually process it)\r\n    st.markdown(\r\n        \"\"\"\r\n    <div style=\"background: linear-gradient(135deg, #1E3A8A, #3B82F6); \r\n               padding: 40px; border-radius: 15px; color: white; \r\n               box-shadow: 0 10px 30px rgba(59, 130, 246, 0.3); margin: 50px 0 30px;\">\r\n        <div style=\"text-align: center; margin-bottom: 30px;\">\r\n            <h2 style=\"color: white; font-size: 1.8rem; font-weight: 700; margin-bottom: 5px;\">Send Us a Message</h2>\r\n            <p style=\"color: rgba(255, 255, 255, 0.8); margin-bottom: 0; font-size: 1.1rem;\">\r\n                Have a question or need assistance? Fill out the form below and we'll get back to you shortly.\r\n            </p>\r\n        </div>\r\n    \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    # Simple form elements\r\n    form_col1, form_col2 = st.columns(2)\r\n\r\n    with form_col1:\r\n        st.text_input(\"Your Name\", placeholder=\"Enter your full name\")\r\n\r\n    with form_col2:\r\n        st.text_input(\"Your Email\", placeholder=\"Enter your email address\")\r\n\r\n    form_col3, form_col4 = st.columns(2)\r\n\r\n    with form_col3:\r\n        st.text_input(\"Phone Number\", placeholder=\"Enter your phone number\")\r\n\r\n    with form_col4:\r\n        st.selectbox(\r\n            \"Subject\",\r\n            [\r\n                \"Technical Support\",\r\n                \"Sales Inquiry\",\r\n                \"Customization Request\",\r\n                \"Training\",\r\n                \"Other\",\r\n            ],\r\n        )\r\n\r\n    st.text_area(\"Message\", placeholder=\"Type your message here...\", height=150)\r\n\r\n    st.button(\" Send Message\", type=\"secondary\", use_container_width=True)\r\n\r\n    st.markdown(\"</div>\", unsafe_allow_html=True)\r\n\r\n    # Copyright Footer with more modern design\r\n    current_year = datetime.datetime.now().year\r\n\r\n    st.markdown(\r\n        f\"\"\"\r\n    <div style=\"text-align: center; margin-top: 70px; padding-top: 30px; border-top: 1px solid #E2E8F0;\">\r\n        <div style=\"margin-bottom: 15px;\">\r\n            <img src=\"https://cdn-icons-png.flaticon.com/512/2521/2521826.png\" width=\"24\" style=\"vertical-align: middle; margin-right: 8px;\">\r\n            <span style=\"color: #1E293B; font-weight: 600; font-size: 16px;\">© {current_year} RK Coders. All Rights Reserved.</span>\r\n        </div>\r\n        <p style=\"color: #64748B; margin: 5px 0 0 0; font-size: 14px;\">\r\n            Teacher Attendance System by Rishi Agrawal, son of Late Devendra Agrawal\r\n        </p>\r\n        <p style=\"color: #94A3B8; margin: 20px 0 0 0; font-size: 12px;\">\r\n            Designed with ❤️ in Sadabad, Uttar Pradesh, India\r\n        </p>\r\n    </div>\r\n    \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n# test line to trigger git","size_bytes":49189},"backend/existing_modules/components/main2.py":{"content":"\r\nimport streamlit as st\r\n\r\nimport bcrypt\r\n\r\nst.set_page_config(\r\n    page_title=\"Teacher Arrangement System\",\r\n    page_icon=\"📚\",\r\n    layout=\"wide\",\r\n    initial_sidebar_state=\"expanded\",\r\n)\r\n\r\ndef set_global_font():\r\n    \"\"\"\r\n    पूरी ऐप पर Poppins फॉन्ट लागू करने के लिए CSS इंजेक्ट करता है।\r\n    \"\"\"\r\n    # 1. Poppins फॉन्ट को Google Fonts से इम्पोर्ट करें\r\n    # हमने अलग-अलग मोटाई (300 से 700) के फॉन्ट मंगवाए हैं\r\n    font_import_link = \"\"\"\r\n        <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\r\n    \"\"\"\r\n\r\n    # 2. पूरी ऐप पर फॉन्ट लागू करने के लिए CSS\r\n    # '*' (यूनिवर्सल सिलेक्टर) का मतलब है - \"हर एक HTML एलिमेंट पर\"\r\n    font_style_css = \"\"\"\r\n        <style>\r\n            html, body, [class*=\"st-\"], .st-emotion-cache-16txtl3, h1, h2, h3, h4, h5, h6, p, li, label, button, input, select, textarea {\r\n                font-family: 'Poppins', sans-serif !important;\r\n            }\r\n        </style>\r\n    \"\"\"\r\n    \r\n    # फॉन्ट इम्पोर्ट लिंक और स्टाइल दोनों को HTML में इंजेक्ट करें\r\n    st.markdown(font_import_link, unsafe_allow_html=True)\r\n    st.markdown(font_style_css, unsafe_allow_html=True)\r\n\r\nset_global_font()\r\ndef inject_tawkto_script():\r\n    \"\"\"Tawk.to chat widget script ko inject karta hai.\"\"\"\r\n    \r\n    # Hum st.markdown ki jagah st.components.v1.html ka istemal karenge.\r\n    # Yeh scripts inject karne ke liye zyada reliable (bharosemand) hai.\r\n    import streamlit.components.v1 as components\r\n    \r\n    tawkto_script = \"\"\"\r\n    <!--Start of Tawk.to Script-->\r\n    <script type=\"text/javascript\">\r\n    var Tawk_API=Tawk_API||{}, Tawk_LoadStart=new Date();\r\n    (function(){\r\n    var s1=document.createElement(\"script\"),s0=document.getElementsByTagName(\"script\")[0];\r\n    s1.async=true;\r\n    s1.src='https://embed.tawk.to/687226bbf5b51b190aaefe49/1ivuuekf3';\r\n    s1.charset='UTF-8';\r\n    s1.setAttribute('crossorigin','*');\r\n    s0.parentNode.insertBefore(s1,s0);\r\n    })();\r\n    </script>\r\n    <!--End of Tawk.to Script-->\r\n    \"\"\"\r\n    components.html(tawkto_script, height=0)\r\n\r\nfrom urllib.parse import quote\r\nimport streamlit.components.v1 as components\r\nimport pandas as pd\r\nimport os\r\nimport pathlib\r\nfrom streamlit_lottie import st_lottie\r\nimport re  # Keeping original import\r\nimport json\r\nimport data_manager\r\nimport traceback\r\nfrom auth import check_password\r\nfrom mysql.connector import Error  #\r\nfrom auto_marker import create_railway_optimized_automarker \r\nfrom components.dashboard import render_dashboard\r\nfrom components.admin_controls import render_admin_page\r\nfrom components.reports import render_reports_page\r\nfrom components.arrangements import render_arrangements_page\r\nfrom components.schedule_manager import render_schedule_manager_page\r\nfrom components.teacher_management import render_teacher_management_page\r\nfrom components.substitute_pool import render_substitute_pool_page\r\nfrom components.coverage_tracking import render_coverage_tracking_page\r\nfrom components.legal_pages import render_terms_and_conditions, render_contact_page\r\nimport streamlit.components.v1 as components\r\nfrom urllib.parse import quote\r\nfrom streamlit.components.v1 import html\r\ndef load_svg(file_path):\r\n    \"\"\"Load SVG content from a file\"\"\"\r\n    try:\r\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\r\n            return f.read()\r\n    except (FileNotFoundError, Exception) as e:\r\n        print(f\"Error loading SVG file {file_path}: {e}\")\r\n        return \"\"\r\n\r\n\r\ndef load_css(file_name):\r\n    with open(file_name) as f:\r\n        st.markdown(f\"<style>{f.read()}</style>\", unsafe_allow_html=True)\r\n\r\n\r\nload_css(\"static/style.css\")\r\nfrom streamlit.web.server.server import Server\r\n\r\ndef get_school_id_from_hostname():\r\n    \"\"\"\r\n    Railway dwara provide kiye gaye 'Host' header se school ID (subdomain) nikalta hai.\r\n    \"\"\"\r\n    try:\r\n        # Streamlit 1.18+ mein headers access karne ka standard tareeka\r\n        session_info = Server.get_current()._get_session_info()\r\n        # Railway is header ko set karta hai, jismein original host name hota hai.\r\n        # Example: \"school-a.skoolhub.in\"\r\n        host = session_info.headers.get('Host', '').lower()\r\n\r\n        # Agar host aapke main domain par end hota hai\r\n        if host and host.endswith(\"skoolhub.in\"):\r\n            subdomain = host.split('.')[0]\r\n            # 'www' ya khali subdomain ko ignore karein\r\n            if subdomain and subdomain != 'www':\r\n                st.session_state['subdomain_school_id'] = subdomain\r\n                print(f\"DEBUG: Subdomain '{subdomain}' found from host '{host}'\")\r\n                return subdomain\r\n        return None\r\n    except Exception as e:\r\n        # Agar local development mein chala rahe hain, to yeh fail ho sakta hai, jo theek hai.\r\n        print(f\"INFO: Could not get hostname, likely running locally. Error: {e}\")\r\n        return None\r\n\r\n# Aap is function ko app ke shuru mein ek baar call kar sakte hain.\r\n# Aur result ko session_state mein store kar sakte hain.\r\n\r\n\r\ndef serve_static_file(filename):\r\n    filepath = os.path.join(\"static\", filename)\r\n    if os.path.exists(filepath):\r\n        with open(filepath, \"r\", encoding=\"utf-8\") as file:\r\n            st.markdown(\r\n                f'<script type=\"application/json\" id=\"{filename}\">{file.read()}</script>',\r\n                unsafe_allow_html=True,\r\n            )\r\n    else:\r\n        print(f\"Warning: Static file not found: {filepath}\")\r\n\r\n\r\nserve_static_file(\"manifest.json\")\r\n\r\n\r\ndef create_styled_component(\r\n    body_html_content, component_css_styles, height=100, font_awesome_needed=False\r\n):\r\n    font_awesome_link = (\r\n        '<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">'\r\n        if font_awesome_needed\r\n        else \"\"\r\n    )\r\n\r\n    full_html = f\"\"\"\r\n    <!DOCTYPE html>\r\n    <html>\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\r\n        {font_awesome_link}\r\n        <style>\r\n            body {{ margin: 0; padding: 0; font-family: 'Poppins', sans-serif; }}\r\n            /* Add any other common body styles here if needed */\r\n            {component_css_styles} \r\n        </style>\r\n    </head>\r\n    <body>\r\n        {body_html_content}\r\n    </body>\r\n    </html>\r\n    \"\"\"\r\n    components.html(full_html, height=height)\r\n\r\n\r\n\r\n\r\ndef svg_with_style(svg_content, color=\"currentColor\", size=24):\r\n    colored_svg = svg_content.replace('stroke=\"currentColor\"', f'stroke=\"{color}\"')\r\n    colored_svg = colored_svg.replace('fill=\"currentColor\"', f'fill=\"{color}\"')\r\n    return f\"\"\"<div style=\"display: inline-block; width: {size}px; height: {size}px;\">{colored_svg}</div>\"\"\"\r\n\r\n\r\ndef load_lottie_file(filepath):\r\n    try:\r\n        if pathlib.Path(filepath).exists():\r\n            with open(filepath, \"r\") as f:\r\n                return json.load(f)\r\n        else:\r\n            return None\r\n    except Exception as e:\r\n        print(f\"Error loading animation: {e}\")\r\n        return None\r\n\r\n\r\nif \"authenticated\" not in st.session_state:\r\n    st.session_state.authenticated = False\r\nif \"user\" not in st.session_state:\r\n    st.session_state.user = None\r\nif \"school_id\" not in st.session_state:\r\n    st.session_state.school_id = None\r\nif \"user_details\" not in st.session_state:\r\n    st.session_state.user_details = None\r\n# if \"school_details\" not in st.session_state:\r\n#     st.session_state.school_details = None\r\nif 'subdomain_school_id' not in st.session_state:\r\n    st.session_state.subdomain_school_id = get_school_id_from_hostname() \r\n\r\nif \"current_page\" not in st.session_state:\r\n    st.session_state.current_page = \"dashboard\"\r\nif \"data_manager\" not in st.session_state or st.session_state.data_manager is None:\r\n    try:\r\n        st.session_state.data_manager = data_manager.DataManager()\r\n        print(\"DataManager instance initialized in session state.\")\r\n    except Exception as e:\r\n        st.error(f\"CRITICAL: Error initializing DataManager: {e}\")\r\n        st.session_state.data_manager = None\r\n\r\nif \"automarker\" not in st.session_state:\r\n    st.session_state.automarker = None\r\n\r\nst.markdown(  # PWA Service Worker Script\r\n    \"\"\"\r\n<script>\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.register('/static/sw.js')\r\n        .then(() => console.log('Service Worker Registered'))\r\n        .catch(err => console.log('Service Worker Registration Failed:', err));\r\n    }\r\n</script>\r\n\"\"\",\r\n    unsafe_allow_html=True,\r\n)\r\n\r\n\r\n# --- Sidebar Content (MODIFIED Logout) ---\r\nwith st.sidebar:\r\n    # Logo display logic (Keep as is)\r\n    school_details_for_logo = st.session_state.get(\"school_details\")\r\n    logo_url = (\r\n        school_details_for_logo.get(\"logourl\") if school_details_for_logo else None\r\n    )\r\n    if logo_url:\r\n        st.image(logo_url, width=150)\r\n    else:\r\n        st.image(\"attached_assets/logo.png\", width=150)\r\n\r\n    school_details = st.session_state.get(\"school_details\")\r\n    default_app_title = (\r\n        \"Skoolhub.in\"  # Fallback title before login or if name not found\r\n    )\r\n    school_name_to_display = default_app_title\r\n    if school_details and \"school_name\" in school_details:\r\n        school_name_to_display = school_details[\"school_name\"]\r\n    if (\r\n        st.session_state.authenticated\r\n        and school_details\r\n        and \"school_name\" in school_details\r\n    ):\r\n        # User is logged in and school details are available\r\n        display_text = school_details[\"school_name\"]\r\n        title_tag = \"h1\"  # Use h2 as was in the previous full code\r\n        margin_left = \"10px\"  # Margin as was in the previous full code\r\n    else:\r\n        # User is NOT logged in OR school details not available/incomplete\r\n        # Display the general app title\r\n        display_text = default_app_title\r\n        title_tag = \"h1\"  # Use h2\r\n        margin_left = \"10px\"  # Margin\r\n    # Your SVG icon embedded directly\r\n    sidebar_header_html = \"\"\"\r\n    <div style=\"\r\n        display: flex; \r\n        align-items: center; \r\n        gap: 16px; /* Creates space between icon and text */\r\n        padding: 5px 25px; /* Vertical and horizontal padding */\r\n        margin-bottom: 35px; /* Space below the entire header */\r\n        justify-content: center; /* Center the items horizontally */\r\n    \">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"36\" height=\"36\" fill=\"silver\" class=\"sidebar-icon\" viewBox=\"0 0 16 16\">\r\n            <path d=\"M8.211 2.047a.5.5 0 0 0-.422 0l-7.5 3.5a.5.5 0 0 0 .025.917l7.5 3a.5.5 0 0 0 .372 0L14 7.14V13a1 1 0 0 0-1 1v2h3v-2a1 1 0 0 0-1-1V6.739l.686-.275a.5.5 0 0 0 .025-.917l-7.5-3.5Z\"/>\r\n            <path d=\"M4.176 9.032a.5.5 0 0 0-.656.327l-.5 1.7a.5.5 0 0 0 .294.605l4.5 1.8a.5.5 0 0 0 .372 0l4.5-1.8a.5.5 0 0 0 .294-.605l-.5-1.7a.5.5 0 0 0-.656-.327L8 10.466 4.176 9.032Z\"/>\r\n        </svg>\r\n        <h1 style=\" \r\n            padding: 0; \r\n            font-family: 'Poppins', sans-serif;\r\n            font-size: 1.6rem;\r\n            color:silver;\r\n            font-weight: 700;\r\n            background: linear-gradient(45deg, #FFFFFF, #D1D5DB) !important;\r\n            -webkit-background-clip: text !important;\r\n            -webkit-text-fill-color: transparent !important;\r\n            text-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);\r\n        \">\r\n            {school_name_placeholder}\r\n        </h1>\r\n    </div>\r\n    \"\"\"\r\n    # Use .format() to insert the dynamic school name\r\n\r\n    formatted_html = sidebar_header_html.format(school_name_placeholder=display_text)\r\n    st.markdown(\r\n        formatted_html,\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    # --- Theme Toggle (Keep as is) ---\r\n    if st.session_state.authenticated:\r\n\r\n    # 1. सेशन स्टेट को शुरू करें (अगर पहले से नहीं है)\r\n        if \"dark_mode\" not in st.session_state:\r\n          st.session_state.dark_mode = False\r\n\r\n    # 2. डार्क मोड के लिए विस्तृत CSS\r\n        DARK_THEME_CSS = \"\"\"\r\n        <style>\r\n            /* --- डार्क मोड के वैरिएबल --- */\r\n            :root {\r\n                --dark-bg-main: #0E1117;\r\n                --dark-bg-secondary: #161B22;\r\n                --dark-text-main: #CDD9E5;\r\n                --dark-text-strong: #FFFFFF;\r\n                --dark-text-light: #7d8590;\r\n                --dark-border-color: #30363d;\r\n                --dark-accent-color: #58a6ff;\r\n            }\r\n            \r\n            /* --- ग्लोबल स्टाइल --- */\r\n            body, .stApp {\r\n                background-color: var(--dark-bg-main) !important;\r\n                color: var(--dark-text-main) !important;\r\n            }\r\n            [data-testid=\"stSidebar\"] {\r\n                background-color: var(--dark-bg-secondary) !important;\r\n                border-right: 1px solid var(--dark-border-color) !important;\r\n            }\r\n            h1, h2, h3, h4, h5, h6 {\r\n                color: var(--dark-text-strong) !important;\r\n            }\r\n            p, li, label, .st-emotion-cache-16idsys p, .st-emotion-cache-1avcm0n p {\r\n                color: var(--dark-text-main) !important;\r\n            }\r\n\r\n            /* --- बटन्स --- */\r\n            .stButton>button {\r\n                background-color: #21262d !important;\r\n                color: var(--dark-text-main) !important;\r\n                border: 1px solid var(--dark-border-color) !important;\r\n            }\r\n            .stButton>button:hover {\r\n                border-color: var(--dark-accent-color) !important;\r\n                color: var(--dark-accent-color) !important;\r\n                background-color: #30363d !important;\r\n            }\r\n            .stDownloadButton>button {\r\n                background-color: var(--dark-accent-color) !important;\r\n                color: var(--dark-text-strong) !important;\r\n            }\r\n            \r\n            /* --- इनपुट और सेलेक्ट बॉक्स --- */\r\n            div[data-testid=\"stTextInput\"] input, \r\n            div[data-testid=\"stSelectbox\"] div[data-baseweb=\"select\"] > div,\r\n            div[data-testid=\"stDateInput\"] input {\r\n                background-color: var(--dark-bg-secondary) !important;\r\n                color: var(--dark-text-main) !important;\r\n                border: 1px solid var(--dark-border-color) !important;\r\n            }\r\n\r\n            /* --- डेटाफ्रेम और टेबल्स --- */\r\n            div[data-testid=\"stDataFrame\"] { border: 1px solid var(--dark-border-color); }\r\n            .st-emotion-cache-1wbqy5l { background-color: var(--dark-bg-secondary); }\r\n            .st-emotion-cache-a51556:hover { background-color: #21262d; }\r\n            \r\n            /* --- आपके कस्टम कॉम्पोनेन्ट --- */\r\n            /* प्रोफ़ाइल कार्ड */\r\n            .pro-card {\r\n                background: rgba(33, 38, 45, 0.7) !important;\r\n                backdrop-filter: blur(10px) !important;\r\n                -webkit-backdrop-filter: blur(10px) !important;\r\n                border: 1px solid var(--dark-border-color) !important;\r\n            }\r\n            .pro-title, .pro-info-item, .pro-avatar { color: var(--dark-text-strong) !important; }\r\n            .pro-subtitle { color: var(--dark-text-light) !important; }\r\n            .pro-info-item svg { color: var(--dark-accent-color) !important; }\r\n\r\n            /* डैशबोर्ड कार्ड्स */\r\n            .stat-v2-card, .feature1-card, .auto-absent-notice {\r\n                background: var(--dark-bg-secondary) !important;\r\n                border: 1px solid var(--dark-border-color) !important;\r\n            }\r\n            .stat-v2-card .title, .stat-v2-card .subtitle, \r\n            .feature1-description, .notice-text { \r\n                color: var(--dark-text-main) !important; \r\n            }\r\n            .stat-v2-card .value, .feature1-title, .notice-title { \r\n                color: var(--dark-text-strong) !important; \r\n            }\r\n            \r\n            /* Lottie एनीमेशन */\r\n            .stLottie div[role=\"img\"] {\r\n                 filter: invert(0.9) hue-rotate(180deg) brightness(1.2);\r\n            }\r\n         </style>\r\n        \"\"\"\r\n    \r\n    # 3. CSS को डायनामिक रूप से इंजेक्ट करें\r\n    # अगर डार्क मोड ऑन है, तो CSS इंजेक्ट करो, वरना कुछ नहीं\r\n        if st.session_state.dark_mode:\r\n         st.markdown(DARK_THEME_CSS, unsafe_allow_html=True)\r\n    \r\n    # 4. थीम टॉगल बटन\r\n        def toggle_theme():\r\n         st.session_state.dark_mode = not st.session_state.dark_mode\r\n\r\n        icon = \":material/light_mode:\" if st.session_state.dark_mode else \":material/dark_mode:\"\r\n        button_text = \"Enable Light Mode\" if st.session_state.dark_mode else \"Enable Dark Mode\"\r\n\r\n    # यह बटन अब सही से काम करेगा\r\n        if st.button(\r\n         f\"{icon} {button_text}\",\r\n         key=\"theme_switch\",\r\n         on_click=toggle_theme,\r\n         use_container_width=True,\r\n        ):\r\n        # on_click खुद ही rerun करता है, इसलिए यहाँ कुछ करने की ज़रूरत नहीं है\r\n          pass\r\n    \r\n        st.divider()\r\n        pages = {  # Keep original pages\r\n            \"dashboard\": (\":material/dashboard:\", \"Dashboard\"),\r\n            \"billing\": (\":material/payment:\", \"Billing & Subscriptions\"),\r\n            \"admin\": (\":material/admin_panel_settings:\", \"Administrative Controls\"),\r\n            \"arrangements\": (\":material/swap_horiz:\", \"Arrangements\"),\r\n            \"reports\": (\":material/bar_chart:\", \"Reports\"),\r\n           \r\n            \"schedule_manager\": (\":material/edit_calendar:\", \"Schedule Manager\"),\r\n            \"teacher_management\": (\":material/person_add:\", \"Teacher Management\"),\r\n            \"substitute_pool\": (\":material/people_alt:\", \"Substitute Teachers\"),\r\n            \"coverage_tracking\": (\":material/analytics:\", \"Class Coverage\"),\r\n            \"terms\": (\":material/gavel:\", \"Terms & Conditions\"),\r\n            \"contact\": (\":material/contact_phone:\", \"Contact Us\"),\r\n        }\r\n        for page, (icon, label_text) in pages.items():\r\n            display_label = f\"{icon} {label_text}\"\r\n            if st.button(display_label, key=f\"nav_{page}\", use_container_width=True):\r\n                st.session_state.current_page = page\r\n                st.rerun()\r\n        st.divider()\r\n\r\n        # --- User Profile Card (Keep as is) ---\r\n        user_details = st.session_state.get(\"user_details\")\r\n        if user_details:\r\n            first_letter = (\r\n                user_details.get(\"name\", \"U\")[0].upper()\r\n                if user_details.get(\"name\")\r\n                else \"U\"\r\n            )\r\n\r\n        profile_card_html = f\"\"\"\r\n        <!DOCTYPE html>\r\n        <html lang=\"en\">\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n            \r\n            <!-- स्टेप 1: Poppins फॉन्ट को Google Fonts से इम्पोर्ट करें -->\r\n            <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\r\n            \r\n            <style>\r\n                /* स्टेप 2: यहाँ Poppins फॉन्ट और अन्य स्टाइल लागू करें */\r\n                body {{\r\n                    font-family: 'Poppins', sans-serif;\r\n                    background-color: transparent; /* ताकि यह साइडबार के रंग के साथ मिल जाए */\r\n                    margin: 0;\r\n                    padding: 0;\r\n                }}\r\n                \r\n                .pro-card {{\r\n                    background: rgba(44, 62, 80, 0.45); /* सेमी-ट्रांसपेरेंट डार्क बैकग्राउंड */\r\n                    backdrop-filter: blur(12px);\r\n                    -webkit-backdrop-filter: blur(12px);\r\n                    border-radius: 20px;\r\n                    padding: 25px;\r\n                    border: 1px solid rgba(255, 255, 255, 0.18);\r\n                    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.2);\r\n                    color: #ecf0f1; /* हल्का सफेद टेक्स्ट */\r\n                }}\r\n                \r\n                .pro-header {{\r\n                    display: flex;\r\n                    align-items: center;\r\n                    margin-bottom: 25px;\r\n                    padding-bottom: 20px;\r\n                    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n                }}\r\n                \r\n                .pro-avatar {{\r\n                    width: 60px; height: 60px;\r\n                    background: linear-gradient(135deg, #8e44ad, #3498db); /* पर्पल-ब्लू ग्रेडिएंट */\r\n                    border-radius: 50%;\r\n                    display: flex; align-items: center; justify-content: center;\r\n                    margin-right: 20px; font-size: 28px; font-weight: 700; color: white;\r\n                    flex-shrink: 0;\r\n                }}\r\n                \r\n                .pro-title-wrapper {{ line-height: 1.3; }}\r\n                .pro-title {{ font-size:18px; font-weight: 600; margin: 0; color: #ffffff; }}\r\n                .pro-subtitle {{ font-size: 0.85rem; font-weight: 500; color: #bdc3c7; text-transform: uppercase; }}\r\n                .pro-info {{ display: flex; flex-direction: column; gap: 18px; }}\r\n                .pro-info-item {{ display: flex; align-items: flex-start; font-size: 0.95rem; color: #ecf0f1; font-weight: 500; }}\r\n                .pro-info-item svg {{ margin-right: 15px; margin-top: 3px; min-width: 18px; flex-shrink: 0; color: #3498db; }}\r\n                .pro-info-item span {{ word-break: break-all; }}\r\n            </style>\r\n        </head>\r\n        <body>\r\n            <!-- प्रोफ़ाइल कार्ड का HTML -->\r\n            <div class=\"pro-card\">\r\n                <div class=\"pro-header\">\r\n                    <div class=\"pro-avatar\">{first_letter}</div>\r\n                    <div class=\"pro-title-wrapper\">\r\n                        <h2 class=\"pro-title\">{user_details.get('name', 'N/A')}</h2>\r\n                        <p class=\"pro-subtitle\">Administrator</p>\r\n                    </div>\r\n                </div>\r\n                <div class=\"pro-info\">\r\n                    <div class=\"pro-info-item\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M6 3.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5-.5h-8a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 0-1 0v2A1.5 1.5 0 0 0 6.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-8A1.5 1.5 0 0 0 5 3.5v2a.5.5 0 0 0 1 0v-2z\"/><path d=\"M11.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H1.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z\"/></svg>\r\n                        <span><strong>School ID:</strong> {st.session_state.get('school_id', 'N/A')}</span>\r\n                    </div>\r\n                    <div class=\"pro-info-item\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697ZM6.761 8.83l-6.57 4.027A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144l-6.57-4.027L8 9.586l-1.239-.757Zm3.436-.586L16 11.803V4.697l-5.803 3.546Z\"/></svg>\r\n                        <span>{user_details.get('email', 'N/A')}</span>\r\n                    </div>\r\n                    <div class=\"pro-info-item\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M1.885.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z\"/></svg>\r\n                        <span>{user_details.get('phone', 'N/A')}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </body>\r\n        </html>\r\n        \"\"\"\r\n        \r\n        # कंपोनेंट को रेंडर करें और उसकी हाइट सेट करें\r\n        components.html(profile_card_html, height=320)\r\n\r\n\r\n        logout_icon = \":material/logout:\"\r\n        logout_label_text = \"Logout\"\r\n        display_logout_label = f\"{logout_icon} {logout_label_text}\"\r\n\r\n        if st.sidebar.button(\r\n            display_logout_label,\r\n            type=\"secondary\",\r\n            use_container_width=True,\r\n            key=\"logout_button_key\",\r\n        ):\r\n\r\n            keys_to_clear = [\r\n                \"authenticated\",\r\n                \"user\",\r\n                \"school_id\",\r\n                \"user_details\",\r\n                \"school_details\",\r\n                \"current_page\",\r\n                \"automarker\" # ⭐️⭐️⭐️ FIX 3: Logout par automarker ko bhi clear karein ⭐️⭐️⭐️\r\n            ]\r\n            for key in keys_to_clear:\r\n                if key in st.session_state:\r\n                    del st.session_state[key]\r\n            st.session_state.authenticated = False\r\n            st.session_state.current_page = \"dashboard\"\r\n\r\n            st.success(\"Logged out successfully.\")\r\n            st.rerun()\r\n\r\ninject_tawkto_script()\r\nif not st.session_state.authenticated:\r\n\r\n    # lottie_animation = load_lottie_file(\"attached_assets/lottie_animation.json\")\r\n    # st_lottie(lottie_animation, height=130, key=\"login_lottie\")\r\n\r\n    st.markdown(  # Copied from original\r\n        \"\"\"\r\n            <div style=\"text-align: center; margin-top: -70px;\">\r\n                <h1 style=\"font-weight: 700;\r\n                background: linear-gradient(90deg, #1E3A8A, #3B82F6);\r\n                -webkit-background-clip: text;\r\n                -webkit-text-fill-color: transparent;\r\n                 display: inline-block;\">🎓 Teacher Attendance System</h1>\r\n                <p style=\" font-weight: 600;\r\n        color: #6c7293;\r\n        font-size: 1.1rem;\">\"Intelligent automation for school management with real-time arrangements\"</p>\r\n            </div>\r\n            \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n    subdomain_id = st.session_state.get('subdomain_school_id')\r\n    # --- Normal Login Flow (MODIFIED DB handling) ---\r\n    with st.form(\"login_form\"):\r\n        feature_badges_body_html = \"\"\"\r\n<div class=\"features-container\">\r\n    <div class=\"feature-badge\">\r\n        <i class=\"fas fa-award\"></i>\r\n        <span>Premium</span>\r\n    </div>\r\n    <div class=\"feature-badge\">\r\n        <i class=\"fas fa-bolt\"></i>\r\n        <span>Fast</span>\r\n    </div>\r\n    <div class=\"feature-badge\">\r\n        <i class=\"fas fa-shield-alt\"></i>\r\n        <span>Secure</span>\r\n    </div>\r\n</div>\r\n\"\"\"\r\n\r\n        # 2. Define the CSS styles for the badges\r\n        feature_badges_css = \"\"\"\r\n:root {\r\n    /* Define your CSS variables here if they are not globally defined */\r\n    /* Agar yeh variables aapne pehle se main CSS block mein define kiye hain, to yahan dobara karne ki zaroorat nahi */\r\n    --glass-border: rgba(255, 255, 255, 0.2); /* Example */\r\n    --premium-gold: #FFD700; /* Example */\r\n    --neon-blue: #00C9FF;    /* Example */\r\n    --success-green: #28A745; /* Example */\r\n}\r\n\r\n.features-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 1.5rem;\r\n    \r\n    flex-wrap: wrap;\r\n}\r\n\r\n.feature-badge {\r\n    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1), rgba(139, 92, 246, 0.1)); \r\n    border: 1px solid var(--glass-border); \r\n    border-radius: 20px; \r\n    padding: 10px 20px; /* Thodi zyada padding */\r\n    backdrop-filter: blur(8px); /* Thoda kam blur for better readability */\r\n    display: flex; /* Icon aur text ko align karne ke liye */\r\n    align-items: center;\r\n    transition: transform 0.3s ease, box-shadow 0.3s ease; /* Hover effect */\r\n}\r\n\r\n.feature-badge:hover {\r\n    transform: translateY(-5px);\r\n    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.feature-badge i {\r\n    margin-right: 8px; /* Icon aur text ke beech space */\r\n    font-size: 1.1rem; /* Icon ka size */\r\n}\r\n\r\n.feature-badge .fa-award {\r\n    color: var(--premium-gold);\r\n}\r\n.feature-badge .fa-bolt {\r\n    color: var(--neon-blue);\r\n}\r\n.feature-badge .fa-shield-alt {\r\n    color: var(--success-green);\r\n}\r\n\r\n.feature-badge span {\r\n    color: #141212; /* Text color */\r\n    font-size: 0.95rem; /* Thoda sa bada font */\r\n    font-weight: 600;\r\n}\r\n\"\"\"\r\n\r\n        # 3. Call the helper function to render the component\r\n        # Font Awesome ki zaroorat hai, isliye font_awesome_needed=True\r\n        # Height ko badges ke content ke hisaab se adjust karein\r\n        create_styled_component(\r\n            body_html_content=feature_badges_body_html,\r\n            component_css_styles=feature_badges_css,\r\n            height=100,  # Aapko is height ko adjust karna pad sakta hai\r\n            font_awesome_needed=True,\r\n        )\r\n        font_awesome_link = '<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">'\r\n        login_heading_html = f\"\"\"\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\r\n        {font_awesome_link} \r\n    <style>\r\n        body {{\r\n            \r\n            padding: 0;\r\n            margin-top:-40px;\r\n            font-family: 'Poppins', sans-serif;\r\n            display: flex; /* To center content */\r\n            justify-content: center; /* To center content */\r\n            align-items: center; /* To center content */\r\n           \r\n        }}\r\n        .container {{\r\n        \r\n            text-align: center;\r\n            /* margin-bottom: 2rem;  -- Yeh component ki height se control hoga */\r\n        }}\r\n        .login-prompt {{\r\n            color: #475569; /* Removed !important, should not be needed here */\r\n            font-weight: 600; /* 550 is not a standard value, 500 or 600 */\r\n            font-family: 'Poppins', sans-serif; \r\n            font-size: 2.1rem;\r\n            display: flex; /* For icon and text alignment */\r\n            align-items: center;\r\n            justify-content: center;\r\n        }}\r\n        .login-prompt .fas {{ /* Targeting Font Awesome icon */\r\n            color: #8A2BE2; /* Example neon-purple, aap apna variable daal sakte hain ya seedha color */\r\n            margin-right: 10px; /* Space between icon and text */\r\n        }}\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <p class=\"login-prompt\">\r\n            <i class=\"fas fa-user-check\"></i>\r\n            Please sign into your account\r\n        </p>\r\n        </div>\r\n        </body>\r\n        </html>\r\n        \"\"\"\r\n        components.html(login_heading_html, height=100)\r\n        st.markdown(\r\n            \"\"\"\r\n                <style>\r\n                    .input-with-icon {\r\n                        display: flex;\r\n                        align-items: center;\r\n                        margin-bottom: -10px; /* Adjust to reduce space before input */\r\n                    }\r\n                    .input-with-icon i {\r\n                        color: #3b82f6; /* Icon color */\r\n                        margin-right: 10px;\r\n                        font-size: 1.1rem;\r\n                    }\r\n                    .input-with-icon span {\r\n                        font-weight: 600;\r\n                        font-family: 'Poppins', sans-serif;\r\n                        font-size: 1rem;\r\n                        color: #475569;\r\n                    }\r\n                </style>\r\n                <div class=\"input-with-icon\">\r\n                    <i class=\"fas fa-user\"></i>\r\n                    <span>Username</span>\r\n                </div>\r\n                \"\"\",\r\n            unsafe_allow_html=True,\r\n        )\r\n\r\n        username = st.text_input(\r\n            \"Username_label\",\r\n            placeholder=\"Enter your username\",\r\n            help=\"Your registered username\",\r\n            key=\"login_username\",\r\n            label_visibility=\"collapsed\",\r\n        )\r\n        st.markdown(\r\n            \"\"\"\r\n                <div class=\"input-with-icon\" style=\"margin-top: 1rem;\">\r\n                    <i class=\"fas fa-lock\"></i>\r\n                    <span>Password</span>\r\n                </div>\r\n                \"\"\",\r\n            unsafe_allow_html=True,\r\n        )\r\n        password = st.text_input(\r\n            \"Password_label\",\r\n            type=\"password\",\r\n            placeholder=\"Enter your password\",\r\n            help=\"Your account password\",\r\n            key=\"login_password\",\r\n            label_visibility=\"collapsed\",\r\n        )\r\n        st.markdown(\r\n            \"\"\"\r\n                <div class=\"input-with-icon\" style=\"margin-top: 1rem;\">\r\n                    <i class=\"fas fa-school\"></i>\r\n                    <span>School ID</span>\r\n                </div>\r\n                \"\"\",\r\n            unsafe_allow_html=True,\r\n        )\r\n        if subdomain_id:\r\n            st.text_input(\r\n                \"School ID_label\",\r\n                value=subdomain_id,  # Set the value from subdomain\r\n                key=\"login_school_id\",\r\n                disabled=True,      # Disable the input\r\n                label_visibility=\"collapsed\",\r\n            )\r\n        else:\r\n            # Agar subdomain se ID nahi mili, to user ko enter karne dein\r\n            st.text_input(\r\n                \"School ID_label\",\r\n                placeholder=\"(School identifier)\",\r\n                key=\"login_school_id\",\r\n                label_visibility=\"collapsed\",\r\n            )\r\n\r\n        remember_me = st.checkbox(\"Remember me\")\r\n        submitted = st.form_submit_button(\r\n            \"🚀 Sign In Securly\", use_container_width=True\r\n        )\r\n\r\n        if submitted:\r\n            form_username = st.session_state.login_username\r\n            form_password = st.session_state.login_password\r\n            form_school_id = st.session_state.login_school_id\r\n            with st.spinner(\"🔐 Authenticating...\"):\r\n                user_details = check_password(\r\n                        form_username, form_password, form_school_id\r\n                )  # Pass only needed args\r\n                print(f\"DEBUG main.py: check_password returned: {user_details}\")\r\n\r\n                if user_details:\r\n                    # Check if it's a subscription error\r\n                    if isinstance(user_details, dict) and 'error' in user_details:\r\n                        st.error(f\"🚫 {user_details['error']}\")\r\n                        st.markdown(\"\"\"\r\n                        <div style=\"background: linear-gradient(135deg, #1e293b 0%, #334155 100%); \r\n                                    padding: 1.5rem; border-radius: 12px; margin: 1rem 0; text-align: center;\">\r\n                            <p style=\"color: white; margin: 0; font-size: 1.1rem;\">\r\n                                📞 <strong>Contact us for subscription plans:</strong>\r\n                            </p>\r\n                            <p style=\"color: #94a3b8; margin: 0.5rem 0 0 0;\">\r\n                                Email: rk.coders.help@gmail.com | Phone: +91 98765-43210\r\n                            </p>\r\n                        </div>\r\n                        \"\"\", unsafe_allow_html=True)\r\n                    else:\r\n                        # User authentication successful - proceed with login\r\n                        st.session_state.authenticated = True\r\n                        st.session_state.user = form_username\r\n                        st.session_state.school_id = form_school_id\r\n                    data_manager_instance = st.session_state.data_manager\r\n                    if data_manager_instance is None:\r\n                        st.error(\"DataManager failed to initialize. Cannot proceed.\")\r\n                        st.session_state.authenticated = False\r\n                    else:\r\n                        st.session_state.user_details = user_details\r\n                        school_details = data_manager_instance.get_school_details(\r\n                            form_school_id\r\n                        )\r\n\r\n                        if school_details:\r\n                            st.session_state.school_details = school_details\r\n                        else:\r\n                            st.warning(\r\n                                f\"Could not fetch details for school ID: {form_school_id}.\"\r\n                            )\r\n                            st.session_state.school_details = None\r\n                        \r\n                        # Initialize AutoMarker after successful login\r\n                        try:\r\n                            if st.session_state.get(\"automarker\") is None:\r\n                                print(\"INFO main.py: Initializing AutoMarker after successful login.\")\r\n                                st.session_state.automarker = create_railway_optimized_automarker(\r\n                                    form_school_id, data_manager_instance\r\n                                )\r\n                                if st.session_state.automarker:\r\n                                    print(\"SUCCESS: AutoMarker background thread started.\")\r\n                        except Exception as e:\r\n                            print(f\"WARNING: Could not initialize AutoMarker: {e}\")\r\n                            # Don't block login if AutoMarker fails\r\n\r\n                        st.success(\"✅ Login successful! Welcome back!\")\r\n                        st.session_state.current_page = \"dashboard\"\r\n                        st.rerun()\r\n                else:\r\n                    # Login Failed\r\n                    st.error(\"Invalid School ID, username, or password.\")\r\n    new_user_section_body_html = \"\"\"\r\n    <div class=\"new-user-card\">\r\n        <p class=\"main-prompt\">\r\n            <i class=\"fas fa-user-plus\"></i>\r\n            New to Skoolhub? Contact Admin for access\r\n        </p>\r\n        <div class=\"features-inline\">\r\n            <span><i class=\"fas fa-shield-alt\"></i> Secure</span>\r\n            <span><i class=\"fas fa-check-circle\"></i> Reliable</span>\r\n            <span><i class=\"fas fa-star\"></i> Professional</span>\r\n        </div>\r\n        <p class=\"copyright-text\">\r\n            © 2025 Skoolhub.in - Professional Teacher Management System\r\n        </p>\r\n    </div>\r\n    \"\"\"\r\n\r\n    # 3. Define the CSS styles for this specific section\r\n    new_user_section_css = \"\"\"\r\n    .new-user-card {\r\n        text-align: center;\r\n        margin-top: 7rem;\r\n        padding: 1.5rem;\r\n        \r\n        \r\n        font-family: 'Poppins', sans-serif;\r\n        border-radius: 16px;\r\n        /* If main page BG is dark, use rgba(255, 255, 255, 0.1) */\r\n        backdrop-filter: blur(10px); /* Reduced blur from 15px for sharper text */\r\n        border: 1px solid rgba(255, 255, 255, 0.12); /* Subtle border */\r\n        \r\n    }\r\n\r\n    .main-prompt {\r\n        color: #475569; \r\n        font-weight: 600;\r\n        font-size: 1.1rem; /* Consistent font size */\r\n        margin-bottom: 1.2rem; /* Adjusted margin */\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\r\n    .main-prompt .fa-user-plus {\r\n        color: black; /* Bright cyan */\r\n        margin-right: 10px;\r\n        font-size: 1.25rem;\r\n    }\r\n\r\n    .features-inline {\r\n        display: flex;\r\n        color: black;\r\n        justify-content: center;\r\n        gap: 2rem;\r\n        margin: 1.2rem 0; /* Adjusted margin */\r\n        flex-wrap: wrap;\r\n    }\r\n\r\n    .features-inline span {\r\n        font-weight: 600;\r\n        color: #6c7293;\r\n        font-size: 0.9rem;\r\n        font-weight: 500; /* Slightly less bold than main prompt */\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n\r\n    .features-inline i {\r\n        margin-right: 7px;\r\n        font-size: 0.95rem;\r\n    }\r\n\r\n    .features-inline .fa-shield-alt { color: #A78BFA; } /* Lighter purple */\r\n    .features-inline .fa-check-circle { color: #34D399; } /* Lighter green */\r\n    .features-inline .fa-star { color: #FBBF24; } /* Lighter gold/amber */\r\n\r\n    .copyright-text {\r\n        font-weight: 600;\r\n        background: linear-gradient(90deg, #1E3A8A, #3B82F6);\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        font-size: 0.85rem;\r\n        margin-top: 1.2rem; /* Adjusted margin */\r\n    }\r\n    \"\"\"\r\n\r\n    # 4. Call the helper function\r\n    create_styled_component(\r\n        body_html_content=new_user_section_body_html,\r\n        component_css_styles=new_user_section_css,\r\n        height=260,  # Is height ko apne content ke anusaar adjust karein\r\n        font_awesome_needed=True,\r\n    )\r\n\r\n    # Pricing Plans & Contact for Non-Logged Users\r\n    st.markdown(\"---\")\r\n    st.markdown(\"### 💎 Choose Your Plan\")\r\n    st.write(\"Professional school management solutions starting from just ₹2,000/month\")\r\n    \r\n    col1, col2 = st.columns(2)\r\n    \r\n    with col1:\r\n        st.info(\"\"\"\r\n        **🎯 Smart School - ₹2,000/month**\r\n        \r\n        ✓ Auto Teacher Arrangements  \r\n        ✓ WhatsApp Notifications  \r\n        ✓ Basic Analytics  \r\n        ✓ Up to 100 Teachers  \r\n        ✓ Email Support\r\n        \r\n        *₹22,000/year (Save 8%)*\r\n        \"\"\")\r\n    \r\n    with col2:\r\n        st.success(\"\"\"\r\n        **👑 Premium School - ₹2,500/month** ⭐ RECOMMENDED\r\n        \r\n        ✓ Everything in Smart School  \r\n        ✓ Advanced Analytics  \r\n        ✓ Unlimited Teachers  \r\n        ✓ Priority Support  \r\n        ✓ Custom Integrations\r\n        \r\n        *₹27,000/year (Save 10%)*\r\n        \"\"\")\r\n    \r\n    st.markdown(\"---\")\r\n    st.markdown(\"### 🚀 Ready to Get Started?\")\r\n    st.write(\"**Contact us for a FREE DEMO or to set up your school's attendance system today!**\")\r\n    \r\n    col3, col4 = st.columns(2)\r\n    \r\n    with col3:\r\n        st.info(\"\"\"\r\n        **📞 Call/WhatsApp**\r\n        \r\n        **+91 9520496351**\r\n        \r\n        Available 9 AM - 8 PM\r\n        \"\"\")\r\n    \r\n    with col4:\r\n        st.info(\"\"\"\r\n        **📧 Email Support**\r\n        \r\n        **support@rkcoders.com**\r\n        \r\n        Quick Response Guaranteed\r\n        \"\"\")\r\n    \r\n    st.success(\"⚡ Free Demo Setup • 📱 WhatsApp Integration • 🎯 Custom Training • 🚀 Same Day Deployment\")\r\nelse:\r\n    current_school_id = st.session_state.get(\"school_id\")\r\n    data_manager_instance = st.session_state.get(\"data_manager\")\r\n\r\n    if current_school_id is None or data_manager_instance is None:\r\n        st.error(\r\n            \"Application state error. School ID or DataManager missing. Please log in again.\"\r\n        )\r\n        keys_to_clear = [\r\n            \"authenticated\",\r\n            \"user\",\r\n            \"school_id\",\r\n            \"user_details\",\r\n            \"school_details\",\r\n            \"current_page\",\r\n            \"automarker\" # ⭐️⭐️⭐️ FIX 3 (part 2): Logout par automarker ko bhi clear karein ⭐️⭐️⭐️\r\n        ]\r\n        for key in keys_to_clear:\r\n            if key in st.session_state:\r\n                del st.session_state[key]\r\n        st.session_state.authenticated = False\r\n        st.rerun()\r\n    else:\r\n\r\n        current_page = st.session_state.get(\"current_page\", \"dashboard\")\r\n\r\n        if current_page == \"dashboard\":\r\n            render_dashboard(current_school_id, data_manager_instance)\r\n        elif current_page == \"admin\":\r\n            render_admin_page(current_school_id, data_manager_instance)\r\n        elif current_page == \"billing\":\r\n            from components.billing import render_billing_page\r\n            render_billing_page()\r\n        elif current_page == \"arrangements\":\r\n            render_arrangements_page(current_school_id, data_manager_instance)\r\n        elif current_page == \"reports\":\r\n            render_reports_page(current_school_id, data_manager_instance)\r\n        elif current_page == \"schedule_manager\":\r\n            render_schedule_manager_page(current_school_id, data_manager_instance)\r\n        elif current_page == \"teacher_management\":\r\n            render_teacher_management_page(current_school_id, data_manager_instance)\r\n        elif current_page == \"substitute_pool\":\r\n            render_substitute_pool_page(current_school_id, data_manager_instance)\r\n        elif current_page == \"coverage_tracking\":\r\n            render_coverage_tracking_page(current_school_id, data_manager_instance)\r\n        elif current_page == \"terms\":\r\n            render_terms_and_conditions(current_school_id, data_manager_instance)\r\n        elif current_page == \"contact\":\r\n            render_contact_page(current_school_id, data_manager_instance)\r\n        else:\r\n            # Fallback to dashboard (Keep this logic)\r\n            st.warning(f\"Invalid page '{current_page}'. Redirecting to dashboard.\")\r\n            st.session_state.current_page = \"dashboard\"\r\n            render_dashboard(current_school_id, data_manager_instance)\r\n","size_bytes":46006},"backend/existing_modules/components/reports.py":{"content":"import streamlit as st\nimport pandas as pd\nfrom datetime import datetime, timedelta, date\nimport plotly.express as px\n\n\ndef render_reports_page(school_id, data_manager_module):  # Renamed for clarity\n    \"\"\"\n    Render the reports page, fetching data from the database.\n    \"\"\"\n    data_manager_instance = st.session_state.data_manager\n\n    # Check if DataManager instance is available\n    if data_manager_instance is None:\n        st.error(\"DataManager instance not available. Please report this issue.\")\n        return  # Cannot proceed without DataManager instance\n\n    st.markdown(\n        \"\"\"\n        <div style=\"margin-top: 20px; margin-bottom: 30px;color:#1e3a8a;\">\n            <h1 style=\"display: flex; align-items: center; gap: 10px;\">\n                <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M21 3v18M3 12h18M3 6h18M3 18h18\"/>\n                </svg>\n                Reports\n            </h1>\n        </div>\n        \"\"\",\n        unsafe_allow_html=True,\n    )\n    st.markdown(\n        \"\"\"\n        <h3 style=\"display: flex; align-items: center; gap: 10px; color: #2C3E50;\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"/>\n                <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"/>\n                <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"/>\n                <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"/>\n            </svg>\n            Select Date Range\n        </h3>\n    \"\"\",\n        unsafe_allow_html=True,\n    )\n\n    # Date range selection (Keep)\n    col1, col2 = st.columns(2)\n    with col1:\n        start_date = st.date_input(\n            \"Start Date\", date.today() - timedelta(days=7), key=\"report_start_date\"\n        )  # Add key\n    with col2:\n        end_date = st.date_input(\n            \"End Date\", date.today(), key=\"report_end_date\"\n        )  # Add key\n\n    if end_date < start_date:\n        st.error(\"🚨End date should be after start date\")\n        return\n\n    # Load attendance data for the selected date range from DB\n    try:\n        # data_manager_instance.get_attendance_report needs (connection, school_id, start_date, end_date)\n        attendance_df = data_manager_instance.get_attendance_report(\n            school_id, start_date=start_date, end_date=end_date\n        )\n\n        # Convert date column to date objects if needed by downstream logic (Pandas operation)\n        # It might already be date objects if read_query handles it, but ensure robustness\n        if not attendance_df.empty and \"date\" in attendance_df.columns:\n            try:\n                attendance_df[\"date\"] = pd.to_datetime(attendance_df[\"date\"]).dt.date\n            except Exception:\n                print(\"Failed to convert attendance date column to date objects.\")\n                # Continue with original column if conversion fails\n\n        # The entire fetched data IS the filtered data by date range\n        filtered_df = attendance_df.copy()  # Use copy to avoid SettingWithCopyWarning\n\n    except Exception as e:\n        st.error(f\"Error loading attendance data for reports: {str(e)}\")\n        st.error(f\"Error loading attendance data for reports: {e}\")\n        return  # Stop rendering report if data loading fails\n\n    # Fetch all teachers data for analysis and merging (Needed in tabs 2 and 3)\n    try:\n        # data_manager_instance.get_all_teachers needs (connection, school_id)\n        all_teachers_list = data_manager_instance.get_all_teachers(school_id)\n        # Convert list to DataFrame for easier merging and processing\n        teachers_df = pd.DataFrame(all_teachers_list)\n\n        # Extract teacher IDs and names for filters and lookups\n        teacher_ids = (\n            teachers_df[\"teacher_id\"].tolist()\n            if not teachers_df.empty and \"teacher_id\" in teachers_df.columns\n            else []\n        )\n        teacher_names = {\n            t.get(\"teacher_id\"): t.get(\"name\") for t in all_teachers_list\n        }  # Map ID to name\n\n    except Exception as e:\n        st.error(f\"Error loading teacher data for reports: {str(e)}\")\n        # Continue, but teacher data will be empty\n        teachers_df = pd.DataFrame()\n        teacher_ids = []\n        teacher_names = {}\n\n    # Create tabs after filtering and fetching data\n    tab1, tab2, tab3 = st.tabs([\"Attendance Summary\", \"Teacher Analysis\", \"Raw Data\"])\n\n    with tab1:\n        # --- Attendance Summary (Updated) ---\n        st.markdown(\n            \"\"\"\n        <h3 style=\"display: flex; align-items: center; gap: 10px; color: #2C3E50;\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"/>\n                <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"/>\n                <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"/>\n                <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"/>\n            </svg>\n            Attendance Summary\n        </h3>\n        \"\"\",\n            unsafe_allow_html=True,\n        )\n        # Set default values in case filtered_df is empty\n        total_records = 0\n        present_count = 0\n        absent_count = 0\n        auto_marked = 0\n\n        if not filtered_df.empty:\n            # Summary statistics (Pandas logic remains)\n            total_records = len(filtered_df)\n\n            if \"status\" in filtered_df.columns:\n                present_count = len(filtered_df[filtered_df[\"status\"] == \"present\"])\n                absent_count = len(filtered_df[filtered_df[\"status\"] == \"absent\"])\n            else:\n                print(\"Status column missing in filtered_df for summary.\")\n\n            if \"is_auto\" in filtered_df.columns:\n                # Ensure 'is_auto' is boolean before filtering\n                try:\n                    filtered_df[\"is_auto\"] = filtered_df[\"is_auto\"].astype(bool)\n                    auto_marked = len(filtered_df[filtered_df[\"is_auto\"] == True])\n                except Exception:\n                    print(\"Could not convert 'is_auto' to boolean for summary filter.\")\n                    # Fallback filter if conversion fails\n                    auto_marked = len(\n                        filtered_df[\n                            filtered_df[\"is_auto\"].astype(str).str.lower() == \"true\"\n                        ]\n                    )\n\n            else:\n                print(\"Is_auto column missing in filtered_df for summary.\")\n\n            # Custom CSS for stat cards (Keep)\n            st.markdown(\n                \"\"\"\n        <style>\n        /* ... (Keep your stat card styles here) ... */\n        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n        .stat-card {\n            background: linear-gradient(135deg, #ffffff, #f8f9fa); border-radius: 20px; padding: 25px; flex: 1; min-width: 200px; box-shadow: 0 8px 30px rgba(0,0,0,0.08); border: 1px solid rgba(0,0,0,0.06); position: relative; overflow: hidden; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); backdrop-filter: blur(10px); margin: 10px; height: 160px;\n        }\n        .stat-card:hover { transform: translateY(-5px) scale(1.02); box-shadow: 0 12px 40px rgba(0,0,0,0.12); }\n        .stat-card::before { content: ''; position: absolute; inset: 0; border-radius: 20px; padding: 2px; background: linear-gradient(90deg, rgba(255,255,255,0.2), rgba(255,255,255,0.6)); -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0); mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0); -webkit-mask-composite: xor; mask-composite: exclude; }\n        .stat-number { font-size: 36px; font-weight: 800; margin: 10px 0; font-family: 'Inter', system-ui, sans-serif; background: linear-gradient(45deg, #333, #666); -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent; }\n        .stat-label { color: #666; font-size: 15px; font-weight: 600; text-transform: uppercase; letter-spacing: 1.2px; margin-bottom: 20px; font-family: 'Inter', system-ui, sans-serif; }\n        .stat-trend { position: absolute; bottom: 20px; right: 20px; width: 60px; height: 30px; opacity: 0.2; } .stat-trend path { stroke: currentColor; stroke-width: 2; fill: none; }\n        .stat-icon { position: absolute; bottom: 20px; right: 20px; width: 30px; height: 30px; }\n        </style>\n        \"\"\",\n                unsafe_allow_html=True,\n            )\n\n            # Display metrics in new design (Keep)\n            col1, col2, col3, col4 = st.columns(4)\n\n            with col1:\n                st.markdown(\n                    f\"\"\"\n                <div class=\"stat-card\">\n                    <div class=\"stat-number\">{total_records}</div>\n                    <div class=\"stat-label\">Total Records</div>\n                    <div class=\"stat-icon\">\n                        <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"><rect x=\"2\" y=\"13\" width=\"4\" height=\"8\" fill=\"#1976D2\"/><rect x=\"8\" y=\"9\" width=\"4\" height=\"12\" fill=\"#2196F3\"/><rect x=\"14\" y=\"5\" width=\"4\" height=\"16\" fill=\"#64B5F6\"/><rect x=\"20\" y=\"2\" width=\"4\" height=\"19\" fill=\"#90CAF9\"/></svg>\n                    </div>\n                </div>\n            \"\"\",\n                    unsafe_allow_html=True,\n                )\n\n            with col2:\n                st.markdown(\n                    f\"\"\"\n                <div class=\"stat-card\">\n                    <div class=\"stat-number\">{present_count}</div>\n                    <div class=\"stat-label\">Present Records</div>\n                    <div class=\"stat-icon\">\n                        <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"><rect x=\"2\" y=\"13\" width=\"4\" height=\"8\" fill=\"#388E3C\"/><rect x=\"8\" y=\"9\" width=\"4\" height=\"12\" fill=\"#4CAF50\"/><rect x=\"14\" y=\"5\" width=\"4\" height=\"16\" fill=\"#81C784\"/><rect x=\"20\" y=\"2\" width=\"4\" height=\"19\" fill=\"#A5D6A7\"/></svg>\n                    </div>\n                </div>\n            \"\"\",\n                    unsafe_allow_html=True,\n                )\n\n            with col3:\n                st.markdown(\n                    f\"\"\"\n                <div class=\"stat-card\">\n                    <div class=\"stat-number\">{absent_count}</div>\n                    <div class=\"stat-label\">Absent Records</div> \n                    <div class=\"stat-icon\">\n                        <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"><rect x=\"2\" y=\"13\" width=\"4\" height=\"8\" fill=\"#C62828\"/><rect x=\"8\" y=\"9\" width=\"4\" height=\"12\" fill=\"#F44336\"/><rect x=\"14\" y=\"5\" width=\"4\" height=\"16\" fill=\"#E57373\"/><rect x=\"20\" y=\"2\" width=\"4\" height=\"19\" fill=\"#FFCDD2\"/></svg>\n                    </div>\n                </div>\n            \"\"\",\n                    unsafe_allow_html=True,\n                )\n\n            with col4:\n                st.markdown(\n                    f\"\"\"\n                <div class=\"stat-card\">\n                    <div class=\"stat-number\">{auto_marked}</div>\n                    <div class=\"stat-label\">Auto Marked Records</div> \n                    <div class=\"stat-icon\">\n                        <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"><rect x=\"2\" y=\"13\" width=\"4\" height=\"8\" fill=\"#6A1B9A\"/><rect x=\"8\" y=\"9\" width=\"4\" height=\"12\" fill=\"#9C27B0\"/><rect x=\"14\" y=\"5\" width=\"4\" height=\"16\" fill=\"#BA68C8\"/><rect x=\"20\" y=\"2\" width=\"4\" height=\"19\" fill=\"#E1BEE7\"/></svg>\n                    </div>\n                </div>\n            \"\"\",\n                    unsafe_allow_html=True,\n                )\n\n            st.divider()\n            # 🔹 Two-column layout for tables (Keep)\n            col1_tab1, col2_tab1 = st.columns([1, 1])  # Use distinct variable names\n\n            # 🔹 LEFT: Detailed Records (Updated)\n            with col1_tab1:\n                if not filtered_df.empty:\n                    st.markdown(\n                        \"\"\"\n                <h3 style=\"display: flex; align-items: center; gap: 10px; color: #2C3E50;\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"/>\n                        <polyline points=\"14 2 14 8 20 8\"/>\n                        <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"/>\n                        <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"/>\n                        <polyline points=\"10 9 9 9 8 9\"/>\n                    </svg>\n                    Detailed Records\n                </h3>\n            \"\"\",\n                        unsafe_allow_html=True,\n                    )\n                    st.dataframe(\n                        filtered_df,  # Display the date-filtered data directly\n                        column_config={  # Ensure column names match attendance table in DB\n                            \"teacher_id\": st.column_config.Column(\n                                \"Teacher ID\", help=\"Unique identifier for each teacher\"\n                            ),\n                            \"date\": st.column_config.DateColumn(\"📅Date\"),\n                            \"status\": st.column_config.Column(\"📌Status\"),\n                            \"timestamp\": st.column_config.TimeColumn(\"⏰Time\"),\n                            \"is_auto\": st.column_config.CheckboxColumn(\"🤖Auto Marked\"),\n                            \"id\": None,  # Hide internal ID\n                        },\n                        hide_index=True,\n                        use_container_width=True,  # Use container width\n                    )\n                else:\n                    st.info(\"⚠️No records found for the selected date range\")\n\n            # 🔹 RIGHT: Recent Activity (Updated)\n            with col2_tab1:\n                try:\n                    st.markdown(\n                        \"\"\"\n                <h3 style=\"display: flex; align-items: center; gap: 10px; color: #2C3E50;\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path d=\"M12 2v4M12 18v4M4.93 4.93l2.83 2.83M16.24 16.24l2.83 2.83M2 12h4M18 12h4M4.93 19.07l2.83-2.83M16.24 7.76l2.83-2.83\"/>\n                    </svg>\n                    Recent Activity\n                </h3>\n            \"\"\",\n                        unsafe_allow_html=True,\n                    )\n                    # Fetch recent attendance records from DB (e.g., last 20)\n                    # data_manager_instance.get_recent_attendance needs (connection, school_id, limit)\n                    recent_records = data_manager_instance.get_recent_attendance(\n                        school_id, limit=20\n                    )\n\n                    if not recent_records.empty:\n                        # Convert timestamp to display format (Pandas logic remains)\n                        # Ensure 'timestamp' column exists before converting\n                        if \"timestamp\" in recent_records.columns:\n                            recent_records[\"display_time\"] = pd.to_datetime(\n                                recent_records[\"timestamp\"]\n                            ).dt.strftime(\"%I:%M %p\")\n\n                            # Display dataframe (Select relevant columns)\n                            display_cols = [\n                                \"date\",\n                                \"teacher_id\",\n                                \"status\",\n                                \"display_time\",\n                                \"is_auto\",\n                            ]\n                            existing_display_cols = [\n                                col\n                                for col in display_cols\n                                if col in recent_records.columns\n                            ]\n\n                            st.dataframe(\n                                recent_records[existing_display_cols],\n                                column_config={  # Ensure column names match the DataFrame columns\n                                    \"date\": \"📅Date\",\n                                    \"teacher_id\": \"👨‍🏫Teacher ID\",\n                                    \"status\": \"📌Status\",\n                                    \"display_time\": \"⏰Time\",\n                                    \"is_auto\": \"🤖Auto Marked\",\n                                },\n                                hide_index=True,\n                                use_container_width=True,  # Use container width\n                            )\n                        else:\n                            st(\"Timestamp column missing in recent records data.\")\n                    else:\n                        st.info(\"No recent activity\")\n\n                except Exception as e:\n                    st.error(f\"Error loading recent attendance data: {str(e)}\")\n                    st.error(\n                        f\"Error loading recent attendance data for tab1 right column: {e}\"\n                    )\n\n            # 🔹 Attendance trend chart (Updated)\n            st.markdown(\n                \"\"\"\n            <h3 style=\"display: flex; align-items: center; gap: 10px; color: #2C3E50;\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M3 3v18h18\"/>\n                    <path d=\"M18.7 8l-5.1 5.2-2.8-2.7L7 14.3\"/>\n                </svg>\n                Attendance Trend\n            </h3>\n        \"\"\",\n                unsafe_allow_html=True,\n            )\n            # Use the date-filtered attendance data for the trend chart\n            if (\n                not filtered_df.empty\n                and \"date\" in filtered_df.columns\n                and \"status\" in filtered_df.columns\n            ):\n                try:\n                    # Group by date and status and unstack (Pandas logic remains)\n                    daily_attendance = (\n                        filtered_df.groupby([\"date\", \"status\"])\n                        .size()\n                        .unstack(fill_value=0)\n                    )\n\n                    # Create Plotly line chart (Plotly logic remains)\n                    fig = px.line(daily_attendance, title=\"Daily Attendance Trend\")\n                    fig.update_layout(\n                        margin=dict(l=0, r=0, t=40, b=0), height=350\n                    )  # Keep layout\n                    st.plotly_chart(fig, use_container_width=True)\n\n                except Exception as e:\n                    st.error(f\"Error creating attendance trend chart: {str(e)}\")\n                    st.error(f\"Error creating attendance trend chart: {e}\")\n            else:\n                st.info(\"No data available for attendance trend chart.\")\n\n    with tab2:\n        # --- Teacher Analysis (Updated) ---\n        st.subheader(\"Teacher Analysis\")\n\n        if teachers_df.empty:\n            st.info(\"No teacher data available for analysis.\")\n        elif filtered_df.empty:\n            st.info(\"No attendance data available for the selected date range.\")\n        else:\n            # --- MERGE LOGIC START ---\n            if \"teacher_id\" not in filtered_df.columns:\n                st.error(\n                    \"Internal Error: 'teacher_id' column missing in attendance data.\"\n                )\n            elif \"teacher_id\" not in teachers_df.columns:\n                st.error(\n                    \"Internal Error: 'teacher_id' column missing in teachers list.\"\n                )\n            else:\n                filtered_df_with_names = pd.merge(\n                    filtered_df,\n                    teachers_df[[\"teacher_id\", \"name\"]],\n                    on=\"teacher_id\",\n                    how=\"left\",\n                )\n\n                if \"name\" in filtered_df_with_names.columns:\n                    # 'Unknown' naam ke saath teacher_id bhi jod do taaki pehchan ho sake\n                    filtered_df_with_names[\"name\"] = filtered_df_with_names.apply(\n                        lambda row: (\n                            f\"Unknown ({row['teacher_id']})\"\n                            if pd.isna(row[\"name\"])\n                            else row[\"name\"]\n                        ),\n                        axis=1,\n                    )\n                else:\n                    filtered_df_with_names[\"name\"] = filtered_df_with_names[\n                        \"teacher_id\"\n                    ]\n                # --- MERGE LOGIC END ---\n\n                if \"status\" in filtered_df_with_names.columns:\n                    teacher_summary = (\n                        filtered_df_with_names.groupby([\"teacher_id\", \"name\", \"status\"])\n                        .size()\n                        .reset_index(name=\"count\")\n                    )\n\n                    teacher_pivot = teacher_summary.pivot_table(\n                        index=[\"teacher_id\", \"name\"],\n                        columns=\"status\",\n                        values=\"count\",\n                    ).reset_index()\n\n                    if \"present\" not in teacher_pivot.columns:\n                        teacher_pivot[\"present\"] = 0\n                    if \"absent\" not in teacher_pivot.columns:\n                        teacher_pivot[\"absent\"] = 0\n                    teacher_pivot = teacher_pivot.fillna(0)\n\n                    teacher_pivot[\"total\"] = (\n                        teacher_pivot[\"present\"] + teacher_pivot[\"absent\"]\n                    )\n\n                    teacher_pivot[\"attendance_rate\"] = 0.0\n                    non_zero_total_mask = teacher_pivot[\"total\"] > 0\n                    teacher_pivot.loc[non_zero_total_mask, \"attendance_rate\"] = (\n                        (\n                            teacher_pivot.loc[non_zero_total_mask, \"present\"]\n                            / teacher_pivot.loc[non_zero_total_mask, \"total\"]\n                        )\n                        * 100\n                    ).round(1)\n\n                    teacher_pivot = teacher_pivot.sort_values(\n                        \"attendance_rate\", ascending=False\n                    )\n\n                    # --- CHART KO BEHTAR BANANE KA CODE START ---\n                    st.markdown(\"#### Attendance Rate by Teacher\")\n                    fig3 = px.bar(\n                        teacher_pivot,\n                        x=\"name\",\n                        y=\"attendance_rate\",\n                        labels={\n                            \"name\": \"Teacher Name\",\n                            \"attendance_rate\": \"Attendance Rate (%)\",\n                        },\n                        color=\"attendance_rate\",\n                        color_continuous_scale=[\"#d32f2f\", \"#ffeb3b\", \"#2e7d32\"],\n                        range_color=[0, 100],\n                        text_auto=\".1f\",\n                        height=500,\n                    )\n                    fig3.update_traces(textangle=0, textposition=\"outside\")\n                    fig3.update_layout(\n                        xaxis_title=\"Teacher\",\n                        yaxis_title=\"Attendance Rate (%)\",\n                        xaxis_tickangle=-45,\n                        margin=dict(l=0, r=0, t=40, b=150),\n                    )\n                    st.plotly_chart(fig3, use_container_width=True)\n                    # --- CHART KO BEHTAR BANANE KA CODE END ---\n\n                    # --- TABLE KO BEHTAR BANANE KA CODE START ---\n                    st.markdown(\"#### Teacher Attendance Details\")\n                    display_df = teacher_pivot.rename(\n                        columns={\n                            \"name\": \"Teacher\",\n                            \"present\": \"Present Days\",\n                            \"absent\": \"Absent Days\",\n                            \"total\": \"Total Records\",\n                            \"attendance_rate\": \"Attendance Rate (%)\",\n                        }\n                    )\n                    st.dataframe(\n                        display_df[\n                            [\n                                \"Teacher\",\n                                \"Present Days\",\n                                \"Absent Days\",\n                                \"Total Records\",\n                                \"Attendance Rate (%)\",\n                            ]\n                        ],\n                        column_config={\n                            \"Attendance Rate (%)\": st.column_config.ProgressColumn(\n                                \"Attendance Rate\",\n                                help=\"Teacher's attendance percentage in the selected date range.\",\n                                format=\"%.1f%%\",\n                                min_value=0,\n                                max_value=100,\n                            ),\n                        },\n                        use_container_width=True,\n                        hide_index=True,\n                    )\n                    # --- TABLE KO BEHTAR BANANE KA CODE END ---\n\n                    # --- NAYA FEATURE: TOP/BOTTOM PERFORMERS ---\n                    st.divider()\n                    col1, col2 = st.columns(2)\n                    with col1:\n                        st.markdown(\"##### 🏆 Top 5 Punctual Teachers\")\n                        top_5 = teacher_pivot.sort_values(\n                            \"attendance_rate\", ascending=False\n                        ).head(5)\n                        st.dataframe(\n                            top_5[[\"name\", \"attendance_rate\"]].rename(\n                                columns={\n                                    \"name\": \"Teacher\",\n                                    \"attendance_rate\": \"Attendance (%)\",\n                                }\n                            ),\n                            hide_index=True,\n                            use_container_width=True,\n                        )\n                    with col2:\n                        st.markdown(\"##### ⚠️ Top 5 Most Absent Teachers\")\n                        bottom_5 = teacher_pivot.sort_values(\n                            \"absent\", ascending=False\n                        ).head(5)\n                        st.dataframe(\n                            bottom_5[[\"name\", \"absent\"]].rename(\n                                columns={\"name\": \"Teacher\", \"absent\": \"Absent Days\"}\n                            ),\n                            hide_index=True,\n                            use_container_width=True,\n                        )\n                    # --- NAYA FEATURE END ---\n\n                else:\n                    st.info(\"Required 'status' column missing in data for analysis.\")\n    with tab3:\n        # --- Raw Attendance Data (Updated) ---\n        st.subheader(\"Raw Attendance Data\")\n\n        # Display the raw data with filters (Filters based on filtered_df)\n        filter_col1_tab3, filter_col2_tab3 = st.columns(\n            2\n        )  # Use distinct variable names\n\n        with filter_col1_tab3:\n            status_filter = st.selectbox(\n                \"Filter by Status\",\n                [\"All\", \"present\", \"absent\"],\n                key=\"raw_status_filter\",  # Add key\n            )\n\n        # Prepare teacher filter options using fetched teacher names and IDs\n        teacher_filter_options = [\"All\"] + [\n            f\"{name} ({tid})\"\n            for tid, name in teacher_names.items()\n            if name is not None  # Handle cases where name might be None\n        ]\n        # Add IDs without names if name is None but ID exists\n        for tid in teacher_ids:\n            if tid not in teacher_names and tid not in teacher_filter_options:\n                teacher_filter_options.append(f\"Unknown ({tid})\")\n        # Sort options alphabetically, keeping \"All\" first\n        teacher_filter_options[1:] = sorted(teacher_filter_options[1:])\n\n        with filter_col2_tab3:\n            teacher_filter = st.selectbox(\n                \"Filter by Teacher\",\n                teacher_filter_options,\n                key=\"raw_teacher_filter\",  # Add key\n            )\n\n        # Apply additional filters to the already date-filtered data (filtered_df)\n        display_df_raw = filtered_df.copy()  # Start with the date-filtered data\n\n        if status_filter != \"All\":\n            if \"status\" in display_df_raw.columns:\n                display_df_raw = display_df_raw[\n                    display_df_raw[\"status\"] == status_filter\n                ]\n            else:\n                print(\"Status column missing for raw data status filter.\")\n\n        if teacher_filter != \"All\":\n            # Extract teacher ID from the selected filter string \"Name (ID)\" or \"Unknown (ID)\"\n            try:\n                teacher_id_to_filter = (\n                    teacher_filter.split(\"(\")[-1].replace(\")\", \"\").strip()\n                )\n                if \"teacher_id\" in display_df_raw.columns:\n                    display_df_raw = display_df_raw[\n                        display_df_raw[\"teacher_id\"] == teacher_id_to_filter\n                    ]\n                else:\n                    print(\"Teacher_id column missing for raw data teacher filter.\")\n            except Exception:\n                print(f\"Could not parse teacher ID from filter: {teacher_filter}\")\n                display_df_raw = (\n                    pd.DataFrame()\n                )  # Filter results in empty if parsing fails\n\n        # Sort by date and timestamp (Pandas logic)\n        if not display_df_raw.empty and \"timestamp\" in display_df_raw.columns:\n            display_df_raw = display_df_raw.sort_values(\"timestamp\", ascending=False)\n        else:\n            print(\"Timestamp column missing or data empty for raw data sort.\")\n\n        # Replace teacher_id with teacher name where possible for display\n        if not display_df_raw.empty and \"teacher_id\" in display_df_raw.columns:\n            # Merge with teacher names DataFrame\n            if (\n                not teachers_df.empty\n                and \"teacher_id\" in teachers_df.columns\n                and \"name\" in teachers_df.columns\n            ):\n                # Add 'name' column by merging\n                display_df_raw = pd.merge(\n                    display_df_raw,\n                    teachers_df[[\"teacher_id\", \"name\"]],\n                    on=\"teacher_id\",\n                    how=\"left\",\n                )\n                # Rename the new 'name' column for display\n                display_df_raw.rename(columns={\"name\": \"Teacher\"}, inplace=True)\n                # Reorder columns to put 'Teacher' next to 'Teacher ID' or instead of it\n                # Let's put 'Teacher' instead of 'Teacher ID' in the final display\n                display_df_raw[\"Teacher ID\"] = display_df_raw[\n                    \"teacher_id\"\n                ]  # Keep original ID in case needed\n\n            else:\n                # If teacher names DataFrame is empty or missing columns, just use teacher_id\n                display_df_raw[\"Teacher\"] = display_df_raw[\n                    \"teacher_id\"\n                ]  # Use ID as name fallback\n\n        # Select columns to display and rename (Keep)\n        # Ensure required columns exist before selecting\n        final_display_cols = []\n        col_rename_map = {}\n\n        # Define desired final columns and their source/rename\n        desired_final_cols = [\n            \"Date\",\n            \"Teacher\",\n            \"Teacher ID\",\n            \"Status\",\n            \"Timestamp\",\n            \"Auto-marked\",\n        ]\n        source_cols_map = {\n            \"Date\": \"date\",\n            \"Teacher\": \"Teacher\",  # This column is created above\n            \"Teacher ID\": \"teacher_id\",  # Or \"Teacher ID\" if renamed earlier\n            \"Status\": \"status\",\n            \"Timestamp\": \"timestamp\",\n            \"Auto-marked\": \"is_auto\",\n        }\n\n        for final_name, source_name in source_cols_map.items():\n            if source_name in display_df_raw.columns:\n                final_display_cols.append(source_name)\n                col_rename_map[source_name] = final_name\n            elif (\n                final_name in display_df_raw.columns\n            ):  # Check if a column was already renamed like 'Teacher'\n                final_display_cols.append(final_name)  # Use the already renamed column\n                # No rename needed in this case as it's already the final name\n            else:\n                print(\n                    f\"Source column '{source_name}' not found for raw data display as '{final_name}'.\"\n                )\n\n        # Handle renaming and selection based on available columns\n        if final_display_cols:\n            renamed_df = display_df_raw[final_display_cols].rename(\n                columns=col_rename_map\n            )\n            # Ensure boolean column ('Auto-marked') is displayed nicely if it exists\n            if \"Auto-marked\" in renamed_df.columns:\n                renamed_df[\"Auto-marked\"] = renamed_df[\"Auto-marked\"].map(\n                    {True: \"✅\", False: \"❌\"}\n                )  # Display check/cross marks\n        else:\n            renamed_df = pd.DataFrame()  # Empty if no columns to display\n\n        if not renamed_df.empty:\n            st.dataframe(\n                renamed_df, use_container_width=True, hide_index=True\n            )  # Hide index\n        else:\n            st.info(\"No raw attendance data available based on selected filters.\")\n\n        # Export option (Updated for DB)\n        st.divider()  # Add a divider before export button\n        if st.button(\n            \"Export Filtered Data\", use_container_width=True, key=\"raw_export_button\"\n        ):  # Add key\n            try:\n                # Export the *filtered* data (renamed_df)\n                if not renamed_df.empty:\n                    csv_string = renamed_df.to_csv(index=False).encode(\"utf-8\")\n                    filename = f\"raw_attendance_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n\n                    st.download_button(\n                        label=\"Download CSV File\",  # Changed label slightly\n                        data=csv_string,\n                        file_name=filename,\n                        mime=\"text/csv\",\n                        key=f\"raw_download_button_{datetime.now().strftime('%Y%m%d%H%M%S')}\",  # Ensure unique key\n                    )\n                else:\n                    st.info(\"No data to export.\")\n\n            except Exception as e:\n                st.error(f\"Export failed: {str(e)}\")\n                st.error(f\"Raw data export failed: {e}\")\n\n\n# --- END OF FILE reports.py ---\n# test line to trigger git","size_bytes":34303},"backend/existing_modules/components/schedule_manager.py":{"content":"# --- START OF FILE schedule_manager.py ---\r\n\r\nimport streamlit as st\r\nimport pandas as pd\r\nfrom datetime import datetime, date\r\nimport mysql.connector\r\n\r\n\r\ndef render_schedule_manager_page(school_id, data_manager_module):\r\n    \"\"\"\r\n    Render the schedule management page, fetching data from the database.\r\n    \"\"\"\r\n    data_manager_instance = st.session_state.data_manager\r\n\r\n    # Check if DataManager instance is available\r\n    if data_manager_instance is None:\r\n        st.error(\"DataManager instance not available. Please report this issue.\")\r\n        return\r\n\r\n    st.markdown(\r\n        \"\"\"<div style=\"margin-right: 5px;color:#1e3a8a;\"class=\"card-title \">\r\n            <h1><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"35\" height=\"35\" fill=\"currentColor\" viewBox=\"0 0 16 16\" style=\"margin-right: 5px;color:#1e3a8a;\">\r\n                <path d=\"M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-5 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z\"/>\r\n                <path d=\"M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z\"/>\r\n            </svg>\r\n            Schedule Manager</h1>\r\n        </div>\"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    st.markdown(\"### Manage Daily Schedules and Weekly Assignments\")\r\n\r\n    # Create main tabs for different sections - removed Teacher Management\r\n    main_tabs = st.tabs([\"📅 View Daily Schedules\", \"📝 Daily Schedule Management\"])\r\n    \r\n    # Tab 1: Daily Schedule Viewer (existing functionality)\r\n    with main_tabs[0]:\r\n        st.subheader(\"View Teacher Schedules for Each Day\")\r\n        \r\n        # Day selection\r\n        day_names_dict = {\r\n            0: \"Monday\",\r\n            1: \"Tuesday\", \r\n            2: \"Wednesday\",\r\n            3: \"Thursday\",\r\n            4: \"Friday\",\r\n            5: \"Saturday\",\r\n        }\r\n\r\n        # Create tabs for each day\r\n        tabs = st.tabs([day_names_dict[day] for day in sorted(day_names_dict.keys())])\r\n\r\n        # Handle each tab (day)\r\n        for day_idx in sorted(day_names_dict.keys()):\r\n            day_name = day_names_dict[day_idx]\r\n            with tabs[day_idx]:\r\n                display_day_schedule(school_id, data_manager_instance, day_name)\r\n    \r\n    # Tab 2: Daily Schedule Management  \r\n    with main_tabs[1]:\r\n        render_daily_schedule_management(school_id, data_manager_instance)\r\n\r\n\r\ndef display_day_schedule(school_id, data_manager_instance, day_name):\r\n    \"\"\"\r\n    Display schedules for a specific day.\r\n    \"\"\"\r\n    # Load schedule data for the day\r\n    schedule_df = data_manager_instance.load_teacher_schedules(\r\n        school_id=school_id, specific_day=day_name\r\n    )\r\n\r\n    # Check if the fetched data is from the daily schedule or the summary\r\n    is_daily_schedule = not schedule_df.empty and all(\r\n        col in schedule_df.columns for col in [f\"period{i}\" for i in range(5, 8)]\r\n    )\r\n\r\n    if not schedule_df.empty:\r\n        if is_daily_schedule:\r\n            st.info(f\"Showing Daily Schedule for {day_name}.\")\r\n            # Display the current schedule (Daily Schedule format)\r\n            st.dataframe(\r\n                schedule_df,\r\n                column_config={\r\n                    \"teacher_id\": st.column_config.TextColumn(\"Teacher ID\"),\r\n                    \"name\": st.column_config.TextColumn(\"Name\"),\r\n                    \"subject\": st.column_config.TextColumn(\"Subject\"),\r\n                    \"category\": st.column_config.TextColumn(\"Category\"),\r\n                    \"period1\": st.column_config.TextColumn(\"Period 1\"),\r\n                    \"period2\": st.column_config.TextColumn(\"Period 2\"),\r\n                    \"period3\": st.column_config.TextColumn(\"Period 3\"),\r\n                    \"period4\": st.column_config.TextColumn(\"Period 4\"),\r\n                    \"period5\": st.column_config.TextColumn(\"Period 5\"),\r\n                    \"period6\": st.column_config.TextColumn(\"Period 6\"),\r\n                    \"period7\": st.column_config.TextColumn(\"Period 7\"),\r\n                },\r\n                hide_index=True,\r\n                use_container_width=True,\r\n            )\r\n        else:\r\n            st.warning(\r\n                f\"No specific schedule found for {day_name}. Showing fallback schedule.\"\r\n            )\r\n            # Display the fallback schedule (Legacy/Summary format)\r\n            st.dataframe(\r\n                schedule_df,\r\n                column_config={\r\n                    \"teacher_id\": st.column_config.TextColumn(\"Teacher ID\"),\r\n                    \"name\": st.column_config.TextColumn(\"Name\"),\r\n                    \"subject\": st.column_config.TextColumn(\"Subject\"),\r\n                    \"category\": st.column_config.TextColumn(\"Category\"),\r\n                    \"period1\": st.column_config.TextColumn(\"Period 1\"),\r\n                    \"period2\": st.column_config.TextColumn(\"Period 2\"),\r\n                    \"period3\": st.column_config.TextColumn(\"Period 3\"),\r\n                    \"period4\": st.column_config.TextColumn(\"Period 4\"),\r\n                },\r\n                hide_index=True,\r\n                use_container_width=True,\r\n            )\r\n    else:\r\n        st.info(f\"No schedule entries available for {day_name}.\")\r\n\r\n\r\ndef render_daily_schedule_management(school_id, data_manager_instance):\r\n    \"\"\"Render daily schedule management interface\"\"\"\r\n    st.subheader(\"Daily Schedule Management\")\r\n    \r\n    # Create sub-tabs for schedule operations\r\n    schedule_tabs = st.tabs([\"📋 View Schedules\", \"➕ Add Schedule\", \"✏️ Edit Schedule\", \"🗑️ Delete Schedule\"])\r\n    \r\n    # Tab 1: View Daily Schedules\r\n    with schedule_tabs[0]:\r\n        st.markdown(\"#### All Daily Schedules\")\r\n        \r\n        # Filter options\r\n        col1, col2 = st.columns(2)\r\n        with col1:\r\n            day_filter = st.selectbox(\"Filter by Day\", \r\n                                    [\"All\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"])\r\n        with col2:\r\n            teacher_filter = st.text_input(\"Filter by Teacher ID (optional)\")\r\n        \r\n        schedules_df = get_daily_schedules(school_id, data_manager_instance, day_filter, teacher_filter)\r\n        \r\n        if not schedules_df.empty:\r\n            st.info(f\"Found {len(schedules_df)} schedule entries\")\r\n            st.dataframe(\r\n                schedules_df,\r\n                column_config={\r\n                    \"schedule_id\": st.column_config.NumberColumn(\"ID\"),\r\n                    \"teacher_id\": st.column_config.TextColumn(\"Teacher ID\"),\r\n                    \"day_of_week\": st.column_config.TextColumn(\"Day\"),\r\n                    \"period_number\": st.column_config.NumberColumn(\"Period\"),\r\n                    \"subject\": st.column_config.TextColumn(\"Subject\"),\r\n                    \"class_name\": st.column_config.TextColumn(\"Class\"),\r\n                },\r\n                hide_index=True,\r\n                use_container_width=True,\r\n            )\r\n        else:\r\n            st.info(\"No daily schedules found.\")\r\n    \r\n    # Tab 2: Add Full Day Schedule (Bulk)\r\n    with schedule_tabs[1]:\r\n        st.markdown(\"#### Add Full Day Schedule for Teacher\")\r\n        st.info(\"💡 Add all 7 periods for a teacher in one go\")\r\n        \r\n        # Get list of teachers for dropdown\r\n        teachers_df = get_all_teachers(school_id, data_manager_instance)\r\n        teacher_options = {row['teacher_id']: f\"{row['teacher_id']} - {row['name']} ({row['category']})\" \r\n                         for _, row in teachers_df.iterrows()} if not teachers_df.empty else {}\r\n        \r\n        if teacher_options:\r\n            with st.form(\"add_full_schedule_form\"):\r\n                col1, col2 = st.columns(2)\r\n                \r\n                with col1:\r\n                    selected_teacher = st.selectbox(\"Select Teacher *\", \r\n                                                  options=list(teacher_options.keys()),\r\n                                                  format_func=lambda x: teacher_options[x])\r\n                \r\n                with col2:\r\n                    day_of_week = st.selectbox(\"Day of Week *\", \r\n                                             [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"])\r\n                \r\n                # Load existing schedule for this teacher and day\r\n                existing_schedule = get_teacher_day_schedule(school_id, selected_teacher, day_of_week, data_manager_instance)\r\n                \r\n                st.markdown(\"#### Schedule for All 7 Periods\")\r\n                st.markdown(\"*Enter subject and class for each period. Leave blank for free periods.*\")\r\n                \r\n                if existing_schedule:\r\n                    st.info(f\"⚠️ Teacher {selected_teacher} already has some periods scheduled for {day_of_week}\")\r\n                    with st.expander(\"View Existing Schedule\"):\r\n                        for period_data in existing_schedule:\r\n                            st.write(f\"Period {period_data['period_number']}: {period_data['subject']} - {period_data['class_name']}\")\r\n                \r\n                # Create 7 period inputs\r\n                periods_data = []\r\n                cols = st.columns(2)\r\n                \r\n                for period in range(1, 8):\r\n                    with cols[(period-1) % 2]:\r\n                        st.markdown(f\"**Period {period}**\")\r\n                        \r\n                        # Pre-fill if existing data\r\n                        existing_entry = next((e for e in existing_schedule if e['period_number'] == period), None) if existing_schedule else None\r\n                        default_subject = existing_entry['subject'] if existing_entry else \"\"\r\n                        default_class = existing_entry['class_name'] if existing_entry else \"\"\r\n                        \r\n                        subject = st.text_input(f\"Subject\", key=f\"subject_{period}\", \r\n                                              value=default_subject, \r\n                                              placeholder=\"e.g., Mathematics\")\r\n                        class_name = st.text_input(f\"Class\", key=f\"class_{period}\", \r\n                                                 value=default_class,\r\n                                                 placeholder=\"e.g., IX-A\")\r\n                        periods_data.append({\r\n                            'period': period,\r\n                            'subject': subject.strip(),\r\n                            'class_name': class_name.strip()\r\n                        })\r\n                \r\n                submitted = st.form_submit_button(\"📅 Add/Update Full Day Schedule\", type=\"primary\")\r\n                \r\n                if submitted:\r\n                    # First delete existing entries for this teacher and day\r\n                    delete_teacher_day_schedule(school_id, selected_teacher, day_of_week, data_manager_instance)\r\n                    \r\n                    # Filter out empty periods\r\n                    valid_periods = [p for p in periods_data if p['subject'] and p['class_name']]\r\n                    \r\n                    if valid_periods:\r\n                        success_count = 0\r\n                        errors = []\r\n                        \r\n                        # Add each period\r\n                        for period_data in valid_periods:\r\n                            success = add_daily_schedule(school_id, selected_teacher, day_of_week, \r\n                                                       period_data['period'], period_data['subject'], \r\n                                                       period_data['class_name'], data_manager_instance)\r\n                            if success:\r\n                                success_count += 1\r\n                            else:\r\n                                errors.append(f\"Period {period_data['period']}\")\r\n                        \r\n                        if success_count > 0:\r\n                            st.success(f\"✅ Added/Updated {success_count} schedule entries successfully!\")\r\n                            if errors:\r\n                                st.warning(f\"⚠️ Failed to add periods: {', '.join(errors)}\")\r\n                            st.rerun()\r\n                        else:\r\n                            st.error(\"❌ Failed to add any schedule entries. Please check for errors.\")\r\n                    else:\r\n                        st.error(\"❌ Please fill at least one period with both subject and class.\")\r\n        else:\r\n            st.warning(\"⚠️ No teachers found. Please add teachers first from Teacher Management page.\")\r\n    \r\n    # Tab 3: Edit Daily Schedule\r\n    with schedule_tabs[2]:\r\n        st.markdown(\"#### Edit Daily Schedule Entry\")\r\n        \r\n        schedules_df = get_daily_schedules(school_id, data_manager_instance)\r\n        \r\n        if not schedules_df.empty:\r\n            # Create unique identifier for each schedule entry\r\n            schedule_options = {}\r\n            for _, row in schedules_df.iterrows():\r\n                key = f\"{row['schedule_id']}\"\r\n                value = f\"ID:{row['schedule_id']} - {row['teacher_id']} - {row['day_of_week']} - Period {row['period_number']} - {row['subject']}\"\r\n                schedule_options[key] = value\r\n            \r\n            selected_schedule = st.selectbox(\"Select Schedule to Edit\", \r\n                                           options=list(schedule_options.keys()),\r\n                                           format_func=lambda x: schedule_options[x])\r\n            \r\n            if selected_schedule:\r\n                schedule_data = schedules_df[schedules_df['schedule_id'] == int(selected_schedule)].iloc[0]\r\n                \r\n                # Get teachers for dropdown\r\n                teachers_df = get_all_teachers(school_id, data_manager_instance)\r\n                teacher_options = {row['teacher_id']: f\"{row['teacher_id']} - {row['name']}\" \r\n                                 for _, row in teachers_df.iterrows()}\r\n                \r\n                with st.form(\"edit_schedule_form\"):\r\n                    st.info(f\"Editing Schedule ID: {selected_schedule}\")\r\n                    \r\n                    current_teacher_idx = list(teacher_options.keys()).index(schedule_data['teacher_id']) if schedule_data['teacher_id'] in teacher_options else 0\r\n                    new_teacher = st.selectbox(\"Teacher\", \r\n                                             options=list(teacher_options.keys()),\r\n                                             format_func=lambda x: teacher_options[x],\r\n                                             index=current_teacher_idx)\r\n                    \r\n                    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n                    current_day_idx = days.index(schedule_data['day_of_week']) if schedule_data['day_of_week'] in days else 0\r\n                    new_day = st.selectbox(\"Day of Week\", days, index=current_day_idx)\r\n                    \r\n                    new_period = st.selectbox(\"Period Number\", [1, 2, 3, 4, 5, 6, 7], \r\n                                            index=schedule_data['period_number'] - 1)\r\n                    new_subject = st.text_input(\"Subject\", value=schedule_data['subject'])\r\n                    new_class = st.text_input(\"Class Name\", value=schedule_data['class_name'])\r\n                    \r\n                    submitted = st.form_submit_button(\"Update Schedule Entry\")\r\n                    \r\n                    if submitted:\r\n                        success = update_daily_schedule(selected_schedule, new_teacher, new_day, \r\n                                                      new_period, new_subject, new_class, data_manager_instance)\r\n                        if success:\r\n                            st.success(\"Schedule entry updated successfully!\")\r\n                            st.rerun()\r\n                        else:\r\n                            st.error(\"Failed to update schedule entry.\")\r\n        else:\r\n            st.info(\"No schedules available to edit.\")\r\n    \r\n    # Tab 4: Delete Daily Schedule\r\n    with schedule_tabs[3]:\r\n        st.markdown(\"#### Delete Daily Schedule Entry\")\r\n        \r\n        schedules_df = get_daily_schedules(school_id, data_manager_instance)\r\n        \r\n        if not schedules_df.empty:\r\n            # Create unique identifier for each schedule entry\r\n            schedule_options = {}\r\n            for _, row in schedules_df.iterrows():\r\n                key = f\"{row['schedule_id']}\"\r\n                value = f\"ID:{row['schedule_id']} - {row['teacher_id']} - {row['day_of_week']} - Period {row['period_number']} - {row['subject']}\"\r\n                schedule_options[key] = value\r\n            \r\n            selected_schedule = st.selectbox(\"Select Schedule to Delete\", \r\n                                           options=list(schedule_options.keys()),\r\n                                           format_func=lambda x: schedule_options[x])\r\n            \r\n            if selected_schedule:\r\n                schedule_data = schedules_df[schedules_df['schedule_id'] == int(selected_schedule)].iloc[0]\r\n                \r\n                st.warning(f\"⚠️ You are about to delete schedule entry:\")\r\n                st.info(f\"Teacher: {schedule_data['teacher_id']}, Day: {schedule_data['day_of_week']}, Period: {schedule_data['period_number']}, Subject: {schedule_data['subject']}\")\r\n                st.error(\"This action cannot be undone!\")\r\n                \r\n                if st.button(\"🗑️ Delete Schedule Entry\", type=\"secondary\"):\r\n                    success = delete_daily_schedule(selected_schedule, data_manager_instance)\r\n                    if success:\r\n                        st.success(\"Schedule entry deleted successfully!\")\r\n                        st.rerun()\r\n                    else:\r\n                        st.error(\"Failed to delete schedule entry.\")\r\n        else:\r\n            st.info(\"No schedules available to delete.\")\r\n\r\n\r\n# Helper functions for database operations\r\n\r\ndef get_all_teachers(school_id, data_manager_instance):\r\n    \"\"\"Get all teachers from the users table\"\"\"\r\n    from data_manager import create_db_connection, read_query\r\n    \r\n    connection = create_db_connection()\r\n    if connection is None:\r\n        return pd.DataFrame()\r\n    \r\n    try:\r\n        query = \"SELECT teacher_id, name, phone, category, biometric_code FROM users WHERE school_id = %s ORDER BY name\"\r\n        result = read_query(connection, query, (school_id,))\r\n        return pd.DataFrame(result)\r\n    finally:\r\n        if connection and connection.is_connected():\r\n            connection.close()\r\n\r\n\r\ndef get_daily_schedules(school_id, data_manager_instance, day_filter=\"All\", teacher_filter=\"\"):\r\n    \"\"\"Get daily schedules from the daily_schedule table\"\"\"\r\n    from data_manager import create_db_connection, read_query\r\n    \r\n    connection = create_db_connection()\r\n    if connection is None:\r\n        return pd.DataFrame()\r\n    \r\n    try:\r\n        query = \"SELECT * FROM daily_schedule WHERE school_id = %s\"\r\n        params = [school_id]\r\n        \r\n        if day_filter != \"All\":\r\n            query += \" AND day_of_week = %s\"\r\n            params.append(day_filter)\r\n        \r\n        if teacher_filter:\r\n            query += \" AND teacher_id = %s\"\r\n            params.append(teacher_filter)\r\n        \r\n        query += \" ORDER BY day_of_week, teacher_id, period_number\"\r\n        \r\n        result = read_query(connection, query, params)\r\n        return pd.DataFrame(result)\r\n    finally:\r\n        if connection and connection.is_connected():\r\n            connection.close()\r\n\r\n\r\ndef get_teacher_day_schedule(school_id, teacher_id, day_of_week, data_manager_instance):\r\n    \"\"\"Get existing schedule for a teacher on a specific day\"\"\"\r\n    from data_manager import create_db_connection, read_query\r\n    \r\n    connection = create_db_connection()\r\n    if connection is None:\r\n        return []\r\n    \r\n    try:\r\n        query = \"SELECT * FROM daily_schedule WHERE school_id = %s AND teacher_id = %s AND day_of_week = %s ORDER BY period_number\"\r\n        result = read_query(connection, query, (school_id, teacher_id, day_of_week))\r\n        return result\r\n    finally:\r\n        if connection and connection.is_connected():\r\n            connection.close()\r\n\r\n\r\ndef delete_teacher_day_schedule(school_id, teacher_id, day_of_week, data_manager_instance):\r\n    \"\"\"Delete all schedule entries for a teacher on a specific day\"\"\"\r\n    from data_manager import create_db_connection, execute_query\r\n    \r\n    connection = create_db_connection()\r\n    if connection is None:\r\n        return False\r\n    \r\n    try:\r\n        query = \"DELETE FROM daily_schedule WHERE school_id = %s AND teacher_id = %s AND day_of_week = %s\"\r\n        return execute_query(connection, query, (school_id, teacher_id, day_of_week))\r\n    finally:\r\n        if connection and connection.is_connected():\r\n            connection.close()\r\n\r\n\r\ndef add_daily_schedule(school_id, teacher_id, day_of_week, period_number, subject, class_name, data_manager_instance):\r\n    \"\"\"Add a new daily schedule entry\"\"\"\r\n    from data_manager import create_db_connection, execute_query\r\n    \r\n    connection = create_db_connection()\r\n    if connection is None:\r\n        return False\r\n    \r\n    try:\r\n        query = \"\"\"INSERT INTO daily_schedule (school_id, teacher_id, day_of_week, period_number, subject, class_name) \r\n                   VALUES (%s, %s, %s, %s, %s, %s)\"\"\"\r\n        return execute_query(connection, query, (school_id, teacher_id, day_of_week, period_number, subject, class_name))\r\n    finally:\r\n        if connection and connection.is_connected():\r\n            connection.close()\r\n\r\n\r\ndef update_daily_schedule(schedule_id, teacher_id, day_of_week, period_number, subject, class_name, data_manager_instance):\r\n    \"\"\"Update daily schedule entry\"\"\"\r\n    from data_manager import create_db_connection, execute_query\r\n    \r\n    connection = create_db_connection()\r\n    if connection is None:\r\n        return False\r\n    \r\n    try:\r\n        query = \"\"\"UPDATE daily_schedule SET teacher_id = %s, day_of_week = %s, period_number = %s, \r\n                   subject = %s, class_name = %s WHERE schedule_id = %s\"\"\"\r\n        return execute_query(connection, query, (teacher_id, day_of_week, period_number, subject, class_name, schedule_id))\r\n    finally:\r\n        if connection and connection.is_connected():\r\n            connection.close()\r\n\r\n\r\ndef delete_daily_schedule(schedule_id, data_manager_instance):\r\n    \"\"\"Delete daily schedule entry\"\"\"\r\n    from data_manager import create_db_connection, execute_query\r\n    \r\n    connection = create_db_connection()\r\n    if connection is None:\r\n        return False\r\n    \r\n    try:\r\n        query = \"DELETE FROM daily_schedule WHERE schedule_id = %s\"\r\n        return execute_query(connection, query, (schedule_id,))\r\n    finally:\r\n        if connection and connection.is_connected():\r\n            connection.close()","size_bytes":23152},"backend/existing_modules/components/substitute_pool.py":{"content":"import streamlit as st\r\nimport pandas as pd\r\nimport numpy as np\r\nimport plotly.express as px\r\nfrom datetime import datetime\r\nimport os\r\n\r\n\r\ndef render_substitute_pool_page(school_id, data_manager_instance):\r\n    \"\"\"Render the substitute teacher pool management page\"\"\"\r\n    st.markdown(\r\n        \"\"\"<div style=\"margin-right: 5px;color:#1e3a8a;\"class=\"card-title\">\r\n           <h1> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\"color:#1e3a8a; height=\"40\" fill=\"currentColor\" viewBox=\"0 0 24 24\" style=\"margin-right: 10px;\">\r\n                <path d=\"M17 3a4 4 0 0 1 4 4v10a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4V7a4 4 0 0 1 4-4h10z\"/>\r\n                <circle cx=\"9\" cy=\"9\" r=\"2\"/>\r\n                <path d=\"M15 8h2v2h-2z\"/>\r\n                <path d=\"M15 12h2v2h-2z\"/>\r\n                <path d=\"M7 18h10c0-3.314-2.686-6-6-6H9c-1.657 0-3 1.343-3 3s1.343 3 3 3z\"/>\r\n            </svg>\r\n            <span>Substitute Teacher Pool</span><?h1>\r\n        </div>\"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    # Create tabs for different sections\r\n    tab1, tab2, tab3 = st.tabs(\r\n        [\"Available Substitutes\", \"Add/Edit Substitute\", \"Performance Metrics\"]\r\n    )\r\n\r\n    # Function to load substitutes data\r\n    def load_substitutes():\r\n        file_path = \"substitutes.csv\"\r\n        default_columns = [\r\n            \"substitute_id\",\r\n            \"name\",\r\n            \"phone\",\r\n            \"subject_expertise\",\r\n            \"qualification\",\r\n            \"availability\",\r\n            \"rating\",\r\n            \"category\",\r\n            \"notes\",\r\n        ]\r\n        if os.path.exists(file_path):\r\n            try:\r\n                df = pd.read_csv(file_path)\r\n                # Ensure all default columns exist, add if missing\r\n                for col in default_columns:\r\n                    if col not in df.columns:\r\n                        df[col] = np.nan  # or appropriate default like \"\" or 0\r\n                # Ensure correct data types if necessary (e.g., rating as float)\r\n                if \"rating\" in df.columns:\r\n                    df[\"rating\"] = pd.to_numeric(df[\"rating\"], errors=\"coerce\")\r\n                # Ensure phone is string\r\n                if \"phone\" in df.columns:\r\n                    df[\"phone\"] = (\r\n                        df[\"phone\"].astype(str).replace(r\"\\.0$\", \"\", regex=True)\r\n                    )  # Handle potential float conversion\r\n                return df[default_columns]  # Return with columns in expected order\r\n            except pd.errors.EmptyDataError:\r\n                st.warning(f\"{file_path} is empty. Initializing with default columns.\")\r\n                return pd.DataFrame(columns=default_columns)\r\n            except Exception as e:\r\n                st.error(f\"Error loading substitutes data from {file_path}: {str(e)}\")\r\n                st.info(\"Creating a new empty dataframe structure.\")\r\n                return pd.DataFrame(columns=default_columns)\r\n        else:\r\n            # Create default structure if file doesn't exist\r\n            st.info(f\"{file_path} not found. Creating a new file.\")\r\n            df = pd.DataFrame(columns=default_columns)\r\n            try:\r\n                df.to_csv(file_path, index=False)\r\n            except Exception as e:\r\n                st.error(f\"Could not create {file_path}: {e}\")\r\n            return df\r\n\r\n    # Tab 1: Available Substitutes List\r\n    with tab1:\r\n        st.markdown(\"### Available Substitute Teachers\")\r\n\r\n        # Load data\r\n        substitutes_df = load_substitutes()\r\n\r\n        if substitutes_df.empty:\r\n            st.info(\"No substitute teachers have been added yet.\")\r\n        else:\r\n            # Ensure 'rating' column exists and handle potential NaNs before filtering/displaying\r\n            if \"rating\" not in substitutes_df.columns:\r\n                substitutes_df[\"rating\"] = np.nan\r\n            else:\r\n                substitutes_df[\"rating\"] = pd.to_numeric(\r\n                    substitutes_df[\"rating\"], errors=\"coerce\"\r\n                )\r\n\r\n            # Ensure 'subject_expertise' is string for .str accessor\r\n            if \"subject_expertise\" in substitutes_df.columns:\r\n                substitutes_df[\"subject_expertise\"] = substitutes_df[\r\n                    \"subject_expertise\"\r\n                ].astype(str)\r\n            else:\r\n                substitutes_df[\"subject_expertise\"] = \"\"\r\n\r\n            # Ensure 'category' is string\r\n            if \"category\" in substitutes_df.columns:\r\n                substitutes_df[\"category\"] = substitutes_df[\"category\"].astype(str)\r\n            else:\r\n                substitutes_df[\"category\"] = \"\"\r\n\r\n            # Ensure 'availability' is string\r\n            if \"availability\" in substitutes_df.columns:\r\n                substitutes_df[\"availability\"] = substitutes_df[\"availability\"].astype(\r\n                    str\r\n                )\r\n            else:\r\n                substitutes_df[\"availability\"] = \"\"\r\n\r\n            # Filter controls\r\n            col1, col2, col3 = st.columns(3)\r\n            with col1:\r\n                # --- Safely create subject list ---\r\n                all_subjects_flat = []\r\n                if not substitutes_df[\"subject_expertise\"].dropna().empty:\r\n                    try:\r\n                        all_subjects_flat = list(\r\n                            set(\r\n                                subj.strip()\r\n                                for subjects in substitutes_df[\"subject_expertise\"]\r\n                                .dropna()\r\n                                .astype(str)  # Ensure string type\r\n                                for subj in subjects.split(\",\")\r\n                                if subj.strip()  # Split and strip non-empty subjects\r\n                            )\r\n                        )\r\n                    except Exception as e:\r\n                        st.warning(f\"Could not parse subjects: {e}\")\r\n                        all_subjects_flat = []\r\n\r\n                subject_filter = st.selectbox(\r\n                    \"Filter by Subject Expertise\",\r\n                    [\"All\"] + sorted(all_subjects_flat),  # Sort for better UI\r\n                )\r\n                # --- End safe subject list ---\r\n\r\n            with col2:\r\n                category_filter = st.selectbox(\r\n                    \"Filter by Category\",\r\n                    [\"All\"]\r\n                    + sorted(list(substitutes_df[\"category\"].dropna().unique())),\r\n                )\r\n\r\n            with col3:\r\n                # Get unique availability options from the data + standard ones\r\n                availability_options = [\"All\", \"MWF\", \"TTh\", \"All Days\", \"Weekends\"]\r\n                if not substitutes_df[\"availability\"].dropna().empty:\r\n                    data_avail = list(substitutes_df[\"availability\"].dropna().unique())\r\n                    availability_options = [\"All\"] + sorted(\r\n                        list(set(availability_options + data_avail))\r\n                    )\r\n\r\n                availability_filter = st.selectbox(\r\n                    \"Filter by Availability\", availability_options\r\n                )\r\n\r\n            # Apply filters\r\n            filtered_df = substitutes_df.copy()\r\n\r\n            if subject_filter != \"All\":\r\n                # Handle potential NaN values safely during string operations\r\n                filtered_df = filtered_df[\r\n                    filtered_df[\"subject_expertise\"].str.contains(\r\n                        subject_filter,\r\n                        na=False,\r\n                        case=False,  # Added case=False for better matching\r\n                    )\r\n                ]\r\n\r\n            if category_filter != \"All\":\r\n                filtered_df = filtered_df[filtered_df[\"category\"] == category_filter]\r\n\r\n            if availability_filter != \"All\":\r\n                filtered_df = filtered_df[\r\n                    filtered_df[\"availability\"] == availability_filter\r\n                ]\r\n\r\n            # Display teachers with fancy cards\r\n            if filtered_df.empty:\r\n                st.warning(\"No substitute teachers match the selected filters.\")\r\n            else:\r\n                st.markdown(\r\n                    \"\"\"\r\n                <style>\r\n                .substitute-card {\r\n                    background: linear-gradient(135deg, #ffffff, #f5f7fa);\r\n                    border-radius: 16px;\r\n                    padding: 20px;\r\n                    margin: 15px 0;\r\n                    border: 1px solid rgba(209, 217, 230, 0.5);\r\n                    box-shadow: 0 6px 16px rgba(0,0,0,0.1);\r\n                    transition: all 0.3s ease;\r\n                    position: relative;\r\n                }\r\n                .substitute-card:hover {\r\n                    transform: translateY(-5px);\r\n                    box-shadow: 0 10px 20px rgba(0,0,0,0.15);\r\n                }\r\n                .sub-header {\r\n                    display: flex;\r\n                    justify-content: space-between;\r\n                    align-items: center;\r\n                    margin-bottom: 10px;\r\n                }\r\n                .sub-name {\r\n                    font-size: 18px;\r\n                    font-weight: 600;\r\n                    color: #1e3a8a;\r\n                }\r\n                .sub-id {\r\n                    font-size: 14px;\r\n                    color: #6b7280;\r\n                }\r\n                .rating-badge {\r\n                    background-color: #fef3c7;\r\n                    color: #92400e;\r\n                    padding: 3px 10px;\r\n                    border-radius: 12px;\r\n                    font-weight: 500;\r\n                    font-size: 14px;\r\n                }\r\n                .sub-details {\r\n                    display: grid;\r\n                    grid-template-columns: 1fr 1fr;\r\n                    gap: 10px;\r\n                    margin-top: 12px;\r\n                }\r\n                .sub-detail-item {\r\n                    margin-bottom: 8px;\r\n                }\r\n                .detail-label {\r\n                    font-size: 14px;\r\n                    color: #6b7280;\r\n                    margin-bottom: 3px;\r\n                }\r\n                .detail-value {\r\n                    font-size: 15px;\r\n                    color: #111827;\r\n                }\r\n                .category-badge {\r\n                    position: absolute;\r\n                    top: 15px;\r\n                    right: 15px;\r\n                    background-color: #e0e7ff;\r\n                    color: #4338ca;\r\n                    font-size: 14px;\r\n                    font-weight: 500;\r\n                    padding: 3px 10px;\r\n                    border-radius: 12px;\r\n                }\r\n                </style>\r\n                \"\"\",\r\n                    unsafe_allow_html=True,\r\n                )\r\n\r\n                for _, sub in filtered_df.iterrows():\r\n                    current_rating = sub.get(\"rating\")\r\n                    if pd.isna(current_rating):\r\n                        rating_display = \"N/A\"\r\n                        rating_color = \"grey\"  # Or some default\r\n                        background_color = \"#f3f4f6\"  # Default background\r\n                        text_color = \"#6b7280\"  # Default text\r\n                    else:\r\n                        rating_display = (\r\n                            f\"{current_rating:.1f}\"  # Format to 1 decimal place\r\n                        )\r\n                        if current_rating >= 4.5:\r\n                            rating_color = \"green\"\r\n                            background_color = \"#dcfce7\"\r\n                            text_color = \"#166534\"\r\n                        elif current_rating >= 3.5:\r\n                            rating_color = \"orange\"\r\n                            background_color = \"#fef3c7\"\r\n                            text_color = \"#92400e\"\r\n                        else:\r\n                            rating_color = \"red\"\r\n                            background_color = \"#fee2e2\"\r\n                            text_color = \"#991b1b\"\r\n\r\n                    st.markdown(\r\n                        f\"\"\"\r\n                    <div class=\"substitute-card\">\r\n                        <div class=\"category-badge\">{sub.get(\"category\", \"\")}</div>\r\n                        <div class=\"sub-header\">\r\n                            <div>\r\n                                <div class=\"sub-name\">{sub.get(\"name\", \"\")}</div>\r\n                                <div class=\"sub-id\">ID: {sub.get(\"substitute_id\", \"\")}</div>\r\n                            </div>\r\n                            <div class=\"rating-badge\" style=\"background-color: {background_color}; color: {text_color};\">\r\n                                ★ {rating_display}\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"sub-details\">\r\n                            <div class=\"sub-detail-item\">\r\n                                <div class=\"detail-label\">Phone</div>\r\n                                <div class=\"detail-value\">{sub.get(\"phone\", \"\")}</div>\r\n                            </div>\r\n                            <div class=\"sub-detail-item\">\r\n                                <div class=\"detail-label\">Availability</div>\r\n                                <div class=\"detail-value\">{sub.get(\"availability\", \"\")}</div>\r\n                            </div>\r\n                            <div class=\"sub-detail-item\">\r\n                                <div class=\"detail-label\">Subject Expertise</div>\r\n                                <div class=\"detail-value\">{sub.get(\"subject_expertise\", \"\")}</div>\r\n                            </div>\r\n                            <div class=\"sub-detail-item\">\r\n                                <div class=\"detail-label\">Qualification</div>\r\n                                <div class=\"detail-value\">{sub.get(\"qualification\", \"\")}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"margin-top: 10px;\">\r\n                            <div class=\"detail-label\">Notes</div>\r\n                            <div class=\"detail-value\" style=\"font-style: italic;\">{sub.get(\"notes\", \"\")}</div>\r\n                        </div>\r\n                    </div>\r\n                    \"\"\",\r\n                        unsafe_allow_html=True,\r\n                    )\r\n\r\n    # Tab 2: Add/Edit Substitute\r\n    with tab2:\r\n        st.markdown(\"### Add or Edit Substitute Teacher\")\r\n\r\n        substitutes_df = load_substitutes()\r\n\r\n        # Ensure 'rating' is numeric for slider default value\r\n        if \"rating\" in substitutes_df.columns:\r\n            substitutes_df[\"rating\"] = pd.to_numeric(\r\n                substitutes_df[\"rating\"], errors=\"coerce\"\r\n            )\r\n        else:\r\n            substitutes_df[\"rating\"] = np.nan\r\n\r\n        # Check if we're editing an existing substitute\r\n        if \"edit_substitute_id\" not in st.session_state:\r\n            st.session_state.edit_substitute_id = None\r\n\r\n        # Edit mode selector\r\n        edit_mode = st.checkbox(\"Edit Existing Substitute\")\r\n\r\n        sub_data = {}  # Initialize sub_data dictionary\r\n\r\n        if edit_mode and not substitutes_df.empty:\r\n            # Create options list checking for NaNs in name\r\n            options = substitutes_df[\"substitute_id\"].tolist()\r\n            format_func = (\r\n                lambda x: f\"{substitutes_df[substitutes_df['substitute_id'] == x]['name'].fillna('Unnamed').values[0]} ({x})\"\r\n            )\r\n\r\n            substitute_selection = st.selectbox(\r\n                \"Select Substitute to Edit\",\r\n                options=options,\r\n                format_func=format_func,\r\n                key=\"edit_select\",  # Add a key to help streamlit track changes\r\n            )\r\n\r\n            if substitute_selection:  # Check if something is selected\r\n                # Load the selected substitute data\r\n                selected_rows = substitutes_df[\r\n                    substitutes_df[\"substitute_id\"] == substitute_selection\r\n                ]\r\n                if not selected_rows.empty:\r\n                    sub_data = selected_rows.iloc[0].to_dict()\r\n                    # Ensure phone is treated as string for the form field\r\n                    sub_data[\"phone\"] = str(sub_data.get(\"phone\", \"\"))\r\n                    st.session_state.edit_substitute_id = substitute_selection\r\n                else:\r\n                    st.warning(\r\n                        f\"Could not find data for selected ID: {substitute_selection}\"\r\n                    )\r\n                    st.session_state.edit_substitute_id = (\r\n                        None  # Reset if data not found\r\n                    )\r\n            else:\r\n                st.session_state.edit_substitute_id = None  # Reset if nothing selected\r\n\r\n        if (\r\n            not st.session_state.edit_substitute_id\r\n        ):  # If not editing or selection failed\r\n            # Generate next ID based on existing numeric parts\r\n            if (\r\n                not substitutes_df.empty\r\n                and \"substitute_id\" in substitutes_df.columns\r\n                and substitutes_df[\"substitute_id\"].notna().any()\r\n            ):\r\n                # Extract numeric part, handle non-numeric IDs gracefully\r\n                numeric_ids = pd.to_numeric(\r\n                    substitutes_df[\"substitute_id\"].str.extract(\r\n                        r\"(\\d+)$\", expand=False\r\n                    ),\r\n                    errors=\"coerce\",\r\n                )\r\n                max_id = numeric_ids.max()\r\n                next_id_num = int(max_id + 1) if pd.notna(max_id) else 1\r\n            else:\r\n                next_id_num = 1\r\n            new_sub_id = f\"SUB{str(next_id_num).zfill(3)}\"\r\n\r\n            sub_data = {\r\n                \"substitute_id\": new_sub_id,\r\n                \"name\": \"\",\r\n                \"phone\": \"\",\r\n                \"subject_expertise\": \"\",\r\n                \"qualification\": \"\",\r\n                \"availability\": \"All Days\",\r\n                \"rating\": 4.0,  # Default rating for new entries\r\n                \"category\": \"TGT\",\r\n                \"notes\": \"\",\r\n            }\r\n            st.session_state.edit_substitute_id = (\r\n                None  # Explicitly set to None for add mode\r\n            )\r\n\r\n        # Create form for adding/editing\r\n        # Use a key based on edit mode to force form reset when switching modes\r\n        form_key = f\"substitute_form_{st.session_state.edit_substitute_id or 'new'}\"\r\n        with st.form(form_key):\r\n            col1, col2 = st.columns(2)\r\n\r\n            with col1:\r\n                name = st.text_input(\"Name\", value=sub_data.get(\"name\", \"\"))\r\n                # Ensure phone value is string\r\n                phone_value = (\r\n                    str(sub_data.get(\"phone\", \"\")).replace(\".0\", \"\")\r\n                    if pd.notna(sub_data.get(\"phone\"))\r\n                    else \"\"\r\n                )\r\n                phone = st.text_input(\"Phone\", value=phone_value)\r\n                subject_expertise = st.text_input(\r\n                    \"Subject Expertise (comma separated)\",\r\n                    value=sub_data.get(\"subject_expertise\", \"\"),\r\n                )\r\n                qualification = st.text_input(\r\n                    \"Qualification\", value=sub_data.get(\"qualification\", \"\")\r\n                )\r\n\r\n            with col2:\r\n                avail_options = [\"All Days\", \"MWF\", \"TTh\", \"Weekends\"]\r\n                current_avail = sub_data.get(\"availability\", \"All Days\")\r\n                try:\r\n                    avail_index = avail_options.index(current_avail)\r\n                except ValueError:\r\n                    avail_index = 0  # Default to 'All Days' if current value not in standard options\r\n\r\n                availability = st.selectbox(\r\n                    \"Availability\",\r\n                    options=avail_options,\r\n                    index=avail_index,\r\n                )\r\n\r\n                cat_options = [\"PGT\", \"TGT\", \"PRT\"]\r\n                current_cat = sub_data.get(\"category\", \"TGT\")\r\n                try:\r\n                    cat_index = cat_options.index(current_cat)\r\n                except ValueError:\r\n                    cat_index = 1  # Default to 'TGT'\r\n\r\n                category = st.selectbox(\r\n                    \"Category\",\r\n                    options=cat_options,\r\n                    index=cat_index,\r\n                )\r\n\r\n                # Ensure rating is float for slider, handle NaN\r\n                rating_value = sub_data.get(\"rating\", 4.0)\r\n                if pd.isna(rating_value):\r\n                    rating_value = 4.0  # Default if NaN\r\n\r\n                rating = st.slider(\"Rating\", 1.0, 5.0, float(rating_value), 0.1)\r\n\r\n            notes = st.text_area(\"Notes\", value=sub_data.get(\"notes\", \"\"))\r\n\r\n            # Hidden ID (read-only for user)\r\n            st.text_input(\r\n                \"Substitute ID\", value=sub_data.get(\"substitute_id\"), disabled=True\r\n            )\r\n            substitute_id = sub_data.get(\"substitute_id\")  # Get the ID for processing\r\n\r\n            submitted = st.form_submit_button(\"Save Substitute\")\r\n\r\n            if submitted:\r\n                if not name or not phone:\r\n                    st.error(\"Name and Phone are required fields.\")\r\n                elif len(phone) != 10 or not phone.isdigit():\r\n                    st.error(\"Please enter a valid 10-digit phone number.\")\r\n                else:\r\n                    # Prepare new data dictionary\r\n                    new_data_dict = {\r\n                        \"substitute_id\": substitute_id,  # Use the ID from form start\r\n                        \"name\": name,\r\n                        \"phone\": phone,  # Keep as string\r\n                        \"subject_expertise\": subject_expertise,\r\n                        \"qualification\": qualification,\r\n                        \"availability\": availability,\r\n                        \"rating\": rating,  # Keep as float\r\n                        \"category\": category,\r\n                        \"notes\": notes,\r\n                    }\r\n\r\n                    success_msg = None  # Initialize success message\r\n\r\n                    # ------------- CORE FIX START -------------\r\n                    try:\r\n                        if st.session_state.edit_substitute_id:\r\n                            # Update existing\r\n                            mask = (\r\n                                substitutes_df[\"substitute_id\"]\r\n                                == st.session_state.edit_substitute_id\r\n                            )\r\n                            row_indices = substitutes_df.index[\r\n                                mask\r\n                            ].tolist()  # Get the actual index label(s)\r\n\r\n                            if len(row_indices) == 1:\r\n                                row_index = row_indices[0]\r\n                                # Create a list of values in the correct column order\r\n                                values_in_order = [\r\n                                    new_data_dict.get(col)\r\n                                    for col in substitutes_df.columns\r\n                                ]\r\n                                # Assign the list to the specific row index using .loc\r\n                                substitutes_df.loc[row_index] = values_in_order\r\n                                success_msg = f\"Updated substitute teacher: {name} ({substitute_id})\"\r\n                            elif len(row_indices) > 1:\r\n                                st.error(\r\n                                    f\"Error: Found multiple ({len(row_indices)}) substitutes with ID {st.session_state.edit_substitute_id}. Cannot update safely. Please check data.\"\r\n                                )\r\n                            else:\r\n                                st.error(\r\n                                    f\"Error: Could not find substitute with ID {st.session_state.edit_substitute_id} to update. It might have been deleted.\"\r\n                                )\r\n\r\n                        else:\r\n                            # Add new\r\n                            # Check if ID already exists (shouldn't happen with generation logic, but good practice)\r\n                            if substitute_id in substitutes_df[\"substitute_id\"].values:\r\n                                st.error(\r\n                                    f\"Error: Substitute ID {substitute_id} already exists. Cannot add duplicate.\"\r\n                                )\r\n                            else:\r\n                                # Ensure the new_data_dict has keys matching DataFrame columns\r\n                                new_df_row = pd.DataFrame(\r\n                                    [new_data_dict], columns=substitutes_df.columns\r\n                                )\r\n                                substitutes_df = pd.concat(\r\n                                    [substitutes_df, new_df_row], ignore_index=True\r\n                                )\r\n                                success_msg = f\"Added new substitute teacher: {name} ({substitute_id})\"\r\n\r\n                        # Save back to CSV only if an add/update operation was potentially successful\r\n                        if success_msg:\r\n                            substitutes_df.to_csv(\"substitutes.csv\", index=False)\r\n                            st.success(success_msg)\r\n                            st.session_state.edit_substitute_id = (\r\n                                None  # Reset edit state\r\n                            )\r\n                            st.rerun()  # Rerun to clear form and update lists\r\n\r\n                    except Exception as e:\r\n                        st.error(f\"An error occurred during saving: {e}\")\r\n                    # ------------- CORE FIX END -------------\r\n\r\n    # Tab 3: Performance Metrics\r\n    with tab3:\r\n        st.markdown(\"### Substitute Teacher Performance Metrics\")\r\n\r\n        substitutes_df = load_substitutes()\r\n\r\n        if substitutes_df.empty:\r\n            st.info(\"No substitute teachers have been added yet.\")\r\n        else:\r\n            # Ensure 'rating' is numeric for plotting, handle NaNs by filtering\r\n            if \"rating\" in substitutes_df.columns:\r\n                substitutes_df[\"rating\"] = pd.to_numeric(\r\n                    substitutes_df[\"rating\"], errors=\"coerce\"\r\n                )\r\n                plot_df_rating = substitutes_df.dropna(subset=[\"rating\"])\r\n            else:\r\n                plot_df_rating = pd.DataFrame(\r\n                    columns=substitutes_df.columns\r\n                )  # Empty df if no rating col\r\n\r\n            if not plot_df_rating.empty:\r\n                # Ratings distribution\r\n                st.subheader(\"Ratings Distribution\")\r\n\r\n                fig = px.bar(\r\n                    plot_df_rating,\r\n                    x=\"name\",\r\n                    y=\"rating\",\r\n                    color=\"rating\",\r\n                    color_continuous_scale=[\r\n                        \"#fee2e2\",\r\n                        \"#fef3c7\",\r\n                        \"#dcfce7\",\r\n                    ],  # Redish, Yellowish, Greenish\r\n                    color_continuous_midpoint=3.0,  # Optional: set midpoint for color scale\r\n                    range_color=[1, 5],\r\n                    labels={\"name\": \"Substitute Teacher\", \"rating\": \"Rating\"},\r\n                    title=\"Substitute Teacher Ratings\",\r\n                    text=\"rating\",  # Show rating value on bars\r\n                )\r\n                fig.update_traces(texttemplate=\"%{text:.1f}\", textposition=\"outside\")\r\n                fig.update_layout(\r\n                    xaxis_title=\"Substitute Teacher\",\r\n                    yaxis_title=\"Rating\",\r\n                    yaxis_range=[0, 5.5],  # Extend range slightly for text visibility\r\n                    coloraxis_showscale=False,\r\n                    xaxis={\"categoryorder\": \"total descending\"},  # Sort bars by rating\r\n                )\r\n\r\n                st.plotly_chart(fig, use_container_width=True)\r\n            else:\r\n                st.info(\"No ratings data available to display.\")\r\n\r\n            # Category Distribution\r\n            st.subheader(\"Category Distribution\")\r\n            if (\r\n                \"category\" in substitutes_df.columns\r\n                and not substitutes_df[\"category\"].dropna().empty\r\n            ):\r\n                category_counts = (\r\n                    substitutes_df[\"category\"].dropna().value_counts().reset_index()\r\n                )\r\n                category_counts.columns = [\r\n                    \"Category\",\r\n                    \"Count\",\r\n                ]  # Rename columns for clarity\r\n\r\n                fig2 = px.pie(\r\n                    category_counts,\r\n                    values=\"Count\",\r\n                    names=\"Category\",\r\n                    title=\"Substitute Teachers by Category\",\r\n                    color=\"Category\",\r\n                    color_discrete_map={\r\n                        \"PGT\": \"#3b82f6\",  # Blue\r\n                        \"TGT\": \"#10b981\",  # Green\r\n                        \"PRT\": \"#f59e0b\",  # Amber\r\n                    },\r\n                )\r\n                fig2.update_traces(textposition=\"inside\", textinfo=\"percent+label\")\r\n                st.plotly_chart(fig2, use_container_width=True)\r\n            else:\r\n                st.info(\"No category data available to display.\")\r\n\r\n            # Subject expertise\r\n            st.subheader(\"Subject Expertise Distribution\")\r\n            if (\r\n                \"subject_expertise\" in substitutes_df.columns\r\n                and not substitutes_df[\"subject_expertise\"].dropna().empty\r\n            ):\r\n                # Extract all subjects from the comma-separated list safely\r\n                all_subjects = []\r\n                for subjects in (\r\n                    substitutes_df[\"subject_expertise\"].dropna().astype(str)\r\n                ):\r\n                    all_subjects.extend(\r\n                        [s.strip() for s in subjects.split(\",\") if s.strip()]\r\n                    )  # Ensure not empty strings\r\n\r\n                if all_subjects:\r\n                    subject_counts = (\r\n                        pd.Series(all_subjects).value_counts().reset_index()\r\n                    )\r\n                    subject_counts.columns = [\"Subject\", \"Count\"]  # Rename columns\r\n\r\n                    fig3 = px.bar(\r\n                        subject_counts,\r\n                        x=\"Subject\",\r\n                        y=\"Count\",\r\n                        title=\"Subject Expertise Distribution\",\r\n                        color=\"Count\",\r\n                        color_continuous_scale=px.colors.sequential.Viridis,\r\n                        text=\"Count\",\r\n                    )\r\n                    fig3.update_layout(\r\n                        xaxis_title=\"Subject\", yaxis_title=\"Number of Teachers\"\r\n                    )\r\n                    fig3.update_traces(textposition=\"outside\")\r\n                    st.plotly_chart(fig3, use_container_width=True)\r\n                else:\r\n                    st.info(\"No subject expertise data entered.\")\r\n            else:\r\n                st.info(\"No subject expertise data available to display.\")\r\n\r\n\r\n# --- Example of how to run this page (if it's not your main app file) ---\r\n# if __name__ == \"__main__\":\r\n#     # Set page config (optional, do it once at the start of your app)\r\n#     # st.set_page_config(layout=\"wide\")\r\n#     render_substitute_pool_page()\r\n","size_bytes":31194},"backend/existing_modules/components/support.py":{"content":"import streamlit as st\r\n\r\n\r\ndef render_support_page(school_id, data_manager):\r\n    \"\"\"Renders the customer support page with a WhatsApp link.\"\"\"\r\n\r\n    # Aapka MSG91 par register kiya hua WhatsApp number\r\n    SUPPORT_WHATSAPP_NUMBER = \"917599377142\"\r\n\r\n    # Pre-filled message (Ismein humne keyword 'Support' daal diya hai)\r\n    PRE_FILLED_MESSAGE = \"Support\"\r\n\r\n    # WhatsApp \"Click to Chat\" link banayein\r\n    # URL encoding zaroori hai taaki space etc. sahi se handle ho\r\n    from urllib.parse import quote\r\n\r\n    whatsapp_url = (\r\n        f\"https://wa.me/{SUPPORT_WHATSAPP_NUMBER}?text={quote(PRE_FILLED_MESSAGE)}\"\r\n    )\r\n\r\n    st.markdown(\r\n        \"\"\"\r\n        <style>\r\n        .support-container {\r\n            max-width: 800px;\r\n            margin: 2rem auto;\r\n            padding: 2rem;\r\n            background-color: #f9fafb;\r\n            border-radius: 12px;\r\n            text-align: center;\r\n            border: 1px solid #e5e7eb;\r\n        }\r\n        .support-header {\r\n            font-size: 2.5rem;\r\n            font-weight: 700;\r\n            color: #1E3A8A;\r\n            margin-bottom: 1rem;\r\n        }\r\n        .support-subheader {\r\n            font-size: 1.1rem;\r\n            color: #475569;\r\n            margin-bottom: 2rem;\r\n            line-height: 1.6;\r\n        }\r\n        .whatsapp-button {\r\n            display: inline-flex;\r\n            align-items: center;\r\n            padding: 14px 28px;\r\n            background-color: #25D366;\r\n            color: white;\r\n            border-radius: 50px;\r\n            text-decoration: none;\r\n            font-weight: 600;\r\n            font-size: 1.1rem;\r\n            transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n            box-shadow: 0 4px 15px rgba(37, 211, 102, 0.2);\r\n        }\r\n        .whatsapp-button:hover {\r\n            transform: translateY(-3px);\r\n            box-shadow: 0 7px 20px rgba(37, 211, 102, 0.3);\r\n        }\r\n        .whatsapp-icon {\r\n            width: 24px;\r\n            height: 24px;\r\n            margin-right: 12px;\r\n        }\r\n        </style>\r\n        \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    st.markdown(\r\n        f\"\"\"\r\n        <div class=\"support-container\">\r\n            <h1 class=\"support-header\">Need Help?</h1>\r\n            <p class=\"support-subheader\">\r\n                Facing an issue or have a question? Our support team is just a message away. \r\n                Click the button below to start a conversation with us on WhatsApp.\r\n            </p>\r\n            <a href=\"{whatsapp_url}\" target=\"_blank\" class=\"whatsapp-button\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg\" class=\"whatsapp-icon\">\r\n                Chat with Support on WhatsApp\r\n            </a>\r\n        </div>\r\n        \"\"\",\r\n        unsafe_allow_html=True,\r\n    )\r\n\r\n    st.info(\r\n        \"ℹ️ Clicking the button will open WhatsApp with a pre-filled message 'Support' to initiate the chat with our support bot.\"\r\n    )\r\n","size_bytes":2963},"backend/existing_modules/components/teacher_management.py":{"content":"import streamlit as st\r\nimport pandas as pd\r\nfrom data_manager import create_db_connection, read_query, execute_query\r\n\r\n\r\ndef render_teacher_management_page(school_id, data_manager_instance):\r\n    \"\"\"Render the complete teacher management page\"\"\"\r\n    st.title(\"👨‍🏫 Teacher Management\")\r\n    st.markdown(\"### Manage Teachers - Add, Edit, Delete and View All Teachers\")\r\n    \r\n    # Create main tabs for teacher operations\r\n    teacher_tabs = st.tabs([\"📋 View All Teachers\", \"➕ Add New Teacher\", \"✏️ Edit Teacher\", \"🗑️ Delete Teacher\"])\r\n    \r\n    # Tab 1: View All Teachers\r\n    with teacher_tabs[0]:\r\n        st.markdown(\"#### All Teachers in School\")\r\n        teachers_df = get_all_teachers(school_id, data_manager_instance)\r\n        \r\n        if not teachers_df.empty:\r\n            # Display total count\r\n            st.info(f\"Total Teachers: {len(teachers_df)}\")\r\n            \r\n            # Add search/filter functionality\r\n            col1, col2 = st.columns(2)\r\n            with col1:\r\n                search_term = st.text_input(\"🔍 Search by Name or Teacher ID\", \"\")\r\n            with col2:\r\n                category_filter = st.selectbox(\"Filter by Category\", [\"All\", \"TGT\", \"PGT\", \"PRT\"])\r\n            \r\n            # Apply filters\r\n            filtered_df = teachers_df.copy()\r\n            if search_term:\r\n                filtered_df = filtered_df[\r\n                    filtered_df['name'].str.contains(search_term, case=False, na=False) |\r\n                    filtered_df['teacher_id'].str.contains(search_term, case=False, na=False)\r\n                ]\r\n            \r\n            if category_filter != \"All\":\r\n                filtered_df = filtered_df[filtered_df['category'] == category_filter]\r\n            \r\n            # Display filtered results\r\n            if not filtered_df.empty:\r\n                st.dataframe(\r\n                    filtered_df,\r\n                    column_config={\r\n                        \"teacher_id\": st.column_config.TextColumn(\"Teacher ID\", width=\"small\"),\r\n                        \"name\": st.column_config.TextColumn(\"Name\", width=\"medium\"),\r\n                        \"phone\": st.column_config.TextColumn(\"Phone\", width=\"small\"),\r\n                        \"category\": st.column_config.TextColumn(\"Category\", width=\"small\"),\r\n                        \"biometric_code\": st.column_config.TextColumn(\"Biometric Code\", width=\"small\"),\r\n                    },\r\n                    hide_index=True,\r\n                    use_container_width=True,\r\n                )\r\n                \r\n                # Export functionality\r\n                csv = filtered_df.to_csv(index=False)\r\n                st.download_button(\r\n                    label=\"📥 Download Teacher List (CSV)\",\r\n                    data=csv,\r\n                    file_name=f\"teachers_list_{school_id}.csv\",\r\n                    mime=\"text/csv\"\r\n                )\r\n            else:\r\n                st.warning(\"No teachers match your search criteria.\")\r\n        else:\r\n            st.info(\"No teachers found in the database.\")\r\n    \r\n    # Tab 2: Add New Teacher\r\n    with teacher_tabs[1]:\r\n        st.markdown(\"#### Add New Teacher to School\")\r\n        \r\n        with st.form(\"add_teacher_form\", clear_on_submit=True):\r\n            st.info(\"ℹ️ All fields marked with * are mandatory\")\r\n            \r\n            col1, col2 = st.columns(2)\r\n            with col1:\r\n                teacher_id = st.text_input(\"Teacher ID *\", \r\n                                         help=\"Unique identifier for the teacher (e.g., T001, MATH001)\",\r\n                                         placeholder=\"Enter unique teacher ID\")\r\n                name = st.text_input(\"Full Name *\", \r\n                                   help=\"Complete name of the teacher\",\r\n                                   placeholder=\"Enter teacher's full name\")\r\n                category = st.selectbox(\"Category *\", [\"TGT\", \"PGT\", \"PRT\"], \r\n                                      help=\"TGT: Trained Graduate Teacher, PGT: Post Graduate Teacher, PRT: Primary Teacher\")\r\n            \r\n            with col2:\r\n                phone = st.text_input(\"Phone Number *\", \r\n                                    help=\"10-digit mobile number\", \r\n                                    placeholder=\"Enter 10-digit phone number\",\r\n                                    max_chars=10)\r\n                biometric_code = st.text_input(\"Biometric Code\", \r\n                                             help=\"Code used in biometric attendance system (optional)\",\r\n                                             placeholder=\"Enter biometric device code\")\r\n            \r\n            submitted = st.form_submit_button(\"➕ Add Teacher\", type=\"primary\")\r\n            \r\n            if submitted:\r\n                # Validation\r\n                errors = []\r\n                \r\n                if not teacher_id or not teacher_id.strip():\r\n                    errors.append(\"Teacher ID is required\")\r\n                \r\n                if not name or not name.strip():\r\n                    errors.append(\"Teacher name is required\")\r\n                \r\n                if not phone or not phone.strip():\r\n                    errors.append(\"Phone number is required\")\r\n                elif len(phone.strip()) != 10:\r\n                    errors.append(\"Phone number must be exactly 10 digits\")\r\n                elif not phone.strip().isdigit():\r\n                    errors.append(\"Phone number must contain only digits\")\r\n                \r\n                if errors:\r\n                    for error in errors:\r\n                        st.error(f\"❌ {error}\")\r\n                else:\r\n                    # Check if teacher ID already exists\r\n                    if check_teacher_id_exists(school_id, teacher_id.strip(), data_manager_instance):\r\n                        st.error(f\"❌ Teacher ID '{teacher_id.strip()}' already exists. Please use a different ID.\")\r\n                    else:\r\n                        success = add_teacher(school_id, teacher_id.strip(), name.strip(), \r\n                                            phone.strip(), category, biometric_code.strip(), data_manager_instance)\r\n                        if success:\r\n                            st.success(f\"✅ Teacher {name.strip()} added successfully!\")\r\n                            st.balloons()\r\n                            st.rerun()\r\n                        else:\r\n                            st.error(\"❌ Failed to add teacher. Please try again.\")\r\n    \r\n    # Tab 3: Edit Teacher\r\n    with teacher_tabs[2]:\r\n        st.markdown(\"#### Edit Teacher Information\")\r\n        \r\n        teachers_df = get_all_teachers(school_id, data_manager_instance)\r\n        \r\n        if not teachers_df.empty:\r\n            # Teacher selection\r\n            teacher_options = {row['teacher_id']: f\"{row['teacher_id']} - {row['name']} ({row['category']})\" \r\n                             for _, row in teachers_df.iterrows()}\r\n            \r\n            selected_teacher = st.selectbox(\"Select Teacher to Edit\", \r\n                                          options=list(teacher_options.keys()),\r\n                                          format_func=lambda x: teacher_options[x])\r\n            \r\n            if selected_teacher:\r\n                teacher_data = teachers_df[teachers_df['teacher_id'] == selected_teacher].iloc[0]\r\n                \r\n                with st.form(\"edit_teacher_form\"):\r\n                    st.info(f\"Editing: {teacher_data['name']} (ID: {teacher_data['teacher_id']})\")\r\n                    \r\n                    col1, col2 = st.columns(2)\r\n                    with col1:\r\n                        new_name = st.text_input(\"Full Name *\", value=teacher_data['name'])\r\n                        new_category = st.selectbox(\"Category *\", [\"TGT\", \"PGT\", \"PRT\"], \r\n                                                  index=get_category_index(teacher_data.get('category', 'TGT')))\r\n                    \r\n                    with col2:\r\n                        new_phone = st.text_input(\"Phone Number *\", value=teacher_data.get('phone', ''),\r\n                                                max_chars=10)\r\n                        new_biometric_code = st.text_input(\"Biometric Code\", \r\n                                                         value=teacher_data.get('biometric_code', ''))\r\n                    \r\n                    submitted = st.form_submit_button(\"💾 Update Teacher\", type=\"primary\")\r\n                    \r\n                    if submitted:\r\n                        # Validation\r\n                        errors = []\r\n                        \r\n                        if not new_name or not new_name.strip():\r\n                            errors.append(\"Teacher name is required\")\r\n                        \r\n                        if not new_phone or not new_phone.strip():\r\n                            errors.append(\"Phone number is required\")\r\n                        elif len(new_phone.strip()) != 10:\r\n                            errors.append(\"Phone number must be exactly 10 digits\")\r\n                        elif not new_phone.strip().isdigit():\r\n                            errors.append(\"Phone number must contain only digits\")\r\n                        \r\n                        if errors:\r\n                            for error in errors:\r\n                                st.error(f\"❌ {error}\")\r\n                        else:\r\n                            success = update_teacher(school_id, selected_teacher, new_name.strip(), \r\n                                                   new_phone.strip(), new_category, new_biometric_code.strip(), \r\n                                                   data_manager_instance)\r\n                            if success:\r\n                                st.success(f\"✅ Teacher {new_name.strip()} updated successfully!\")\r\n                                st.rerun()\r\n                            else:\r\n                                st.error(\"❌ Failed to update teacher.\")\r\n        else:\r\n            st.info(\"No teachers available to edit.\")\r\n    \r\n    # Tab 4: Delete Teacher\r\n    with teacher_tabs[3]:\r\n        st.markdown(\"#### Delete Teacher\")\r\n        st.warning(\"⚠️ **Warning:** Deleting a teacher will also remove all their schedule entries and attendance records.\")\r\n        \r\n        teachers_df = get_all_teachers(school_id, data_manager_instance)\r\n        \r\n        if not teachers_df.empty:\r\n            teacher_options = {row['teacher_id']: f\"{row['teacher_id']} - {row['name']} ({row['category']})\" \r\n                             for _, row in teachers_df.iterrows()}\r\n            \r\n            selected_teacher = st.selectbox(\"Select Teacher to Delete\", \r\n                                          options=list(teacher_options.keys()),\r\n                                          format_func=lambda x: teacher_options[x])\r\n            \r\n            if selected_teacher:\r\n                teacher_data = teachers_df[teachers_df['teacher_id'] == selected_teacher].iloc[0]\r\n                \r\n                # Show teacher details\r\n                st.error(f\"🗑️ **You are about to delete:**\")\r\n                st.write(f\"**Name:** {teacher_data['name']}\")\r\n                st.write(f\"**Teacher ID:** {selected_teacher}\")\r\n                st.write(f\"**Category:** {teacher_data['category']}\")\r\n                st.write(f\"**Phone:** {teacher_data.get('phone', 'N/A')}\")\r\n                \r\n                st.error(\"**This action cannot be undone!**\")\r\n                \r\n                # Double confirmation\r\n                confirm = st.checkbox(\"I understand that this action cannot be undone\")\r\n                \r\n                if confirm:\r\n                    if st.button(\"🗑️ **DELETE TEACHER**\", type=\"secondary\", use_container_width=True):\r\n                        success = delete_teacher(school_id, selected_teacher, data_manager_instance)\r\n                        if success:\r\n                            st.success(f\"✅ Teacher {teacher_data['name']} deleted successfully!\")\r\n                            st.rerun()\r\n                        else:\r\n                            st.error(\"❌ Failed to delete teacher. They may have existing records.\")\r\n        else:\r\n            st.info(\"No teachers available to delete.\")\r\n\r\n\r\ndef get_category_index(category):\r\n    \"\"\"Get index for category dropdown\"\"\"\r\n    categories = [\"TGT\", \"PGT\", \"PRT\"]\r\n    category_mapping = {\r\n        'P.G.T': 'PGT',\r\n        'T.G.T': 'TGT', \r\n        'P.R.T': 'PRT',\r\n        'Primary': 'PRT',\r\n        'Secondary': 'TGT',\r\n        'Senior Secondary': 'PGT',\r\n        'Admin': 'TGT',\r\n        'Support': 'TGT'\r\n    }\r\n    \r\n    mapped_category = category_mapping.get(category, category)\r\n    if mapped_category not in categories:\r\n        mapped_category = 'TGT'\r\n    \r\n    try:\r\n        return categories.index(mapped_category)\r\n    except ValueError:\r\n        return 0\r\n\r\n\r\ndef get_all_teachers(school_id, data_manager_instance):\r\n    \"\"\"Get all teachers from the users table\"\"\"\r\n    connection = create_db_connection()\r\n    if connection is None:\r\n        return pd.DataFrame()\r\n    \r\n    try:\r\n        query = \"SELECT teacher_id, name, phone, category, biometric_code FROM users WHERE school_id = %s ORDER BY name\"\r\n        result = read_query(connection, query, (school_id,))\r\n        return pd.DataFrame(result)\r\n    finally:\r\n        if connection and connection.is_connected():\r\n            connection.close()\r\n\r\n\r\ndef check_teacher_id_exists(school_id, teacher_id, data_manager_instance):\r\n    \"\"\"Check if teacher ID already exists\"\"\"\r\n    connection = create_db_connection()\r\n    if connection is None:\r\n        return False\r\n    \r\n    try:\r\n        query = \"SELECT COUNT(*) as count FROM users WHERE school_id = %s AND teacher_id = %s\"\r\n        result = read_query(connection, query, (school_id, teacher_id))\r\n        return result[0]['count'] > 0 if result else False\r\n    finally:\r\n        if connection and connection.is_connected():\r\n            connection.close()\r\n\r\n\r\ndef add_teacher(school_id, teacher_id, name, phone, category, biometric_code, data_manager_instance):\r\n    \"\"\"Add a new teacher to the users table\"\"\"\r\n    connection = create_db_connection()\r\n    if connection is None:\r\n        return False\r\n    \r\n    try:\r\n        query = \"\"\"INSERT INTO users (school_id, teacher_id, name, phone, category, biometric_code) \r\n                   VALUES (%s, %s, %s, %s, %s, %s)\"\"\"\r\n        return execute_query(connection, query, (school_id, teacher_id, name, phone, category, biometric_code))\r\n    finally:\r\n        if connection and connection.is_connected():\r\n            connection.close()\r\n\r\n\r\ndef update_teacher(school_id, teacher_id, name, phone, category, biometric_code, data_manager_instance):\r\n    \"\"\"Update teacher details in the users table\"\"\"\r\n    connection = create_db_connection()\r\n    if connection is None:\r\n        return False\r\n    \r\n    try:\r\n        query = \"\"\"UPDATE users SET name = %s, phone = %s, category = %s, biometric_code = %s \r\n                   WHERE school_id = %s AND teacher_id = %s\"\"\"\r\n        return execute_query(connection, query, (name, phone, category, biometric_code, school_id, teacher_id))\r\n    finally:\r\n        if connection and connection.is_connected():\r\n            connection.close()\r\n\r\n\r\ndef delete_teacher(school_id, teacher_id, data_manager_instance):\r\n    \"\"\"Delete teacher from the users table\"\"\"\r\n    connection = create_db_connection()\r\n    if connection is None:\r\n        return False\r\n    \r\n    try:\r\n        # First delete related schedule entries\r\n        delete_schedule_query = \"DELETE FROM daily_schedule WHERE school_id = %s AND teacher_id = %s\"\r\n        execute_query(connection, delete_schedule_query, (school_id, teacher_id))\r\n        \r\n        # Then delete the teacher\r\n        query = \"DELETE FROM users WHERE school_id = %s AND teacher_id = %s\"\r\n        return execute_query(connection, query, (school_id, teacher_id))\r\n    finally:\r\n        if connection and connection.is_connected():\r\n            connection.close()","size_bytes":16009},"backend/existing_modules/utils/theme.py":{"content":"import streamlit as st\nfrom datetime import datetime\nimport pytz\ndef initialize_theme():\n    \"\"\"Initialize theme settings in session state\"\"\"\n    if \"dark_mode\" not in st.session_state:\n        st.session_state.dark_mode = False\n\n\n\ndef toggle_theme():\n    \"\"\"Toggle between light and dark mode\"\"\"\n    st.session_state.dark_mode = not st.session_state.dark_mode\n\ndef apply_theme():\n    \"\"\"Apply the current theme to the app\"\"\"\n    # Set theme based on dark mode toggle\n    if st.session_state.get(\"dark_mode\", False):\n        # Dark theme\n        st.markdown(\"\"\"\n        <style>\n            :root {\n                --main-bg-color: #1E1E1E;\n                --secondary-bg-color: #2D2D2D;\n                --text-color: #E0E0E0;\n                --accent-color: #4B89DC;\n            }\n            \n            .main .block-container {\n                background-color: var(--main-bg-color);\n                color: var(--text-color);\n            }\n            \n            .st-emotion-cache-1avcm0n {\n                background-color: var(--secondary-bg-color);\n                color: var(--text-color);\n            }\n            \n            .st-emotion-cache-18ni7ap {\n                background-color: var(--secondary-bg-color);\n                color: var(--text-color);\n            }\n            \n            .st-emotion-cache-1d0aukl {\n                color: var(--text-color);\n            }\n            \n            .st-emotion-cache-10trblm {\n                color: var(--text-color);\n            }\n            \n            /* Sidebar styles */\n            .st-emotion-cache-16txtl3 {\n                background-color: var(--secondary-bg-color);\n            }\n            \n            /* Form and input styles */\n            .st-emotion-cache-q8sbsg {\n                color: var(--text-color);\n            }\n            \n            /* Buttons */\n            .st-b7 {\n                background-color: var(--accent-color);\n            }\n        </style>\n        \"\"\", unsafe_allow_html=True)\n    else:\n        # Light theme (default)\n        st.markdown(\"\"\"\n        <style>\n            :root {\n                --main-bg-color: #FFFFFF;\n                --secondary-bg-color: #F0F2F6;\n                --text-color: #262730;\n                --accent-color: #3B82F6;\n            }\n        </style>\n        \"\"\", unsafe_allow_html=True)","size_bytes":2331},"backend/schedules/migrations/0001_initial.py":{"content":"# Generated by Django 5.2.5 on 2025-08-15 09:33\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('authentication', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='ScheduleTemplate',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('template_name', models.CharField(max_length=255)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('school', models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='authentication.school')),\n            ],\n            options={\n                'db_table': 'schedule_templates',\n            },\n        ),\n    ]\n","size_bytes":990},"backend/schedules/migrations/__init__.py":{"content":"","size_bytes":0},"backend/teachers/migrations/0001_initial.py":{"content":"# Generated by Django 5.2.5 on 2025-08-15 09:33\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('authentication', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='DailySchedule',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('day_of_week', models.CharField(max_length=20)),\n                ('teacher_id', models.CharField(max_length=255)),\n                ('name', models.CharField(max_length=255)),\n                ('category', models.CharField(blank=True, max_length=100, null=True)),\n                ('subject', models.CharField(blank=True, max_length=255, null=True)),\n                ('period_number', models.IntegerField()),\n                ('class_info', models.CharField(blank=True, max_length=255, null=True)),\n                ('school', models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='authentication.school')),\n            ],\n            options={\n                'db_table': 'daily_schedules',\n            },\n        ),\n        migrations.CreateModel(\n            name='SchedulesSummary',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('teacher_id', models.CharField(max_length=255)),\n                ('name', models.CharField(max_length=255)),\n                ('category', models.CharField(blank=True, max_length=100, null=True)),\n                ('subject', models.CharField(blank=True, max_length=255, null=True)),\n                ('period1', models.CharField(blank=True, max_length=255, null=True)),\n                ('period2', models.CharField(blank=True, max_length=255, null=True)),\n                ('period3', models.CharField(blank=True, max_length=255, null=True)),\n                ('period4', models.CharField(blank=True, max_length=255, null=True)),\n                ('period5', models.CharField(blank=True, max_length=255, null=True)),\n                ('period6', models.CharField(blank=True, max_length=255, null=True)),\n                ('period7', models.CharField(blank=True, max_length=255, null=True)),\n                ('school', models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='authentication.school')),\n            ],\n            options={\n                'db_table': 'schedules_summary',\n            },\n        ),\n        migrations.CreateModel(\n            name='Substitute',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('substitute_id', models.CharField(max_length=255)),\n                ('name', models.CharField(max_length=255)),\n                ('phone', models.CharField(blank=True, max_length=20, null=True)),\n                ('subject_expertise', models.TextField(blank=True, null=True)),\n                ('qualification', models.CharField(blank=True, max_length=255, null=True)),\n                ('availability', models.CharField(default='Available', max_length=100)),\n                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),\n                ('school', models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='authentication.school')),\n            ],\n            options={\n                'db_table': 'substitutes',\n                'unique_together': {('school', 'substitute_id')},\n            },\n        ),\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('teacher_id', models.CharField(max_length=255)),\n                ('name', models.CharField(max_length=255)),\n                ('phone', models.CharField(blank=True, max_length=20, null=True)),\n                ('category', models.CharField(blank=True, max_length=100, null=True)),\n                ('biometric_code', models.CharField(blank=True, max_length=255, null=True)),\n                ('school', models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='authentication.school')),\n            ],\n            options={\n                'db_table': 'users',\n                'unique_together': {('school', 'teacher_id')},\n            },\n        ),\n        migrations.CreateModel(\n            name='WorkloadCounter',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('teacher_id', models.CharField(max_length=255)),\n                ('workload_count', models.IntegerField(default=0)),\n                ('school', models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='authentication.school')),\n            ],\n            options={\n                'db_table': 'workload_counter',\n                'unique_together': {('school', 'teacher_id')},\n            },\n        ),\n    ]\n","size_bytes":5044},"backend/teachers/migrations/__init__.py":{"content":"","size_bytes":0},"frontend/src/components/AppHeader.js":{"content":"import React from 'react';\nimport { Layout, Avatar, Dropdown, Button, Typography } from 'antd';\nimport { \n  UserOutlined, \n  LogoutOutlined, \n  SettingOutlined,\n  MenuOutlined \n} from '@ant-design/icons';\n\nconst { Header } = Layout;\nconst { Text } = Typography;\n\nconst AppHeader = ({ user, onLogout, onMenuClick }) => {\n  const menuItems = [\n    {\n      key: 'profile',\n      icon: <UserOutlined />,\n      label: 'Profile',\n    },\n    {\n      key: 'settings',\n      icon: <SettingOutlined />,\n      label: 'Settings',\n    },\n    {\n      type: 'divider',\n    },\n    {\n      key: 'logout',\n      icon: <LogoutOutlined />,\n      label: 'Logout',\n      onClick: onLogout,\n    },\n  ];\n\n  return (\n    <Header \n      className=\"professional-header\"\n      style={{\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        padding: '0 20px',\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n      }}\n    >\n      <div style={{ display: 'flex', alignItems: 'center' }}>\n        <Button\n          type=\"text\"\n          icon={<MenuOutlined />}\n          onClick={onMenuClick}\n          style={{ \n            color: 'white',\n            marginRight: '16px',\n            display: 'block'\n          }}\n          className=\"mobile-menu-btn\"\n        />\n        <div>\n          <Text style={{ color: 'white', fontSize: '18px', fontWeight: '600' }}>\n            {user?.school_name || 'School Management System'}\n          </Text>\n        </div>\n      </div>\n\n      <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\n        <Text style={{ color: 'white' }}>\n          Welcome, {user?.name}\n        </Text>\n        <Dropdown \n          menu={{ items: menuItems }}\n          placement=\"bottomRight\"\n          trigger={['click']}\n        >\n          <Avatar \n            icon={<UserOutlined />}\n            style={{ \n              backgroundColor: '#40a9ff',\n              cursor: 'pointer'\n            }}\n          />\n        </Dropdown>\n      </div>\n    </Header>\n  );\n};\n\nexport default AppHeader;","size_bytes":2067},"frontend/src/components/AppSidebar.js":{"content":"import React from 'react';\nimport { Layout, Menu, Avatar, Typography } from 'antd';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport {\n  DashboardOutlined,\n  TeamOutlined,\n  CalendarOutlined,\n  SwapOutlined,\n  ClockCircleOutlined,\n  BarChartOutlined,\n  BookOutlined\n} from '@ant-design/icons';\n\nconst { Sider } = Layout;\nconst { Text } = Typography;\n\nconst AppSidebar = ({ collapsed, onCollapse, user }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const menuItems = [\n    {\n      key: '/dashboard',\n      icon: <DashboardOutlined />,\n      label: 'Dashboard',\n    },\n    {\n      key: '/teachers',\n      icon: <TeamOutlined />,\n      label: 'Teacher Management',\n    },\n    {\n      key: '/attendance',\n      icon: <ClockCircleOutlined />,\n      label: 'Attendance',\n    },\n    {\n      key: '/arrangements',\n      icon: <SwapOutlined />,\n      label: 'Arrangements',\n    },\n    {\n      key: '/schedules',\n      icon: <CalendarOutlined />,\n      label: 'Schedules',\n    },\n    {\n      key: '/reports',\n      icon: <BarChartOutlined />,\n      label: 'Reports',\n    },\n  ];\n\n  const handleMenuClick = ({ key }) => {\n    navigate(key);\n  };\n\n  return (\n    <Sider\n      collapsible\n      collapsed={collapsed}\n      onCollapse={onCollapse}\n      style={{\n        background: '#fff',\n        boxShadow: '2px 0 6px rgba(0,21,41,.35)',\n      }}\n      breakpoint=\"lg\"\n      collapsedWidth=\"80\"\n    >\n      {/* School Logo and Name */}\n      <div\n        style={{\n          height: '64px',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: collapsed ? 'center' : 'flex-start',\n          padding: collapsed ? '0' : '0 16px',\n          borderBottom: '1px solid #f0f0f0',\n          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n        }}\n      >\n        {user?.school_logo ? (\n          <Avatar\n            src={user.school_logo}\n            size={collapsed ? 32 : 40}\n            style={{ marginRight: collapsed ? 0 : 12 }}\n          />\n        ) : (\n          <Avatar\n            icon={<BookOutlined />}\n            size={collapsed ? 32 : 40}\n            style={{ \n              backgroundColor: '#40a9ff',\n              marginRight: collapsed ? 0 : 12 \n            }}\n          />\n        )}\n        {!collapsed && (\n          <div>\n            <Text \n              style={{ \n                color: 'white', \n                fontWeight: '600',\n                fontSize: '16px',\n                display: 'block',\n                lineHeight: '1.2'\n              }}\n            >\n              SMS\n            </Text>\n            <Text \n              style={{ \n                color: 'rgba(255,255,255,0.8)', \n                fontSize: '12px',\n                display: 'block'\n              }}\n            >\n              Management\n            </Text>\n          </div>\n        )}\n      </div>\n\n      {/* Navigation Menu */}\n      <Menu\n        mode=\"inline\"\n        selectedKeys={[location.pathname]}\n        items={menuItems}\n        onClick={handleMenuClick}\n        style={{\n          borderRight: 0,\n          height: 'calc(100vh - 64px)',\n          overflow: 'auto',\n        }}\n      />\n    </Sider>\n  );\n};\n\nexport default AppSidebar;","size_bytes":3233},"frontend/src/pages/ArrangementManagement.js":{"content":"import React from 'react';\nimport { Card, Typography, Alert } from 'antd';\n\nconst { Title } = Typography;\n\nconst ArrangementManagement = ({ user }) => {\n  return (\n    <div style={{ padding: '24px' }}>\n      <Card>\n        <Title level={3}>Teacher Arrangements</Title>\n        <Alert\n          message=\"Under Development\"\n          description=\"This feature will integrate with the preserved arrangement logic from the original system.\"\n          type=\"info\"\n          showIcon\n        />\n      </Card>\n    </div>\n  );\n};\n\nexport default ArrangementManagement;","size_bytes":560},"frontend/src/pages/AttendanceManagement.js":{"content":"import React from 'react';\nimport { Card, Typography, Alert } from 'antd';\n\nconst { Title } = Typography;\n\nconst AttendanceManagement = ({ user }) => {\n  return (\n    <div style={{ padding: '24px' }}>\n      <Card>\n        <Title level={3}>Attendance Management</Title>\n        <Alert\n          message=\"Under Development\"\n          description=\"This feature will integrate with the preserved attendance logic from the original system.\"\n          type=\"info\"\n          showIcon\n        />\n      </Card>\n    </div>\n  );\n};\n\nexport default AttendanceManagement;","size_bytes":558},"frontend/src/pages/Dashboard.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { \n  Row, \n  Col, \n  Card, \n  Statistic, \n  Typography, \n  List, \n  Tag,\n  Button,\n  Space,\n  Alert,\n  Spin\n} from 'antd';\nimport {\n  TeamOutlined,\n  ClockCircleOutlined,\n  SwapOutlined,\n  CalendarOutlined,\n  UserOutlined,\n  ExclamationCircleOutlined\n} from '@ant-design/icons';\nimport { apiService } from '../services/apiService';\n\nconst { Title, Text } = Typography;\n\nconst Dashboard = ({ user }) => {\n  const [loading, setLoading] = useState(true);\n  const [stats, setStats] = useState({\n    totalTeachers: 0,\n    presentToday: 0,\n    absentToday: 0,\n    arrangements: 0\n  });\n  const [recentActivities, setRecentActivities] = useState([]);\n  const [todayArrangements, setTodayArrangements] = useState([]);\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, [user]);\n\n  const fetchDashboardData = async () => {\n    try {\n      setLoading(true);\n      \n      // Fetch teachers data\n      const teachersResponse = await apiService.getTeachers(user.school_id);\n      \n      // For now, using sample data since backend endpoints are not fully implemented\n      // In production, you would fetch real data from respective endpoints\n      \n      setStats({\n        totalTeachers: teachersResponse.success ? teachersResponse.teachers.length : 0,\n        presentToday: 0, // Will be calculated from attendance data\n        absentToday: 0,  // Will be calculated from attendance data\n        arrangements: 0  // Will be fetched from arrangements endpoint\n      });\n\n      // Sample recent activities\n      setRecentActivities([\n        {\n          id: 1,\n          type: 'teacher_added',\n          message: 'New teacher John Doe was added to the system',\n          time: '2 hours ago',\n          icon: <UserOutlined style={{ color: '#52c41a' }} />\n        },\n        {\n          id: 2,\n          type: 'arrangement',\n          message: 'Teacher arrangement created for Math Class',\n          time: '4 hours ago',\n          icon: <SwapOutlined style={{ color: '#1890ff' }} />\n        },\n        {\n          id: 3,\n          type: 'attendance',\n          message: 'Attendance marked for 25 teachers',\n          time: '1 day ago',\n          icon: <ClockCircleOutlined style={{ color: '#722ed1' }} />\n        }\n      ]);\n\n      // Sample today's arrangements\n      setTodayArrangements([\n        {\n          id: 1,\n          absentTeacher: 'John Smith',\n          replacementTeacher: 'Mary Johnson',\n          class: 'Class 10A',\n          period: 3,\n          subject: 'Mathematics',\n          status: 'Confirmed'\n        }\n      ]);\n\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'center', \n        alignItems: 'center', \n        height: '400px' \n      }}>\n        <Spin size=\"large\" />\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ padding: '24px' }}>\n      {/* Welcome Header */}\n      <div style={{ marginBottom: '24px' }}>\n        <Title level={2}>\n          Welcome back, {user.name}! 👋\n        </Title>\n        <Text type=\"secondary\">\n          Here's what's happening at {user.school_name} today.\n        </Text>\n      </div>\n\n      {/* Statistics Cards */}\n      <Row gutter={[16, 16]} style={{ marginBottom: '24px' }}>\n        <Col xs={24} sm={12} lg={6}>\n          <Card>\n            <Statistic\n              title=\"Total Teachers\"\n              value={stats.totalTeachers}\n              prefix={<TeamOutlined />}\n              valueStyle={{ color: '#1890ff' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} lg={6}>\n          <Card>\n            <Statistic\n              title=\"Present Today\"\n              value={stats.presentToday}\n              prefix={<ClockCircleOutlined />}\n              valueStyle={{ color: '#52c41a' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} lg={6}>\n          <Card>\n            <Statistic\n              title=\"Absent Today\"\n              value={stats.absentToday}\n              prefix={<ExclamationCircleOutlined />}\n              valueStyle={{ color: '#ff4d4f' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} lg={6}>\n          <Card>\n            <Statistic\n              title=\"Arrangements\"\n              value={stats.arrangements}\n              prefix={<SwapOutlined />}\n              valueStyle={{ color: '#722ed1' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 16]}>\n        {/* Today's Arrangements */}\n        <Col xs={24} lg={12}>\n          <Card \n            title=\"Today's Arrangements\" \n            extra={\n              <Button type=\"link\" size=\"small\">\n                View All\n              </Button>\n            }\n          >\n            {todayArrangements.length > 0 ? (\n              <List\n                dataSource={todayArrangements}\n                renderItem={item => (\n                  <List.Item>\n                    <List.Item.Meta\n                      title={\n                        <Space>\n                          <Text strong>{item.absentTeacher}</Text>\n                          <SwapOutlined style={{ color: '#1890ff' }} />\n                          <Text strong>{item.replacementTeacher}</Text>\n                        </Space>\n                      }\n                      description={\n                        <Space>\n                          <Text>{item.class}</Text>\n                          <Text>•</Text>\n                          <Text>Period {item.period}</Text>\n                          <Text>•</Text>\n                          <Text>{item.subject}</Text>\n                          <Tag color=\"green\">{item.status}</Tag>\n                        </Space>\n                      }\n                    />\n                  </List.Item>\n                )}\n              />\n            ) : (\n              <Alert\n                message=\"No arrangements for today\"\n                description=\"All teachers are present today!\"\n                type=\"success\"\n                showIcon\n              />\n            )}\n          </Card>\n        </Col>\n\n        {/* Recent Activities */}\n        <Col xs={24} lg={12}>\n          <Card \n            title=\"Recent Activities\"\n            extra={\n              <Button type=\"link\" size=\"small\">\n                View All\n              </Button>\n            }\n          >\n            <List\n              dataSource={recentActivities}\n              renderItem={item => (\n                <List.Item>\n                  <List.Item.Meta\n                    avatar={item.icon}\n                    title={item.message}\n                    description={item.time}\n                  />\n                </List.Item>\n              )}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Quick Actions */}\n      <Card title=\"Quick Actions\" style={{ marginTop: '24px' }}>\n        <Space wrap>\n          <Button type=\"primary\" icon={<TeamOutlined />}>\n            Add Teacher\n          </Button>\n          <Button icon={<ClockCircleOutlined />}>\n            Mark Attendance\n          </Button>\n          <Button icon={<SwapOutlined />}>\n            Create Arrangement\n          </Button>\n          <Button icon={<CalendarOutlined />}>\n            View Schedule\n          </Button>\n        </Space>\n      </Card>\n    </div>\n  );\n};\n\nexport default Dashboard;","size_bytes":7481},"frontend/src/pages/LoginPage.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { \n  Form, \n  Input, \n  Button, \n  Select, \n  Typography, \n  message, \n  Card,\n  Avatar,\n  Spin \n} from 'antd';\nimport { \n  UserOutlined, \n  LockOutlined, \n  BookOutlined \n} from '@ant-design/icons';\nimport { apiService } from '../services/apiService';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\nconst LoginPage = ({ onLogin }) => {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [schools, setSchools] = useState([]);\n  const [schoolsLoading, setSchoolsLoading] = useState(true);\n  const [selectedSchool, setSelectedSchool] = useState(null);\n\n  useEffect(() => {\n    fetchSchools();\n  }, []);\n\n  const fetchSchools = async () => {\n    try {\n      setSchoolsLoading(true);\n      const response = await apiService.getSchools();\n      if (response.success) {\n        setSchools(response.schools);\n      } else {\n        message.error('Failed to load schools');\n      }\n    } catch (error) {\n      console.error('Error fetching schools:', error);\n      message.error('Failed to connect to server');\n    } finally {\n      setSchoolsLoading(false);\n    }\n  };\n\n  const handleSchoolChange = (schoolId) => {\n    const school = schools.find(s => s.school_id === schoolId);\n    setSelectedSchool(school);\n  };\n\n  const handleSubmit = async (values) => {\n    try {\n      setLoading(true);\n      const response = await apiService.login({\n        school_id: values.school_id,\n        username: values.username,\n        password: values.password,\n      });\n\n      if (response.success) {\n        onLogin(response.user);\n      } else {\n        message.error(response.error || 'Login failed');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      message.error(\n        error.response?.data?.error || \n        'Login failed. Please check your credentials.'\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <Card \n        className=\"login-form\"\n        style={{\n          borderRadius: '15px',\n          boxShadow: '0 20px 40px rgba(0,0,0,0.1)',\n        }}\n      >\n        {/* Header */}\n        <div style={{ textAlign: 'center', marginBottom: '30px' }}>\n          {selectedSchool?.logourl ? (\n            <Avatar\n              src={selectedSchool.logourl}\n              size={64}\n              style={{ marginBottom: '16px' }}\n            />\n          ) : (\n            <Avatar\n              icon={<BookOutlined />}\n              size={64}\n              style={{ \n                backgroundColor: '#40a9ff',\n                marginBottom: '16px'\n              }}\n            />\n          )}\n          <Title level={2} style={{ margin: '0 0 8px 0', color: '#1890ff' }}>\n            {selectedSchool?.school_name || 'School Management System'}\n          </Title>\n          <Text type=\"secondary\">\n            Teacher Arrangement & Attendance System\n          </Text>\n        </div>\n\n        {/* Login Form */}\n        <Form\n          form={form}\n          onFinish={handleSubmit}\n          layout=\"vertical\"\n          size=\"large\"\n        >\n          <Form.Item\n            name=\"school_id\"\n            label=\"Select School\"\n            rules={[\n              { required: true, message: 'Please select your school!' }\n            ]}\n          >\n            <Select\n              placeholder=\"Choose your school\"\n              loading={schoolsLoading}\n              onChange={handleSchoolChange}\n              showSearch\n              filterOption={(input, option) =>\n                option.children.toLowerCase().includes(input.toLowerCase())\n              }\n            >\n              {schools.map(school => (\n                <Option key={school.school_id} value={school.school_id}>\n                  <div style={{ display: 'flex', alignItems: 'center' }}>\n                    {school.logourl ? (\n                      <Avatar\n                        src={school.logourl}\n                        size={24}\n                        style={{ marginRight: '8px' }}\n                      />\n                    ) : (\n                      <Avatar\n                        icon={<BookOutlined />}\n                        size={24}\n                        style={{ \n                          backgroundColor: '#40a9ff',\n                          marginRight: '8px'\n                        }}\n                      />\n                    )}\n                    {school.school_name}\n                  </div>\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n\n          <Form.Item\n            name=\"username\"\n            label=\"Username\"\n            rules={[\n              { required: true, message: 'Please enter your username!' }\n            ]}\n          >\n            <Input\n              prefix={<UserOutlined />}\n              placeholder=\"Enter your username\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            label=\"Password\"\n            rules={[\n              { required: true, message: 'Please enter your password!' }\n            ]}\n          >\n            <Input.Password\n              prefix={<LockOutlined />}\n              placeholder=\"Enter your password\"\n            />\n          </Form.Item>\n\n          <Form.Item style={{ marginBottom: 0 }}>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              loading={loading}\n              block\n              style={{\n                height: '45px',\n                fontSize: '16px',\n                fontWeight: '600',\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n                border: 'none',\n              }}\n            >\n              {loading ? <Spin size=\"small\" /> : 'Login'}\n            </Button>\n          </Form.Item>\n        </Form>\n\n        {/* Footer */}\n        <div style={{ textAlign: 'center', marginTop: '24px' }}>\n          <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n            Powered by School Management System\n          </Text>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default LoginPage;","size_bytes":6151},"frontend/src/pages/Reports.js":{"content":"import React from 'react';\nimport { Card, Typography, Alert } from 'antd';\n\nconst { Title } = Typography;\n\nconst Reports = ({ user }) => {\n  return (\n    <div style={{ padding: '24px' }}>\n      <Card>\n        <Title level={3}>Reports & Analytics</Title>\n        <Alert\n          message=\"Under Development\"\n          description=\"This feature will show various reports and analytics for the school management system.\"\n          type=\"info\"\n          showIcon\n        />\n      </Card>\n    </div>\n  );\n};\n\nexport default Reports;","size_bytes":527},"frontend/src/pages/ScheduleManagement.js":{"content":"import React from 'react';\nimport { Card, Typography, Alert } from 'antd';\n\nconst { Title } = Typography;\n\nconst ScheduleManagement = ({ user }) => {\n  return (\n    <div style={{ padding: '24px' }}>\n      <Card>\n        <Title level={3}>Schedule Management</Title>\n        <Alert\n          message=\"Under Development\"\n          description=\"This feature will show teacher schedules and allow schedule management.\"\n          type=\"info\"\n          showIcon\n        />\n      </Card>\n    </div>\n  );\n};\n\nexport default ScheduleManagement;","size_bytes":534},"frontend/src/pages/TeacherManagement.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { \n  Table, \n  Button, \n  Card, \n  Typography, \n  Space, \n  Input, \n  Tag,\n  Modal,\n  Form,\n  message,\n  Spin\n} from 'antd';\nimport { \n  PlusOutlined, \n  EditOutlined, \n  DeleteOutlined,\n  SearchOutlined,\n  UserOutlined \n} from '@ant-design/icons';\nimport { apiService } from '../services/apiService';\n\nconst { Title } = Typography;\nconst { Search } = Input;\n\nconst TeacherManagement = ({ user }) => {\n  const [teachers, setTeachers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [editingTeacher, setEditingTeacher] = useState(null);\n  const [form] = Form.useForm();\n  const [searchText, setSearchText] = useState('');\n\n  useEffect(() => {\n    fetchTeachers();\n  }, [user]);\n\n  const fetchTeachers = async () => {\n    try {\n      setLoading(true);\n      const response = await apiService.getTeachers(user.school_id);\n      if (response.success) {\n        setTeachers(response.teachers);\n      }\n    } catch (error) {\n      console.error('Error fetching teachers:', error);\n      message.error('Failed to load teachers');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddTeacher = () => {\n    setEditingTeacher(null);\n    form.resetFields();\n    form.setFieldsValue({ school: user.school_id });\n    setModalVisible(true);\n  };\n\n  const handleEditTeacher = (record) => {\n    setEditingTeacher(record);\n    form.setFieldsValue(record);\n    setModalVisible(true);\n  };\n\n  const handleDeleteTeacher = async (record) => {\n    Modal.confirm({\n      title: 'Delete Teacher',\n      content: `Are you sure you want to delete ${record.name}?`,\n      onOk: async () => {\n        try {\n          await apiService.deleteTeacher(record.id);\n          message.success('Teacher deleted successfully');\n          fetchTeachers();\n        } catch (error) {\n          message.error('Failed to delete teacher');\n        }\n      },\n    });\n  };\n\n  const handleSubmit = async (values) => {\n    try {\n      if (editingTeacher) {\n        await apiService.updateTeacher(editingTeacher.id, values);\n        message.success('Teacher updated successfully');\n      } else {\n        await apiService.addTeacher(values);\n        message.success('Teacher added successfully');\n      }\n      setModalVisible(false);\n      fetchTeachers();\n    } catch (error) {\n      message.error('Failed to save teacher');\n    }\n  };\n\n  const columns = [\n    {\n      title: 'Teacher ID',\n      dataIndex: 'teacher_id',\n      key: 'teacher_id',\n      width: 120,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      filteredValue: searchText ? [searchText] : null,\n      onFilter: (value, record) =>\n        record.name.toLowerCase().includes(value.toLowerCase()) ||\n        record.teacher_id.toLowerCase().includes(value.toLowerCase()),\n    },\n    {\n      title: 'Phone',\n      dataIndex: 'phone',\n      key: 'phone',\n      width: 130,\n    },\n    {\n      title: 'Category',\n      dataIndex: 'category',\n      key: 'category',\n      width: 120,\n      render: (category) => (\n        <Tag color={category === 'Principal' ? 'red' : category === 'Vice Principal' ? 'orange' : 'blue'}>\n          {category}\n        </Tag>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 150,\n      render: (_, record) => (\n        <Space>\n          <Button\n            type=\"primary\"\n            size=\"small\"\n            icon={<EditOutlined />}\n            onClick={() => handleEditTeacher(record)}\n          >\n            Edit\n          </Button>\n          <Button\n            danger\n            size=\"small\"\n            icon={<DeleteOutlined />}\n            onClick={() => handleDeleteTeacher(record)}\n          >\n            Delete\n          </Button>\n        </Space>\n      ),\n    },\n  ];\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <Card>\n        <div style={{ marginBottom: '16px', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Title level={3} style={{ margin: 0 }}>\n            Teacher Management\n          </Title>\n          <Space>\n            <Search\n              placeholder=\"Search teachers...\"\n              allowClear\n              style={{ width: 250 }}\n              onChange={(e) => setSearchText(e.target.value)}\n            />\n            <Button\n              type=\"primary\"\n              icon={<PlusOutlined />}\n              onClick={handleAddTeacher}\n            >\n              Add Teacher\n            </Button>\n          </Space>\n        </div>\n\n        <Table\n          columns={columns}\n          dataSource={teachers}\n          rowKey=\"id\"\n          loading={loading}\n          pagination={{\n            pageSize: 10,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: (total) => `Total ${total} teachers`,\n          }}\n          scroll={{ x: 800 }}\n        />\n      </Card>\n\n      {/* Add/Edit Teacher Modal */}\n      <Modal\n        title={editingTeacher ? 'Edit Teacher' : 'Add Teacher'}\n        open={modalVisible}\n        onCancel={() => setModalVisible(false)}\n        footer={null}\n        width={600}\n      >\n        <Form\n          form={form}\n          layout=\"vertical\"\n          onFinish={handleSubmit}\n        >\n          <Form.Item name=\"school\" hidden>\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            name=\"teacher_id\"\n            label=\"Teacher ID\"\n            rules={[{ required: true, message: 'Please enter teacher ID' }]}\n          >\n            <Input placeholder=\"Enter teacher ID\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"name\"\n            label=\"Name\"\n            rules={[{ required: true, message: 'Please enter teacher name' }]}\n          >\n            <Input placeholder=\"Enter teacher name\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"phone\"\n            label=\"Phone\"\n            rules={[{ required: true, message: 'Please enter phone number' }]}\n          >\n            <Input placeholder=\"Enter phone number\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"category\"\n            label=\"Category\"\n            rules={[{ required: true, message: 'Please enter category' }]}\n          >\n            <Input placeholder=\"e.g., Teacher, Principal, Vice Principal\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"biometric_code\"\n            label=\"Biometric Code\"\n          >\n            <Input placeholder=\"Enter biometric code (optional)\" />\n          </Form.Item>\n\n          <Form.Item style={{ marginBottom: 0, textAlign: 'right' }}>\n            <Space>\n              <Button onClick={() => setModalVisible(false)}>\n                Cancel\n              </Button>\n              <Button type=\"primary\" htmlType=\"submit\">\n                {editingTeacher ? 'Update' : 'Add'} Teacher\n              </Button>\n            </Space>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default TeacherManagement;","size_bytes":7051},"frontend/src/services/apiService.js":{"content":"import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth headers if needed\napiClient.interceptors.request.use(\n  (config) => {\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n    if (user.token) {\n      config.headers.Authorization = `Bearer ${user.token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response?.status === 401) {\n      // Token expired or invalid\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const apiService = {\n  // Authentication\n  async getSchools() {\n    const response = await apiClient.get('/auth/schools/');\n    return response.data;\n  },\n\n  async login(credentials) {\n    const response = await apiClient.post('/auth/login/', credentials);\n    return response.data;\n  },\n\n  async logout() {\n    const response = await apiClient.post('/auth/logout/');\n    return response.data;\n  },\n\n  async getProfile() {\n    const response = await apiClient.get('/auth/profile/');\n    return response.data;\n  },\n\n  // Teachers\n  async getTeachers(schoolId) {\n    const response = await apiClient.get(`/teachers/?school_id=${schoolId}`);\n    return response.data;\n  },\n\n  async addTeacher(teacherData) {\n    const response = await apiClient.post('/teachers/add/', teacherData);\n    return response.data;\n  },\n\n  async updateTeacher(teacherId, teacherData) {\n    const response = await apiClient.put(`/teachers/${teacherId}/update/`, teacherData);\n    return response.data;\n  },\n\n  async deleteTeacher(teacherId) {\n    const response = await apiClient.delete(`/teachers/${teacherId}/delete/`);\n    return response.data;\n  },\n\n  async getSchedule(schoolId, dayOfWeek = null) {\n    let url = `/teachers/schedule/?school_id=${schoolId}`;\n    if (dayOfWeek) {\n      url += `&day_of_week=${dayOfWeek}`;\n    }\n    const response = await apiClient.get(url);\n    return response.data;\n  },\n\n  async getWorkload(schoolId) {\n    const response = await apiClient.get(`/teachers/workload/?school_id=${schoolId}`);\n    return response.data;\n  },\n\n  async getSubstitutes(schoolId) {\n    const response = await apiClient.get(`/teachers/substitutes/?school_id=${schoolId}`);\n    return response.data;\n  },\n\n  // Arrangements (to be implemented)\n  async getArrangements(schoolId) {\n    // Placeholder - implement when backend is ready\n    return { success: true, arrangements: [] };\n  },\n\n  // Attendance (to be implemented)\n  async getAttendance(schoolId) {\n    // Placeholder - implement when backend is ready\n    return { success: true, attendance: [] };\n  },\n};","size_bytes":2989}}}